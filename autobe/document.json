{"operations":[{"name":"join","method":"post","path":"/auth/guest/join","authorizationType":"join","authorizationRole":"guest","specification":"Creates a temporary guest account that allows read-only access to public content. This operation is essential for enabling guest users to browse the platform without requiring traditional authentication, aligning with the business requirement that 'reading is open to everyone' while restricting participation to authenticated users.","summary":"Creates temporary guest account for read-only access to public content.","description":"This API operation generates a temporary guest session for unauthenticated users who wish to browse public content on the community platform. The guest account enables users to view all posts, comments, and communities while restricting access to interactive features like posting, commenting, voting, and community membership—all of which require proper authentication.\n\nThe operation creates an entry in the community_platform_guest table with a unique UUID identifier and an audit timestamp, capturing the IP address if available for analytics and spam detection purposes. This temporary session does not persist user preferences or account details, ensuring compliance with the platform security model where only authenticated members have persistent identities.\n\nThis guest session is explicitly designed to align with the business requirement that 'reading is open to everyone' while maintaining the separation between read and write operations. The guest account remains active only for the duration of the session and is not tied to any persistent user state. When the user attempts to perform any privileged action (like joining a community), the system will prompt authentication, and the guest session will be seamlessly replaced with a proper member account.\n\nSecurity is maintained by ensuring the guest account has no permissions beyond read access and cannot be used for any form of content modification. The guest session does not generate tokens that can be used to access any edit or write endpoints, ensuring strict adherence to the requirement that 'ownership is account-based.' The guest joining process is intentionally limited to initiating session-based access without creating an account that persists beyond the current browsing session.\n\nThis operation must preceded by the user requesting access to the platform and must be followed by any subsequent reads of content. After authentication, the guest session is effectively replaced by a member session, and all previous guest activities are isolated and non-persistent.","parameters":[],"requestBody":null,"responseBody":{"description":"Returns authentication token and guest session information for temporary read-only access to public content.","typeName":"ICommunityPlatformGuest.IAuthorized"},"prerequisites":[]},{"name":"refresh","method":"post","path":"/auth/guest/refresh","authorizationType":"refresh","authorizationRole":"guest","specification":"Extends the duration of a guest session by issuing a new access token while preserving the guest's read-only access to public content. This ensures continuous access without requiring re-authorization during prolonged browsing sessions, aligning with the business requirement for 'generous session length' and seamless user experience.","summary":"Refreshes temporary guest session token to extend read-only access to public content.","description":"This API operation extends the validity period of a Guest user session by generating a new access token, enabling continuous read-only access to public content without requiring re-authentication. The refresh operation is essential for maintaining seamless user experience during extended browsing sessions while preserving the security boundary that distinguishes guest (unauthenticated) from member (authenticated) users.\n\nThe refresh endpoint consumes a valid guest session token—typically acquired via the /auth/guest/join endpoint—and returns a new token pair with updated expiration timestamps. This mechanism allows users to remain in 'read-only' mode for prolonged periods, aligning with the design principle that 'keep the login session generously long.' The system tracks the guest's IP address and timestamps to detect suspicious activity while maintaining user privacy.\n\nBecause the guest role has no persistent identity or account state, the refresh operation cannot reassign permissions or grant additional privileges. It merely extends the life of the temporary, stateless session. When the user attempts any privileged action (post, comment, vote, join), the system will prompt authentication, at which point the guest session will be terminated and replaced with a member session if credentials are valid.\n\nThis operation does not affect any user's ability to participate in the platform; it is purely a mechanism for maintaining read-only access to public content. The refresh cycle is governed by the platform's security policies, ensuring that guest sessions do not extend beyond reasonable limits, and does not provide a mechanism to circumvent authentication requirements for interactive features.","parameters":[],"requestBody":null,"responseBody":{"description":"Returns a refreshed access token and session information to extend guest read-only access.","typeName":"ICommunityPlatformGuest.IAuthorized"},"prerequisites":[]},{"specification":"Generates a new member account with authentication credentials. This operation corresponds to the community_platform_member table and creates a new record with email, password_hash, and created_at fields. The operation addresses the requirement for user registration (join) in the community platform, allowing members to obtain authentication tokens for subsequent interactions. This is essential for enabling members to perform authenticated actions like posting, commenting, voting, joining communities, and creating communities as specified in the business rules.","authorizationType":"join","description":"This API operation creates a new member account in the communityPlatform system, enabling users to become authenticated participants. It maps directly to the community_platform_member table where the account's email, password_hash, and created_at fields are persisted.\n\nThe operation requires the user to provide a valid email address and password, which are securely stored in the system. The email field is unique across all members and is used as the primary identifier for authentication. The password is hashed using industry-standard cryptographic methods before being stored, ensuring security compliance. The created_at timestamp is automatically generated upon record creation.\n\nThis functionality supports the member role's requirement to join the platform, complementing the login and refresh operations for full authentication flow. It aligns with the business rule that member accounts are needed for posting, commenting, voting, joining communities, and creating communities.\n\nSecurity considerations include ensuring HTTPS transport, enforcing strong password policies, and validating email format. The schema explicitly includes both email and password_hash fields which are required for this operation, and no other fields from the member table are necessary for initial account creation.\n\nThis join operation is the first step in a member's journey on the platform, enabling them to subsequently perform login and refresh operations to maintain their authenticated session. Without successful execution of this operation, users remain in guest mode with limited functionality.","summary":"Create new member account with email and password hash for authentication.","parameters":[],"path":"/auth/member/join","method":"post","name":"join","prerequisites":[],"requestBody":{"description":"Payload containing registration credentials for a new member account.","typeName":"IMember.IJoin"},"responseBody":{"description":"Authentication token payload for the newly created member account.","typeName":"ICommunityPlatformMember.IAuthorized"},"authorizationRole":"member"},{"specification":"Authenticates an existing member using email and password credentials to generate JWT access and refresh tokens. This operation validates the provided credentials against the community_platform_member table's email and password_hash fields to ensure proper authentication. It supports the login requirement for the member role and is essential for maintaining authenticated sessions on the platform.","authorizationType":"login","description":"This API operation authenticates an existing member using email and password credentials to establish a secure session. It validates the provided credentials against the community_platform_member table, specifically checking the email field for existence and the password_hash field for cryptographic match.\n\nThe operation takes an email and password as input, verifies that the email corresponds to an active member account (deleted_at field is null), and confirms the password matches the stored hash using bcrypt or similar secure algorithm. Upon successful verification, it generates a JWT access token with a 30-minute expiration and a refresh token with a 30-day expiration as per the system's authentication policy.\n\nThis functionality supports the member role's requirement to authenticate and access protected operations like posting, commenting, voting, joining communities, and creating communities. The schema contains both email and password_hash fields which are required for this authentication check, making this operation directly supported by the database structure.\n\nSecurity considerations include using HTTPS for transport, implementing rate limiting to prevent brute force attacks, and ensuring tokens are stored securely on the client side. The generated tokens are signed with a secret key and contain the user's ID and role information for authorization purposes.\n\nThis login operation works in conjunction with the join and refresh operations to form a complete authentication workflow, allowing members to securely interact with all protected features of the community platform.","summary":"Authenticate member with email and password to generate access and refresh tokens.","parameters":[],"path":"/auth/member/login","method":"post","name":"login","prerequisites":[],"requestBody":{"description":"Credentials for authenticating an existing member account.","typeName":"IMember.ILogin"},"responseBody":{"description":"Authentication token payload for the logged-in member account.","typeName":"ICommunityPlatformMember.IAuthorized"},"authorizationRole":"member"},{"specification":"Refreshes the JWT access token for an authenticated member using a valid refresh token. This operation ensures continuous access without requiring re-authentication with credentials, improving user experience on the community platform. The refresh mechanism uses the community_platform_member's last_login_at field to validate session validity.","authorizationType":"refresh","description":"This API operation refreshes the JWT access token for an authenticated member using a valid refresh token. It validates the refresh token signature and checks that the underlying member account is still active (deleted_at field is null).\n\nWhen a refresh request is received, the system verifies the refresh token's integrity and expiry, then checks the associated member account in the community_platform_member table. If the account is active, it generates a new access token with a fresh 30-minute expiration while preserving the 30-day refresh token. The last_login_at field is updated to reflect the most recent authentic activity, helping track user sessions and implement session management policies.\n\nThis refresh functionality supports the member role's authentication requirements by enabling users to maintain continuous access to protected features like posting, commenting, voting, joining communities, and creating communities without requiring re-authentication with their credentials. This improves user experience while maintaining security boundaries.\n\nThe operation depends on the member table's existence and validates against its structure. The refresh flow is essential for the platform's session management strategy, complementing the login and join operations to form a complete authentication cycle.\n\nSecurity considerations include token revocation lists for compromised tokens, secure token storage on the client side, and protection against token theft or replay attacks.","summary":"Refresh access token using valid refresh token to extend member session without re-authentication.","parameters":[],"path":"/auth/member/refresh","method":"post","name":"refresh","prerequisites":[],"requestBody":{"description":"Refresh token to extend the member's authenticated session.","typeName":"IMember.IRefresh"},"responseBody":{"description":"Newly generated access token for the member account.","typeName":"ICommunityPlatformMember.IAuthorized"},"authorizationRole":"member"},{"specification":"This operation handles user registration for the admin role. It creates a new admin account in the system by validating the provided credentials against the community_platform_member schema, which includes email, password_hash, and optional display_name fields. The operation inserts a new record into the community_platform_member table and then creates a corresponding record in the community_platform_admin table with the member_id reference, establishing the admin privilege level. The password_hash field is essential for authentication and is required according to the Prisma schema. The operation follows a two-step process: first creating the member account with authentication credentials, then promoting it to admin status with an entry in the admin table.","authorizationType":"join","description":"This API operation handles registration for admin users on the community platform. The operation follows a two-step process consistent with the Prisma schema: first, it creates a new member account in the community_platform_member table with required fields including email, password_hash (for authentication), and optional display_name. Then, it creates a corresponding admin record in the community_platform_admin table that references the member_id, establishing the admin privilege level. This two-table approach ensures separation of concerns between authentication credentials and privilege levels. The community_platform_member table contains all necessary fields for user registration: email (unique identifier), password_hash (mandatory for secure authentication), and optional display_name (up to 32 characters). The operation does not create the admin record first because admin privileges are granted to existing members, not as standalone entities. The success of this operation depends on the existence and proper validation of the community_platform_member schema fields. The operation handles new user registration for the admin role only and requires the user to provide valid credentials that satisfy the member creation constraints defined in the schema.","summary":"Register a new admin user by creating a member account and elevating to admin privilege.","parameters":[],"path":"/auth/admin/join","method":"post","name":"join","prerequisites":[],"requestBody":{"description":"Request body for admin registration containing authentication credentials and optional display name as defined in the community_platform_member schema.","typeName":"ICommunityPlatformAdmin.IJoin"},"responseBody":{"description":"Response containing the authentication token and user information after successful admin registration. The response body schema is defined according to the specification for admin authentication operations, using the ICommunityPlatformAdmin.IAuthorized format.","typeName":"ICommunityPlatformAdmin.IAuthorized"},"authorizationRole":"admin"},{"specification":"This operation handles authentication for admin users by validating credentials against the community_platform_member table. It receives email and password (hashed on server side) and returns an authentication token upon successful validation. The operation checks the community_platform_member table for a matching email and verifies the password_hash against the provided credential. The operation requires the email and password_hash fields, which are defined in the community_platform_member schema as mandatory fields for authentication. The operation does not use any other fields for this process, as the Prisma schema only requires these authentication fields for login verification. The response includes JWT tokens for secure session management, following the standardized response format for authentication operations.","authorizationType":"login","description":"This API operation handles the authentication process for admin users on the community platform. It validates user credentials against the community_platform_member table, specifically checking the email field that serves as the unique identifier and the password_hash field that contains the hashed authentication credential. These fields are mandatory according to the Prisma schema definition of the community_platform_member table. The operation accepts an email address and password (which is hashed server-side) and verifies them against the stored values in the database. Upon successful validation, the system generates JWT access and refresh tokens to manage the user's session. The operation does not interact with any other tables or fields for authentication purposes, as the membership authentication logic is contained entirely within the community_platform_member table with its defined fields: email and password_hash. The operation returns a standardized response format that conforms to the ICommunityPlatformAdmin.IAuthorized schema, containing the access and refresh tokens. The response does not include sensitive user data beyond what's necessary for session management, following security best practices.","summary":"Authenticate admin user with email and password to obtain JWT tokens.","parameters":[],"path":"/auth/admin/login","method":"post","name":"login","prerequisites":[],"requestBody":{"description":"Request body containing authentication credentials for admin login, including email address and password as defined in community_platform_member schema.","typeName":"ICommunityPlatformAdmin.ILogin"},"responseBody":{"description":"Response containing the authentication tokens after successful admin login, formatted according to the ICommunityPlatformAdmin.IAuthorized schema specification.","typeName":"ICommunityPlatformAdmin.IAuthorized"},"authorizationRole":"admin"},{"specification":"This operation refreshes an expired access token for admin users using a valid refresh token. It validates the refresh token against the system's token store and issues a new access token while maintaining the user's authentication state. The operation does not require username or password re-entry and relies on the refresh token mechanism defined in the authentication protocol. Refresh tokens are associated with user records in the database when generated during login or join operations.","authorizationType":"refresh","description":"This API operation handles the token refresh process for admin users on the community platform. When a user's access token expires (typically after 30 minutes), this operation allows them to obtain a new access token without re-entering credentials. The operation requires a valid refresh token that was issued during the initial login or registration process. The refresh token is validated against the system's secure token store, which maintains persistence of valid refresh tokens associated with the user's member account in the community_platform_member table. The operation does not interact with any other schema fields beyond token validation; it does not require password_hash, email, or display_name fields from the member table as these are not needed once authentication has been established. The operation follows the standard refresh protocol where a valid refresh token triggers the issuance of a new access token while the refresh token itself remains valid for future use (or is renewed based on policy). The response conforms to the standardized authentication response format using the ICommunityPlatformAdmin.IAuthorized schema, ensuring consistent response structure across all authentication operations. This approach maintains session continuity while enhancing security through short-lived access tokens.","summary":"Refresh expired admin access token using a refresh token to maintain authenticated session.","parameters":[],"path":"/auth/admin/refresh","method":"post","name":"refresh","prerequisites":[],"requestBody":{"description":"Request body containing the refresh token to obtain a new access token. The refresh token is issued during join or login operations and stored securely on the client side.","typeName":"ICommunityPlatformAdmin.IRefresh"},"responseBody":{"description":"Response containing the newly issued access token and potentially a new refresh token, formatted according to the ICommunityPlatformAdmin.IAuthorized schema specification for authentication responses.","typeName":"ICommunityPlatformAdmin.IAuthorized"},"authorizationRole":"admin"},{"specification":"This operation retrieves a list of all user roles defined in the system. It returns the complete set of role definitions (guest, member, admin) with their descriptions, which are used to enforce access control policies throughout the platform. This endpoint serves as a read-only API to expose role metadata for administrative interfaces and client-side permission mapping.","path":"/communityPlatform/roles","method":"get","summary":"Retrieve list of all user roles","description":"This endpoint returns a complete collection of all user role definitions defined in the community platform system. Each role (guest, member, admin) represents a distinct permission profile that determines what actions a user can perform.\n\nThe role definitions are immutable and stored in the community_platform_user_roles table, with each entry containing a unique identifier, role_name, and detailed description of permissions. These role definitions are referenced by user accounts to enforce access control policies system-wide.\n\nThis API is useful for administrative dashboards, client applications that need to determine user capability constraints, and debugging authorization issues. The response does not include any user-specific information, only the canonical role definitions.\n\nSince this is a read-only operation that exposes public system metadata, no authentication is required - even unauthenticated guests can access this information to understand the platform's access control model.","parameters":[],"requestBody":null,"responseBody":{"description":"Array of user role definitions containing id, role_name, and description for each role","typeName":"ICommunityPlatformUserRoleArray"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a specific user role definition by its unique identifier. It returns the complete role metadata including the role_name and description for the requested role. This endpoint serves targeted access to role definitions for interface components that need to display information about a specific role.","path":"/communityPlatform/roles/{roleId}","method":"get","summary":"Retrieve a specific user role by ID","description":"This endpoint returns the complete metadata for a single user role identified by its UUID id.\n\nThe role definition comes from the community_platform_user_roles table and includes the role_name (e.g., 'guest', 'member', 'admin') and a detailed description of the permissions associated with that role. The system enforces that role names are unique and immutable, so this endpoint will always return the same definition for a given role_id.\n\nThis API is used by interface components that need to display role-specific information, such as when showing user permissions in an admin dashboard or explaining access restrictions to users.\n\nThe endpoint requires the roleId parameter which must be a valid UUID that exists in the community_platform_user_roles table. Invalid or non-existent role IDs will return a 404 response.\n\nSince this endpoint provides only public system metadata about roles, no authentication is required - even unauthenticated guests can access role information to understand the platform's permission structure.","parameters":[{"name":"roleId","description":"Unique identifier of the user role to retrieve, as stored in the community_platform_user_roles table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Single user role definition containing id, role_name, and description","typeName":"ICommunityPlatformUserRole"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves paginated guest account records with advanced filtering and sorting capabilities. It allows authorized users to search for and analyze guest sessions based on IP address, creation time, and other criteria. This is a read-only operation that helps with analytics and security monitoring.","path":"/communityPlatform/admin/guests","method":"patch","summary":"Search for guest sessions with filtering and pagination","description":"This endpoint provides advanced search and filtering capabilities for guest account records stored in the community_platform_guest table. Unlike simple GET operations, this PATCH method allows complex queries with multiple filter criteria, sorting options, and pagination parameters.\n\nGuest accounts represent unauthenticated users with read-only access to public content. Each record contains the guest's unique ID, creation timestamp, and source IP address. The system uses this data for analytics, spam detection, and security monitoring without storing persistent user state.\n\nThe request body accepts a search criteria object that can filter by IP address, time ranges, and other metadata. Results are returned in paginated format with 20 records per page and can be sorted by creation time, IP address, or other fields as needed.\n\nThis operation is restricted to administrative roles only, as guest session data contains sensitive networking information that could be misused. Only users with 'admin' privileges can access this endpoint to ensure proper security controls are maintained.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering guest sessions","typeName":"ICommunityPlatformGuestIRequest"},"responseBody":{"description":"Paginated list of guest sessions matching search criteria","typeName":"IPageICommunityPlatformGuest"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated list of member account records with advanced searching and filtering capabilities. It enables administrators to find and analyze user accounts based on email, display name, creation date, login activity, and other criteria. This is a read-only operation for platform analytics and moderation purposes.","path":"/communityPlatform/admin/members","method":"patch","summary":"Search for member accounts with filtering and pagination","description":"This endpoint provides comprehensive search and filtering capabilities for member account records in the community_platform_member table. Unlike basic retrieval operations, this PATCH method accepts complex search criteria in the request body to find members based on multiple conditions.\n\nMember accounts represent authenticated users with full participation rights including posting, commenting, and voting. Each record contains essential user information like email, display_name, created_at, last_login_at, and a soft delete flag (deleted_at) for account deactivation.\n\nThe request body accepts a search criteria object that can filter by email address (contains or exact match), display name (partial match), creation date ranges, last login time, and account status (active/inactive). Results are sorted by relevance, creation date, or login activity, and returned in paginated format with 20 records per page.\n\nThis operation is restricted to 'admin' roles only, as member account data contains sensitive personal information. The email, display_name, and login activity data must be protected and only accessible to authorized moderators for platform management and security audits.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for filtering member accounts","typeName":"ICommunityPlatformMemberIRequest"},"responseBody":{"description":"Paginated list of member accounts matching search criteria","typeName":"IPageICommunityPlatformMember"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a member's own profile information by their unique ID. The operation accesses the community_platform_member table, which stores authentication credentials and user preferences. This endpoint is designed exclusively for users to view their own profile information and must not be used for administrative data retrieval. The response includes non-sensitive user metadata including email, display name, and account creation date, ensuring user privacy while providing necessary information for account management.","path":"/communityPlatform/member/members/{memberId}","method":"get","summary":"Retrieve a specific member's profile information","description":"This operation retrieves detailed information about a specific member from the community_platform_member table. The endpoint allows authorized users to view essential profile data including the member's email address, optional display name, account creation timestamp, and last login information.\n\nThe operation is designed with privacy considerations in mind - sensitive information such as password hashes are excluded from the response. Only non-sensitive profile metadata is returned to ensure user privacy. This endpoint supports self-service profile access and is the authoritative source for user profile information.\n\nThis operation is critical for the platform's user management functionality. It enables users to verify their account information and is referenced in requirements for authentication and ownership verification, ensuring that content creation and modification permissions can be properly enforced based on authenticated user identity.","parameters":[{"name":"memberId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target member account. This UUID must correspond to an existing record in the community_platform_member table."}],"requestBody":null,"responseBody":{"description":"Detailed profile information of the requested member account","typeName":"ICommunityPlatformMember"},"authorizationType":null,"authorizationRole":"member","name":"at","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Member must be created before their profile can be accessed, as the memberId is generated during member account creation"}]},{"specification":"This operation retrieves a specific member's profile information by their unique ID. The operation accesses the community_platform_member table, which stores authentication credentials and user preferences for authenticated users. It is designed for users to view their own profile information or for system administrators to inspect member details when necessary. The response includes essential user metadata including email, display name, and account creation date, ensuring user privacy while providing necessary information for account management. This endpoint supports the platform's user management functionality and is referenced in requirements for authentication and ownership verification.","path":"/communityPlatform/admin/members/{memberId}","method":"get","summary":"Retrieve a specific member's profile information","description":"This operation retrieves detailed information about a specific member from the community_platform_member table. The endpoint allows authorized users to view essential profile data including the member's email address, optional display name, account creation timestamp, and last login information. This endpoint supports both self-service profile access and administrative inspection of member accounts.\n\nThe operation is designed with privacy considerations in mind - sensitive information such as password hashes are excluded from the response. Only non-sensitive profile metadata is returned to ensure user privacy. The response structure follows the standard API pattern of returning entity information when accessing specific resource endpoints.\n\nThis operation is critical for the platform's user management functionality. It enables users to verify their account information and allows administrators to audit member accounts when necessary. The operation directly supports the requirement for user authentication and ownership verification, ensuring that content creation and modification permissions can be properly enforced based on authenticated user identity.","parameters":[{"name":"memberId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the target member account. This UUID must correspond to an existing record in the community_platform_member table."}],"requestBody":null,"responseBody":{"description":"Detailed profile information of the requested member account","typeName":"ICommunityPlatformMember"},"authorizationRoles":["member","admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Member must be created before their profile can be accessed, as the memberId is generated during member account creation"}]},{"specification":"This operation searches for member accounts with advanced filtering capabilities and returns paginated results. It operates on the community_platform_member table and supports complex queries based on user roles, creation date ranges, and search patterns. This endpoint is specifically designed for administrative purposes to manage platform users with advanced filtering options. The operation provides an efficient way for super administrators to find and manage member accounts without exposing detailed personal information to regular users.","path":"/communityPlatform/admin/admin/members","method":"patch","summary":"Search and retrieve paginated member accounts with advanced filtering","description":"This operation provides an administrative interface to search and retrieve member accounts from the community_platform_member table using complex filtering criteria. Unlike simple retrieval operations, this endpoint accepts search parameters in the request body to enable advanced filtering based on creation dates, last login timestamps, and display name patterns.\n\nThe endpoint is designed exclusively for administrative use and returns paginated results with search results ordered by creation date descending. It supports comprehensive administrative workflows including bulk user management, account audits, and compliance investigations. The response includes summary information for each matching member account, excluding sensitive data like password hashes while providing essential metadata for administrative decision-making.\n\nThis endpoint implements the administrative functionality for user management, allowing authorized administrators to efficiently navigate large numbers of user accounts without exposing this capability to regular members. The search functionality directly supports the platform's requirement for system administrators to manage member accounts with appropriate permissions and oversight.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for member filtering","typeName":"ICommunityPlatformMember.IRequest"},"responseBody":{"description":"Paginated list of member summary information matching search criteria","typeName":"IPageICommunityPlatformMember.ISummary"},"authorizationRoles":["admin"],"name":"search","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Member accounts must be created before they can be searched or filtered in the admin interface, as search requires valid member records"}]},{"specification":"This operation retrieves detailed information about a specific administrative account by its ID. The endpoint accesses the community_platform_admin table, which represents privileged members with elevated permissions. This administrative endpoint provides administrators with the ability to inspect admin account details, including the underlying member account linked to the admin privileges. It supports administrative workflows for user management and access control auditing.","path":"/communityPlatform/admin/admin/members/{memberId}","method":"get","summary":"Retrieve specific admin account details by member ID","description":"This operation retrieves detailed information about a specific administrative account from the community_platform_admin table by referencing its associated member ID. The endpoint is designed for administrative users who need to inspect the privilege status of specific members, determine which users have elevated permissions, and understand the relationship between regular member accounts and admin privileges within the system.\n\nThe response structure includes vital information about both the admin record itself (creation timestamp) and its connection to the underlying member account through the member_id field. This operation supports administrative workflows such as privilege audits, access reviews, and user management tasks that require understanding of the admin/member relationship within the system.\n\nThis endpoint implements the administrative access control functionality of the platform, ensuring that only users with appropriate permissions can inspect admin account details. It directly supports the platform's requirement for maintaining separation of privileges and auditing administrative actions while maintaining data integrity through the proper referencing of the community_platform_member table.","parameters":[{"name":"memberId","in":"path","schema":{"type":"string","format":"uuid"},"description":"Unique identifier of the member account associated with the admin privileges. This UUID must correspond to an existing record in the community_platform_member table that has been granted admin privileges."}],"requestBody":null,"responseBody":{"description":"Detailed information about the specific admin account and its associated member","typeName":"ICommunityPlatformAdmin"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Member must be created before admin privileges can be assigned and accessed, since the admin record references a member_id that must already exist"}]},{"specification":"This operation searches and retrieves sub-communities using advanced filtering capabilities with pagination. The endpoint operates on the community_platform_communities table, supporting complex search queries based on name, category, and other community metadata. This allows users to discover new communities according to their interests and expand their participation in relevant topic areas. The system returns paginated results with a standard interface for community discovery.","path":"/communityPlatform/communities","method":"patch","summary":"Search and retrieve paginated sub-communities with advanced filtering","description":"This operation enables users to discover and explore sub-communities within the platform by performing advanced searches against the community_platform_communities table. Unlike simple listing operations, this endpoint accepts search parameters in the request body to enable complex filtering based on community name patterns, categories, and membership counts.\n\nThe endpoint provides comprehensive search across all communities, returning results that match the search criteria with pagination support for efficient data retrieval. Users can search for communities by name using partial matching, filter results by predefined categories, and discover popular communities based on member counts. The response provides summary information about each matching community including name, category, description, member count, and creation date.\n\nAs a PATCH operation, this endpoint properly handles situations where complex search parameters would exceed URL length constraints. This design choice ensures a clean, scalable interface that can support future enhancements to search capabilities without requiring changes to the endpoint structure. The operation directly supports the platform's requirement for users to discover and join new communities based on their interests and is a critical component of the Explore functionality.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for community filtering","typeName":"ICommunityPlatformCommunity.IRequest"},"responseBody":{"description":"Paginated list of community summary information matching search criteria","typeName":"IPageICommunityPlatformCommunitySummary"},"authorizationType":null,"authorizationRole":null,"name":"search","prerequisites":[]},{"specification":"This operation creates a new community on the platform. It validates the community name for uniqueness and format compliance (alphanumeric with hyphens and underscores only), and stores metadata including category, description, logo, banner, and rules. The system automatically generates a unique identifier for the new community and sets the creator's member ID. This operation supports the Create Community feature in the user journey, ensuring owners can establish new topic-based communities. Schema references: community_platform_communities, community_platform_user_communities, and community_platform_search_communities. The community name is immutable after creation, and membership is established automatically for the creator.","path":"/communityPlatform/member/communities","method":"post","summary":"Create a new community with specified metadata","description":"This operation allows an authenticated member to create a new sub-community with a unique name, category, and optional metadata including description, rules, logo, and banner. The system validates the community name against format constraints: it must be 5-64 characters long, contain only alphanumeric characters, hyphens (-), and underscores (_), and must be globally unique across the entire platform.\n\nSecurity considerations require the user to be authenticated with a valid member role. Guest users are blocked from this operation, and the system will return a 401 Unauthorized response. The operation enforces ownership by automatically linking the creator's member ID to the new community. Attempts to create a community with an existing name will return a 409 Conflict error with the message \"This name is already in use.\".\n\nThe community structure is based on the community_platform_communities table in the Prisma schema, with all fields (name, category, description, rules, logo_url, banner_url) being persisted as defined. The system automatically initializes member_count to 1 (the creator) and sets the created_at timestamp. Upon successful creation, the system generates a community_platform_search_communities record for full-text search indexing.\n\nThe user is automatically granted membership to the new community by creating a record in the community_platform_user_communities table with created_at and last_interaction_at set to the current timestamp and deleted_at set to null. This ensures the new community immediately appears in the user's \"Recent Communities\" list and participates in their Home feed.\n\nThe operation ignores any values submitted for system-managed fields such as id, created_at, updated_at, and member_count since these are handled internally by the system.","parameters":[],"requestBody":{"description":"Request payload containing the new community's metadata including name, category, description, rules, logo, and banner URL","typeName":"ICommunityPlatformCommunity.ICreate"},"responseBody":{"description":"Response body with the created community's full details including auto-generated fields like id, created_at, and member_count","typeName":"ICommunityPlatformCommunity"},"authorizationType":null,"authorizationRole":"member","name":"create","prerequisites":[]},{"specification":"This operation retrieves a specified community's details by its unique name. It returns comprehensive metadata including description, rules, logo, banner, and the current member count (formatted as 1k, 10k, etc.). The operation supports both authenticated members and guests, allowing public access to community information. Schema references: community_platform_communities and community_platform_community_stats.","path":"/communityPlatform/communities/{communityName}","method":"get","summary":"Retrieve details of a specific community by its name","description":"This operation retrieves comprehensive metadata for a specific community identified by its unique name (e.g., \"tech\" or \"science\"). The community must exist and must not be deleted, otherwise a 404 Not Found error is returned. This operation is publicly accessible to both authenticated members and unauthenticated guests.\n\nThe response contains all community metadata from the community_platform_communities table including: name, category, description, rules (as a string with line breaks), logo_url, banner_url, and member_count. The member_count field is sourced from the community_platform_community_stats denormalized table, ensuring efficient display of large numbers formatted with \"k\" and \"m\" abbreviations (e.g., 1,000 → \"1k\").\n\nThe system does not include membership status in this response, as membership information is tracked separately in the community_platform_user_communities table and should be determined via a separate operation when needed. The response only provides static public information about the community that any user can view.\n\nThe community name is immutable after creation, so the path parameter serves as the primary identifier and must exactly match an existing community name in the system. This design supports direct linking and sharing of community pages.","parameters":[{"name":"communityName","description":"Unique alphanumeric identifier of the target community (e.g., \"ai\" or \"health\")","schema":{"type":"string","format":"string","minLength":5,"maxLength":64,"pattern":"^[a-zA-Z0-9_-]+$"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested community including name, category, metadata, and member count","typeName":"ICommunityPlatformCommunity"},"authorizationType":null,"authorizationRole":null,"name":"at","prerequisites":[]},{"specification":"This operation updates the editable metadata of a specific community: description, rules, logo, and banner. Only the original creator of the community can perform this update. The community name is immutable and cannot be changed through this operation. Schema references: community_platform_communities, community_platform_search_communities.","path":"/communityPlatform/member/communities/{communityName}","method":"put","summary":"Update editable metadata of a community (description, rules, logo, banner)","description":"This operation allows the creator of a specific community to update its editable metadata fields: description, rules, logo_url, and banner_url. Only the original creator (the member who created the community) is permitted to make these changes - other members or admins cannot modify community metadata unless granted special administrative permissions (which are not implemented in this system).\n\nThe operation requires a valid authentication token belonging to the community creator. If the requesting member is not the original creator, the system returns a 403 Forbidden response with the message \"You can only edit communities you created.\". The community name cannot be modified and any attempt to include it in the request body will be ignored.\n\nThe update triggers a refresh of the community_platform_search_communities materialized view to ensure full-text search functionality remains current. The system allows partial updates - if a field is omitted from the request body, its value remains unchanged.\n\nThe description field can be updated to up to 500 characters, rules can be updated to up to 20 lines (with only the first 5 being displayed in UI), and logo and banner URLs can be updated to new image paths. The system validates file extensions and URL lengths but does not validate image content or existence on the client side.\n\nBy design, only the creator can make these changes to ensure stability and prevent community hijacking. Admins do not have override permissions for this operation to maintain clear ownership boundaries.","parameters":[{"name":"communityName","description":"Unique alphanumeric identifier of the target community to be updated","schema":{"type":"string","format":"string","minLength":5,"maxLength":64,"pattern":"^[a-zA-Z0-9_-]+$"}}],"requestBody":{"description":"Partial update payload containing optional fields: description, rules, logo_url, and/or banner_url","typeName":"ICommunityPlatformCommunity.IUpdate"},"responseBody":{"description":"Updated community object with modified fields and updated_at timestamp","typeName":"ICommunityPlatformCommunity"},"authorizationType":null,"authorizationRole":"member","name":"update","prerequisites":[]},{"specification":"This operation permanently deletes a community and all its associated content (posts, comments, votes). Only the original creator or an admin can initiate this operation. The deletion is cascaded and irreversible. Schema references: community_platform_communities, community_platform_posts, community_platform_comments, community_platform_search_communities, community_platform_user_communities, and all related analytics tables.","path":"/communityPlatform/member/communities/{communityName}","method":"delete","summary":"Permanently delete a community and all its content","description":"This operation permanently deletes a community and all its associated data, including all posts, comments, votes, and search indexes associated with the community. This is a hard delete operation with no soft delete mechanism, as the system relies on the community_platform_communities table without a deleted_at column.\n\nOnly the original creator of the community or an admin can execute this operation. The system checks the requesting member's role against community_architect permissions. If the requesting user is neither the creator nor an admin, a 403 Forbidden response is returned with the message \"You can only delete communities you created.\".\n\nThe deletion is cascaded through the database: all community_platform_posts entries linked to this community are deleted, followed by all associated community_platform_comments, community_platform_post_votes, and community_platform_comment_votes. The community_platform_search_communities, community_platform_search_posts, and community_platform_search_comments materialized views are automatically refreshed by system triggers.\n\nThe relationship records in community_platform_user_communities are also deleted, which removes the community from all users' \"Recent Communities\" lists. The community_platform_community_stats record is removed, and membership counts for all other communities remain unaffected.\n\nThis is a destructive operation with no undo capability. The system should confirm the action in the UI with \"Are you sure you want to delete this community? This cannot be undone.\" before sending the API request. After successful deletion, a 204 No Content response is returned.","parameters":[{"name":"communityName","description":"Unique alphanumeric identifier of the community to be permanently deleted","schema":{"type":"string","format":"string","minLength":5,"maxLength":64,"pattern":"^[a-zA-Z0-9_-]+$"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before it can be deleted"}]},{"specification":"This operation retrieves a paginated list of users who have joined a specific community. It operates on the community_platform_user_communities table and filters by community_name parameter. The results include user information and the timestamp of their last interaction with the community. This supports the 'Recent Communities' list functionality and allows for community member management.","path":"/communityPlatform/communities/{communityName}/members","method":"patch","summary":"Search and retrieve members of a specific community","description":"Retrieve a filtered and paginated list of users who have joined a specific community. This operation provides advanced search capabilities for finding community members based on various criteria including username, join date, and last interaction time.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Members can sort by join date, last interaction, or username in ascending or descending order. This endpoint is crucial for the 'Recent Communities' list functionality, where the system displays the 5 most recently active communities based on user interaction timestamps.\n\nSecurity considerations include rate limiting for search operations and appropriate filtering of member information based on the requesting user's authorization level. Only authenticated users can access member lists for communities they have permission to view, while community creators and admins can access complete member information. Unauthorized users attempting to access this endpoint will receive a 401 Unauthorized response.\n\nThis operation integrates with the community_platform_user_communities table as defined in the Prisma schema, incorporating all available membership fields and relationships. The response includes user summary information optimized for list displays, with options to include additional details based on authorization level.","parameters":[{"name":"communityName","description":"Unique alphanumeric identifier of the target community. Must be 5 to 64 characters and may contain hyphens (-) and underscores (_). This corresponds to the name field in the community_platform_communities table.","schema":{"type":"string"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering community members","typeName":"ICommunityPlatformCommunityPlatformUserCommunityIRequest"},"responseBody":{"description":"Paginated list of community member summary information matching search criteria","typeName":"IPageICommunityPlatformCommunityPlatformUserCommunityISummary"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before its members can be searched"}]},{"specification":"This operation creates a new membership record when a user joins a community. It operates on the community_platform_user_communities table and adds a record with the current user as the community_platform_user_id and the target community as the community_platform_community_id. The request includes timestamps for creation and last interaction. This supports the 'Join' functionality in the UI, which updates the Recent Communities list and enables the user to see posts from the community in their Home feed.","path":"/communityPlatform/member/communities/{communityName}/members","method":"post","summary":"Join a specific community and create membership record","description":"Establish a new membership relationship between an authenticated user and a specified community. This operation creates a record in the community_platform_user_communities table with the joining user's ID and the target community's ID, along with timestamps for creation and the immediate last interaction.\n\nThe system enforces several validation rules: the community must exist and have not been deleted; the user must be authenticated; the user must not have an active membership (deleted_at is null) in the community already; the community name must be in the correct alphanumeric format. When these conditions are satisfied, the system immediately updates the member_count in the community_platform_communities table and in the community_platform_community_stats denormalized table.\n\nSecurity considerations include ensuring that only authenticated users can join communities and that users cannot join their own communities if they're not the creator (which is a separate constraint). This operation updates the 'Recent Communities' list in the user's left sidebar with the newly joined community, sorted by the last_interaction_at timestamp.\n\nThis operation integrates with the community_platform_user_communities table as defined in the Prisma schema, incorporating the user_id, community_id, and interaction timestamps. The response includes the validated membership record in a successful response, with appropriate error handling for invalid requests.","parameters":[{"name":"communityName","description":"Unique alphanumeric identifier of the target community to join. Must be 5 to 64 characters and may contain hyphens (-) and underscores (_). This corresponds to the name field in the community_platform_communities table.","schema":{"type":"string"}}],"requestBody":null,"responseBody":{"description":"Membership record created after joining community","typeName":"ICommunityPlatformCommunityPlatformUserCommunity"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a user can join it"}]},{"specification":"This operation removes a user's membership from a community when they choose to leave. It operates on the community_platform_user_communities table and updates the deleted_at field to mark the membership as inactive. The record is not physically deleted, preserving audit trail for analytics and potential rejoining. This supports the 'Leave' functionality in the UI, which removes community posts from the user's Home feed and updates the Recent Communities list.","path":"/communityPlatform/member/communities/{communityName}/members","method":"delete","summary":"Leave a specific community and deactivate membership","description":"Deactivate a user's membership in a specific community by setting the deleted_at timestamp in the community_platform_user_communities table. This soft-delete pattern preserves audit history while removing the user's view of the community's content from their Home feed.\n\nThe system enforces several validation rules: the community must exist; the user must be authenticated and have a current active membership (deleted_at is null); the user must not be the community creator if the center has restrictions (though this is handled by business logic). When successful, the operation decrements the member_count in both the community_platform_communities table and the community_platform_community_stats denormalized table.\n\nSecurity considerations include ensuring that only the owning user or an admin can leave a community. Other users attempting to leave a community they're not a member of will receive a 404 Not Found response. This operation updates the 'Recent Communities' list in the user's left sidebar by removing the community if it was among the 5 most recently active.\n\nThis operation integrates with the community_platform_user_communities table as defined in the Prisma schema, maintaining the original record with the new deleted_at timestamp. The response is a 204 No Content upon success, or appropriate error responses for failures.","parameters":[{"name":"communityName","description":"Unique alphanumeric identifier of the target community to leave. Must be 5 to 64 characters and may contain hyphens (-) and underscores (_). This corresponds to the name field in the community_platform_communities table.","schema":{"type":"string"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a user can leave it"}]},{"specification":"This operation searches for posts with advanced filtering, searching, and sorting capabilities. It operates on the community_platform_posts table and supports complex queries to find posts based on various criteria including title, body, author, community, date range, and score. The system leverages denormalized search tables for performance optimization.","path":"/communityPlatform/posts","method":"patch","summary":"Search and retrieve posts with advanced filters and pagination","description":"Retrieve a filtered and paginated list of posts from the platform with advanced search capabilities. This operation provides comprehensive filtering by title, body content, author display name, community name, creation date range, and score (upvotes minus downvotes).\n\nThe operation supports pagination with configurable page sizes (default 20 per page) and sorting options including Newest (by creation time descending, then ID descending) and Top (by score descending, then creation time descending, then ID descending). This endpoint is crucial for the search functionality on the /s page and serves as the backend for the Home feed's 'Load more' functionality.\n\nSecurity considerations include appropriate filtering of posts based on the requesting user's authorization level. Guest users can search posts from all communities, while authenticated users can also filter by their joined communities. Posts marked as deleted (deleted_at not null) are excluded from results. Rate limiting applies to prevent abuse of search capabilities.\n\nThis operation integrates with the community_platform_posts table as defined in the Prisma schema, incorporating all available post fields and relationships. It also references the community_platform_search_posts materialized view for optimized full-text search performance. The response includes post summary information optimized for list displays, with options to include additional details based on authorization level.","parameters":[],"requestBody":{"description":"Search criteria, filters, and pagination parameters for finding posts","typeName":"ICommunityPlatformCommunityPlatformPostIRequest"},"responseBody":{"description":"Paginated list of post summary information matching search criteria","typeName":"IPageICommunityPlatformCommunityPlatformPostISummary"},"authorizationRoles":[],"name":"search","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before posts can be searched within it, as community_id in search query references a valid community record."},{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"At least one post must exist in a community for search results to be returned, as the operation retrieves posts from the community_platform_search_posts materialized view which depends on existing post records."}]},{"specification":"This operation retrieves a specific post by its unique identifier. It returns the complete post details including title, body, author information, and metadata. This endpoint is used to display a single post's content on the post detail page (/c/[name]/[postID]). The operation validates the post exists and is not deleted, and returns structured data for the UI to render the post and its associated comments.","path":"/communityPlatform/posts/{postId}","method":"get","summary":"Retrieve a specific post by ID","description":"This operation retrieves a specific post by its unique identifier from the community platform. When requested, the system validates the existence of the post in the database and ensures the post is not marked as deleted (deleted_at is null). The response includes all essential post data: title, body, author display name (with fallback to 'Anonymous'), creation timestamp, and the ID of the associated community.\n\nSecurity considerations involve verifying the post's existence and accessibility without requiring authentication, as posts are publicly viewable. However, the system still enforces content integrity by only serving active (non-deleted) posts. This endpoint supports viewing posts by guests and authenticated members alike.\n\nThe operation directly references the community_platform_posts table in the Prisma schema, which stores the fundamental post data including title, body, author_id (linked to member account), and deleted_at for soft deletion. The author_display_name field is used to show custom names or default to 'Anonymous' when empty.\n\nIf the requested postId does not exist in the database, or if the post has been deleted (deleted_at is not null), the system returns a 404 Not Found error. The response does not include voting statistics or comment counts, as these are monitored in separate stats tables. The endpoint is designed to be used when a user navigates to a post detail page, and can be called directly as the primary source for rendering individual posts.\n\nRelated operations include retrieving a list of posts for the home feed (index) and searching for posts by content (search). This endpoint is the detail view counterpart to the list and search operations.","parameters":[{"name":"postId","description":"Unique identifier of the target post to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information of the requested post including title, body, author details, and metadata","typeName":"ICommunityPlatformPost"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The community referenced by the post must exist to ensure the post's community_id is valid and the post is accessible."},{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must be created before it can be retrieved by its ID, as the operation reads from the community_platform_posts table which requires a previously created post record."}]},{"specification":"This operation creates a new post on the platform under a specified community. The post requires a title (5-120 characters), body (10-10,000 characters), and community association. Attempting to create a post without authentication returns a 401 error. This operation is accessed via the post composer on the /submit page or community-specific submission pages.","path":"/communityPlatform/member/posts","method":"post","summary":"Create a new post","description":"This operation creates a new community post on the platform. The client provides a JSON payload containing the community ID, post title, body content, and optional author display name. The title must be between 5 and 120 characters, and the body must be between 10 and 10,000 characters, containing only plain text. The system requires the user to be logged in as a member; unauthenticated requests receive a 401 Unauthorized response.\n\nThe operation references the community_platform_posts table in the Prisma schema, where the post is persisted with the provided title, body, author_id (linked to the authenticated member), and creation timestamp. The author_display_name is stored as provided or set to null if omitted, with 'Anonymous' displayed in UI as fallback. The system strips any HTML, scripts, or executable content and only preserves plain text with line breaks.\n\nValidation occurs both on the client and server. Server-side validation ensures the target community exists, the title and body meet length constraints, and the user has permission to post in that community (no explicit permission check is needed beyond being authenticated). If validation fails, the system returns a 400 Bad Request with a specific message for each error (e.g., 'Title must be at least 5 characters' or 'Post content cannot exceed 10,000 characters').\n\nUpon successful creation, the system returns a 201 Created status with the full post object in the response body, including the generated unique ID. The response triggers immediate UI updates: the post appears in the community's feed and is added to the Global Latest sidebar. The post's author_id is matched against the authenticated user's ID, enforcing content ownership rules that allow only the author to edit or delete the post later.","parameters":[],"requestBody":{"description":"Data required to create a new post, including community, title, body, and optional display name","typeName":"ICommunityPlatformPost.ICreate"},"responseBody":{"description":"The created post object with generated ID and timestamp","typeName":"ICommunityPlatformPost"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"A community must exist before a post can be created within it, as the community_id in the request body must reference an existing community record in the community_platform_communities table."}]},{"specification":"This operation updates an existing post's title and body. Only the author of the post can make changes. The update must preserve the original creation timestamp. This endpoint is accessible from the post edit interface and validates that the user making the request matches the post's original author.","path":"/communityPlatform/member/posts/{postId}","method":"put","summary":"Update an existing post","description":"This operation allows the authenticated author of a post to update its title and content. The request must include the post ID in the path and a JSON body with the new title (5-120 characters) and body (10-10,000 characters). The update must be made by the original author of the post; attempts by other users result in a 403 Forbidden response.\n\nThe operation references the community_platform_posts table in the Prisma schema, where only the title, body, and updated_at fields are modified. The created_at field remains unchanged as per the requirement that post creation times are immutable. The author_display_name field is not updated via this operation; if the user wishes to change their display name, they must use the profile settings, and the change will automatically reflect on future post displays.\n\nServer-side validation checks the author's ownership against the authenticated user's ID by comparing against the author_id field in the post record. It also validates the five-and-one-hundred-twenty character limit for title and one-thousand-to-ten-thousand character limit for body, ensuring compliance with business rules before update. If a post has been soft-deleted (deleted_at is not null), the update is denied with a 404 response.\n\nOn successful update, the operation returns a 200 OK status with the updated post object. The system uses optimistic UI updates: the post in the user's feed displays the changes immediately before the server confirms. If the server update fails, the UI rolls back to the original content and displays an error: 'A temporary error occurred. Please try again in a moment.'","parameters":[{"name":"postId","description":"Unique identifier of the post to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data for the post including new title and body content","typeName":"ICommunityPlatformPost.IUpdate"},"responseBody":{"description":"The updated post object with modified title and body","typeName":"ICommunityPlatformPost"},"authorizationRoles":["member"],"name":"update","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"The community referenced by the post must exist to validate the post's community_id and ensure the post is associated with a valid community."},{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"The post must be created before it can be updated, as the operation modifies an existing post record in the community_platform_posts table which requires prior creation."}]},{"specification":"This operation permanently deletes a post. Only the post's author or an admin can initiate deletion. This removes the post from all feeds and cascades to its associated comments and votes. The hard delete is implemented because the post_delete_column is not defined in the Prisma schema, indicating no soft delete is configured.","path":"/communityPlatform/member/posts/{postId}","method":"delete","summary":"Delete a post permanently","description":"This operation permanently deletes a post from the platform. The user must be either the original author of the post or an administrator to perform the deletion. The request requires the post ID in the path and no request body.\n\nPer the Prisma schema, the community_platform_posts table does not contain a soft-deletion column (like deleted_at) that would indicate soft-delete functionality is implemented. Instead, the system performs a hard delete, meaning the post record and all associated data (including comments, votes, and search entries) are removed from the database immediately and cannot be restored. This is not a soft delete but a permanent removal.\n\nThe operation validates that the requesting user either matches the post’s author_id or holds admin privileges. If neither condition is met, a 403 Forbidden response is returned. If the post does not exist, a 404 Not Found error is returned. The system must ensure that when a post is deleted, all related records in community_platform_comments, community_platform_post_votes, and community_platform_search_posts are also removed via cascading deletions in the database schemas.\n\nAfter successful deletion, the system returns a 204 No Content response. The UI updates optimistically by removing the post from the feed immediately, with server replication confirming the removal. If deletion fails on the server side, the UI restores the post and displays: 'A temporary error occurred. Please try again in a moment.'","parameters":[{"name":"postId","description":"Unique identifier of the post to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must exist and be active (deleted_at is null) for deletion to proceed"}]},{"specification":"This operation retrieves a paginated list of comments for a specific post, supporting sorting by Newest and Top criteria. It operates on the community_platform_comments table and filters comments by the parent post ID. The operation supports pagination with 20 items per page and returns nested replies in hierarchy order. This is a read-only operation for accessing discussion threads.","path":"/communityPlatform/posts/{postId}/comments","method":"patch","summary":"Retrieve paginated comments for a post with sorting","description":"Retrieve a paginated list of comments for a specific post, ordered by creation time or score. This operation supports two sorting modes: Newest (by created_at descending) and Top (by score descending). The comments are returned in a hierarchical structure that preserves reply relationships, with each comment containing its author, content, score, and reply count.\n\nWhen the user selects \"Newest\" sort, comments are ordered by creation timestamp descending, with ties broken by comment ID descending. When \"Top\" sort is selected, comments are ordered by their calculated score (upvotes minus downvotes) in descending order, with ties broken by creation timestamp and then comment ID. The operation supports loading additional pages with the \"[Load more]\" button.\n\nThis operation queries the community_platform_comments table and uses the community_platform_comment_stats table to obtain accurate comment scores. It applies soft delete filtering to exclude comments where deleted_at is not null, ensuring only active comments are returned. The user's own vote state is included in the response to support optimistic UI updates. The response includes the total comment count for the post, which is derived from the community_platform_post_stats table.\n\nThis endpoint is used on post detail pages to display threads and on global search results under the \"Comments\" tab.","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Pagination, sorting and filtering parameters for comment retrieval","typeName":"ICommunityPlatformComment.IRequest"},"responseBody":{"description":"Paginated list of comment summaries with vote state and reply count","typeName":"IPageICommunityPlatformComment.ISparse"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must exist and be active (deleted_at is null) for comment operations to proceed"}]},{"specification":"This operation retrieves a single comment by its unique identifier, including its full thread context if requested. It operates on the community_platform_comments table and is used to display detail views of individual comments.","path":"/communityPlatform/posts/{postId}/comments/{commentId}","method":"get","summary":"Retrieve a specific comment by ID","description":"Retrieve a single comment by its unique identifier. This operation returns the complete comment object including its content, author information, creation timestamp, score, and parent-child relationship metadata.\n\nThe response includes the full comment hierarchy if requested, showing the comment's parent and all its direct replies, enabling deep-thread navigation. All comments in the hierarchy are filtered for soft deletes (deleted_at is null). The author's display name is included, defaulted to \"Anonymous\" if not set.\n\nThis operation is used when a user clicks on a comment in a search result or when deep-linking to a specific comment. It provides the data needed for comment detail views and is accessed directly via URL navigation.\n\nThis endpoint is frequently called when users navigate from search results to view a comment in context, or when applications deep-link directly to comments.","parameters":[{"name":"postId","description":"Unique identifier of the parent post containing the comment","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about a single comment including its score and author","typeName":"ICommunityPlatformComment.ISparse"},"authorizationRoles":["member"],"name":"at","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must exist and be active (deleted_at is null) for comment operations to proceed"}]},{"specification":"This operation creates a new comment on a specified post. It operates on the community_platform_comments table and requires user authentication. The comment can be a top-level or nested reply, with the parent_id parameter defining its hierarchy.","path":"/communityPlatform/member/posts/{postId}/comments","method":"post","summary":"Create a new comment on a post","description":"Create a new comment on a specified post. The comment can be a top-level comment or a reply to an existing comment. The request body must include the content (2-2,000 characters), and optionally the parent_id for nested replies.\n\nThe system validates that the user is authenticated (member role) and that the comment content meets length requirements (2-2,000 characters). It also validates that the user is not trying to create a comment on a post that has been soft-deleted.\n\nAfter successful creation, the operation updates the parent post's comment count in the community_platform_post_stats table and adds the comment to the community_platform_search_comments materialized view. For nested replies, it increments the reply count on the parent comment using the community_platform_comment_stats table.\n\nThe response returns the full created comment object, including the generated ID, timestamps, and calculated score, allowing the client to update the UI optimistically.\n\nThis endpoint is accessed when users submit comments on post detail pages and when replying to existing comments within threads.","parameters":[{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Content and parent reference for new comment creation","typeName":"ICommunityPlatformComment.ICreate"},"responseBody":{"description":"The created comment object with server-generated values","typeName":"ICommunityPlatformComment.ISparse"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must exist and be active (deleted_at is null) for comment operations to proceed"}]},{"specification":"This operation updates an existing comment's content. It operates on the community_platform_comments table and requires ownership verification: only the comment's author can modify it. This is an idempotent operation with optimistic update handling.","path":"/communityPlatform/member/posts/{postId}/comments/{commentId}","method":"put","summary":"Update an existing comment","description":"Update the content of an existing comment. This operation is only permitted if the authenticated user is the original author of the comment. The request body must contain the new content, which must be between 2 and 2,000 characters.\n\nThe server validates comment ownership by verifying the user's ID matches the comment's author_id. It also checks that the comment has not been soft-deleted (deleted_at is null) and validates the new content length constraints.\n\nUpon successful update, the operation sets the updated_at timestamp to the current time and updates the community_platform_search_comments materialized view with the new content. The comment's score and reply count remain unchanged.\n\nThis endpoint supports optimized frontend updates: the frontend applies changes immediately (optimistic update) and only reverts if the server returns an error, with a \"A temporary error occurred. Please try again in a moment.\" message.\n\nThis operation is used exclusively by comment authors to correct typos, update information, or improve clarity after initial submission.","parameters":[{"name":"postId","description":"Unique identifier of the post containing the comment","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New content for the comment (2-2,000 characters)","typeName":"ICommunityPlatformComment.IUpdate"},"responseBody":{"description":"The updated comment object with the new content and updated_at timestamp","typeName":"ICommunityPlatformComment.ISparse"},"authorizationRoles":["member"],"name":"update","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before comments can be updated"}]},{"specification":"This operation soft deletes a specific comment by setting the deleted_at timestamp to the current time. The comment record is preserved for audit purposes but excluded from normal queries. This operation targets the community_platform_comments table, removing the comment from all user-facing views while maintaining a complete audit trail of user interactions. This is a soft delete operation since the Prisma schema includes a deleted_at field for comments. The deletion cascades to remove the comment from all related views and search indexes, but the record remains persistent for compliance purposes.","path":"/communityPlatform/member/posts/{postId}/comments/{commentId}","method":"delete","summary":"Soft delete a specific comment","description":"This operation soft deletes a specific comment by setting the deleted_at timestamp to the current time. The comment record is preserved for audit purposes but excluded from normal queries. This operation targets the community_platform_comments table, removing the comment from all user-facing views while maintaining a complete audit trail of user interactions. This is a soft delete operation since the Prisma schema includes a deleted_at field for comments. The deletion cascades to remove the comment from all related views and search indexes, but the record remains persistent for compliance purposes.\n\nSecurity considerations include strict ownership validation: only the authenticated user who created the comment or an admin can execute this operation. The system verifies the comment's author_id matches the authenticated user's ID before proceeding with deletion. This ensures compliance with the business rule that users can only delete their own content. Admins are granted override capabilities through role-based authorization.\n\nThis operation is directly linked to the community_platform_comments table as defined in the Prisma schema, which includes fields for id, post_id, author_id, parent_id, content, created_at, updated_at, and deleted_at. The deletion marks the record with the current timestamp, and any associated records in community_platform_comment_votes and community_platform_comment_stats are logically removed by filter-based queries, not physical deletion. The record remains in the database but is excluded from all endpoints exposed to users.\n\nThis operation should not be confused with hard delete behaviors. Since the comment table supports soft delete via the deleted_at column (unlike other tables where such columns are absent), this represents a soft delete pattern that maintains data integrity and audit compliance. The presence of the deleted_at field in the schema requires this behavior, and attempts to implement hard delete would violate the system's data retention policies.\n\nRelated API operations include PATCH /posts/{postId}/comments to retrieve comment threads and POST /posts/{postId}/comments to create new comments. This delete operation should be preceded by a check to verify the user owns the comment or has appropriate privileges, and should be confirmed by the user to prevent accidental deletion. After deletion, this comment will no longer appear in any feed, search results, or thread hierarchy.","parameters":[{"name":"postId","description":"Unique identifier of the post containing the comment to be deleted","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the specific comment to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before comments can be deleted"}]},{"specification":"This operation retrieves the current vote state for a post by executing a search on the community_platform_post_votes table. It requires the user to send a PATCH request with a requestBody containing submission parameters that identify the post ID and optionally, filtering criteria such as user identification. The operation returns the user's current voting state (upvote, downvote, or none) in the response body. This rather than GET, as it handles complex state retrieval with optional parameters. This operation demonstrates that collection searches with dynamic parameters must use PATCH method rather than GET, even when no data modification occurs.","path":"/communityPlatform/member/posts/{postId}/votes","method":"patch","summary":"Retrieve the current vote state for a post","description":"This operation retrieves the current vote state for a post by executing a search on the community_platform_post_votes table. It requires the user to send a PATCH request with a requestBody containing submission parameters that identify the post ID and optionally, filtering criteria such as user identification. The operation returns the user's current voting state (upvote, downvote, or none) in the response body. This rather than GET, as it handles complex state retrieval with dynamic parameters. This operation demonstrates that collection searches with dynamic parameters must use PATCH method rather than GET, even when no data modification occurs.\n\nThe operation targets the community_platform_post_votes table as defined in the Prisma schema, which contains the user's vote state (upvote or downvote) for each post. Since the voting system does not store a 'none' state explicitly (absence of record implies 'none'), this endpoint must determine whether the current user has voted on the specific post by checking for the existence of a record where community_platform_post_id matches the postId and community_platform_user_id matches the authenticated user's ID.\n\nSecurity considerations include ensuring that only authenticated users can check their own vote state. Unauthorized users cannot query vote states of other users. The system verifies the user's authentication token before executing the search. This follows the business rule that users can only access their own voting data.\n\nThis operation is directly linked to the community_platform_post_votes table as defined in the Prisma schema, which includes fields for id, community_platform_post_id, community_platform_user_id, created_at, updated_at, and vote_state. The operation searches for records matching the post ID and the authenticated user ID. If a record is found, the vote_state field indicates the current state; if no record exists, the response indicates 'none'.\n\nThis operation supports pagination and search parameters to handle complex filtering scenarios, though for this use case, the primary parameter is the post identification. The response body structure is defined to return the user's vote state for this specific post. This differs from the POST method on the same endpoint, which is used to create or update votes, whereas this PATCH method is solely for querying state.\n\nRelated API operations include POST /posts/{postId}/votes to cast a vote and DELETE /posts/{postId}/votes to remove a vote. This operation is critical for implementing the optimistic UI update pattern, where the UI must know the current vote state before allowing a user to toggle their vote. The functionality enables a seamless user experience where clicking a vote button shows the correct current state immediately without needing to refresh the page.","parameters":[{"name":"postId","description":"Unique identifier of the post for which to retrieve the vote state","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Optional parameters for filtering the vote state result. The only required parameter is the user authentication context, which is provided through the API token. Additional parameters could include pagination or search filters if the system were designed to return multiple vote states, but in this implementation, the vote state is specifically for one post and one user.","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"The current vote state for the user on this post. Returns an object with a single field indicating the vote state: 'upvote', 'downvote', or 'none' (if the user has not voted). This structure follows the business rule that users can have only one vote state per post, which is maintained by the unique constraint on (post_id, user_id) in the community_platform_post_votes table.","typeName":"ICommunityPlatformPost.IVoteState"},"authorizationRoles":["member"],"name":"index","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before its vote state can be retrieved"}]},{"specification":"Creates or updates a user's vote state for a specific post. It interacts with the community_platform_post_votes table and handles the business logic of vote state transitions according to the required model: None → Upvote → Downvote → None. If the user already has a vote on this post, the operation toggles the state. The transaction is implemented with optimistic UI updates, where the interface immediately reflects the new state before server confirmation. This single endpoint handles all possible state changes, avoiding redundancy and complexity. The operation is designed to be idempotent, allowing users to rapidly toggle between vote states without race conditions.","path":"/communityPlatform/member/posts/{postId}/votes","method":"post","summary":"Set or toggle a user's vote state on a specific post","description":"Creates or updates a user's vote state for a specific post. It interacts with the community_platform_post_votes table and handles the business logic of vote state transitions according to the required model: None → Upvote → Downvote → None. If the user already has a vote on this post, the operation toggles the state. The transaction is implemented with optimistic UI updates, where the interface immediately reflects the new state before server confirmation. This single endpoint handles all possible state changes, avoiding redundancy and complexity. The operation is designed to be idempotent, allowing users to rapidly toggle between vote states without race conditions.\n\nThe operation targets the community_platform_post_votes table as defined in the Prisma schema, which enforces a unique constraint on the combination of community_platform_post_id and community_platform_user_id to ensure each user can have only one vote per post. This table contains fields for id, community_platform_post_id, community_platform_user_id, created_at, updated_at, and vote_state. The unique constraint automatically handles the complexity of toggling between vote states as the application logic must first determine the existing state and then either update or create a new record accordingly.\n\nSecurity considerations include strict ownership validation to prevent users from voting on their own content. The system checks the author_id of the post against the authenticated user's ID (contained in the JWT) before allowing any vote. If a user attempts to vote on their own post, the operation will fail with a 403 response, and the display will show 'You can't vote on your own posts/comments.' as specified in the business requirements. This protection is enforced at both the API level and database level through this operational check.\n\nThis operation supports the core functionality of the post voting system, where users can upvote or downvote content to influence its visibility in the \"Top\" sort order. The vote state transitions follow these rules exactly:\n1. None → Upvote (when Upvote button clicked and no previous vote)\n2. None → Downvote (when Downvote button clicked and no previous vote)\n3. Upvote → None (when Upvote button clicked again)\n4. Downvote → None (when Downvote button clicked again)\n5. Upvote → Downvote (when Downvote button clicked while upvoted)\n6. Downvote → Upvote (when Upvote button clicked while downvoted)\n\nThis operation is directly linked to the community_platform_post_votes table and related tables like community_platform_post_stats, which maintains a denormalized count of the overall post score. When a vote is created or updated, this statistic is updated atomically to ensure high-performance sorting in the \"Top\" feed without requiring real-time joins or aggregations.\n\nRelated API operations include the entertainment of vote state through the optimistic UI without requiring retrieval, as the UI state is authoritative and should mirror user action. POST /votes is the only permitted interaction for vote state change. No retrieval or deletion endpoints are needed.\n\nThe response returns no body, as the optimistic UI update will display the new score immediately.","parameters":[{"name":"postId","description":"Unique identifier of the post to vote on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for the vote action to perform. Should include the desired vote state: 'upvote' or 'downvote'. The system will determine whether to create a new vote record or update the existing one based on the current state and the requested state. This follows the business rule that users can toggle between states but cannot vote when not authenticated or when voting on their own post.","typeName":"ICommunityPlatformPost.ICreateVote"},"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"create","prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before a vote can be cast or updated"}]},{"specification":"This operation removes a user's vote on a specific post by deleting the corresponding record from the community_platform_post_votes table. Unlike toggling votes with POST, this operation explicitly removes the user's vote state, setting it to 'none' without requiring a new vote action. It targets the same table as other vote operations but is designed specifically for vote clearance, supporting the behavior where users can click a button to remove their vote entirely.","path":"/communityPlatform/member/posts/{postId}/votes","method":"delete","summary":"Remove a user's vote on a specific post","description":"This operation removes a user's vote on a specific post by deleting the corresponding record from the community_platform_post_votes table. Unlike toggling votes with POST, this operation explicitly removes the user's vote state, setting it to 'none' without requiring a new vote action. It targets the same table as other vote operations but is designed specifically for vote clearance, supporting the behavior where users can click a button to remove their vote entirely.\n\nThe operation targets the community_platform_post_votes table as defined in the Prisma schema, which tracks individual upvotes and downvotes with a unique constraint ensuring one vote per user per post. When this delete operation is executed, the system removes the record where community_platform_post_id matches the postId and community_platform_user_id matches the authenticated user's ID. If no such record exists, the operation succeeds as a no-op, since 'none' is the implicit state.\n\nSecurity considerations include ensuring that only the authenticated user can remove their own vote. This is enforced by checking the authentication token against the user ID stored in the vote record. Users cannot remove votes from other users' posts or from posts they haven't voted on. This follows the business rule that users can only manipulate their own voting state.\n\nThis operation complements the POST voting creation/update endpoint by providing a more explicit and direct method to clear a vote. While the POST method can achieve vote removal by toggling from an existing state, this DELETE endpoint offers a cleaner semantic for users who specifically want to remove their vote without changing it to the alternative state. The system will update the denormalized community_platform_post_stats table atomically to reflect the removal of the vote and recalculate the post's score (upvotes - downvotes).\n\nThis operation is linked directly to the community_platform_post_votes table and is part of a complete vote lifecycle management system that includes POST (create/update), PATCH (retrieve), and DELETE (remove). The delete operation supports the requirement that users can toggle their vote state, but in this case, the transition is from Upvote/Downvote → None, bypassing the alternative state. This operation is used by the UI when a user clicks 'Undo Vote' or when default behavior is to remove rather than toggle.","parameters":[{"name":"postId","description":"Unique identifier of the post from which to remove the user's vote","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/votes","method":"post"},"description":"A vote must be created before it can be deleted. This ensures the vote record exists in the database before attempting to remove it."}]},{"specification":"This operation updates an existing vote on a comment. The user can toggle between upvote, downvote, and no vote states. This operation is triggered when a user clicks on their current vote button to change their vote. It uses optimistic UI updates to immediately reflect the change before server synchronization. The operation is protected by authentication and ownership validation to prevent votes on self-authored comments.","path":"/communityPlatform/member/comments/{commentId}/votes","method":"patch","summary":"Update a vote on a comment with new state","description":"This operation allows a member to change their existing vote on a comment. Users may only vote on comments they have already voted on, toggling between upvote, downvote, and none states. The vote state transition follows the pattern: None → Upvote → Downvote → None, or direct switches between Upvote and Downvote.\n\nThe operation is only available to registered members; guests attempting to vote are redirected to login. The system enforces the business rule that users cannot vote on their own comments. If a user attempts to vote on a comment they authored, the operation returns an error response with the message: \"You can't vote on your own posts/comments.\"\n\nThis operation performs an optimistic UI update: when the user clicks the vote button, the UI immediately reflects the new vote state (color change and score update) before the server confirms the change. If the server returns an error, the UI reverts to the previous state and shows: \"A temporary error occurred. Please try again in a moment.\"\n\nThe request body contains the new vote_state ('upvote' or 'downvote') as the switch mechanism; sending a vote state that matches the current vote will delete the vote record (set to 'none'). The comment's score is recalculated server-side and used for the Top sort ordering in feeds and search results.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment in UUID format.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The new vote state to apply to the comment. Only 'upvote' or 'downvote' values are accepted. If the submitted state matches the current state, the vote should be removed (set to none).","typeName":"ICommunityPlatformCommentVoteRequest"},"responseBody":{"description":"The updated comment score after applying the vote change, along with success confirmation.","typeName":"ICommunityPlatformCommentVoteResponse"},"authorizationRoles":["member"],"name":"update","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/comments/{commentId}/votes","method":"post"},"description":"A vote must be created before it can be updated. This ensures the vote record exists in the database since the PATCH operation modifies an existing vote state."}]},{"specification":"This operation creates a new vote on a comment. The user can either upvote or downvote a comment they have not previously voted on. This operation is triggered when a user initially engages with a comment. It uses optimistic UI updates to immediately reflect the change before server synchronization. Authentication and ownership rules are strictly enforced.","path":"/communityPlatform/member/comments/{commentId}/votes","method":"post","summary":"Create a new vote on a comment","description":"This operation allows an authenticated member to establish a new vote on a comment for the first time. When a user clicks an upvote or downvote button and has no prior vote on the comment, this operation is called to create a vote record.\n\nThe operation enforces the business rule that users cannot vote on comments they authored; such attempts are blocked server-side with a 403 error and the message: \"You can't vote on your own posts/comments.\" Guests attempting to vote are redirected to login with a \"Please sign in to continue.\" message.\n\nThe vote_state field in the request body must be either 'upvote' or 'downvote'. The server validates that this is a new vote (no existing vote record from the user for this comment). Upon success, a new vote record is created with the user ID, comment ID, and vote state. The vote score for the comment is updated server-side and propagated to all feed views.\n\nThis operation follows optimistic UI pattern: the UI updates the vote button state and comment score immediately upon user interaction. If server synchronization fails, the UI reverts to its previous state and displays: \"A temporary error occurred. Please try again in a moment.\"\n\nThis operation is used during the initial vote action, while the PATCH operation is used for modifying existing votes. The system does not allow a user to create multiple votes on the same comment; existing votes are always updated, not duplicated.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment in UUID format.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The vote state to create for this comment on behalf of the authenticated user. Must be either 'upvote' or 'downvote'.","typeName":"ICommunityPlatformCommentVoteRequest"},"responseBody":{"description":"The updated comment score after applying the new vote and success confirmation.","typeName":"ICommunityPlatformCommentVoteResponse"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"A comment must be created before a vote can be added to it. This ensures the target comment exists in the database before attempting to vote on it."}]},{"specification":"This operation deletes a vote from a comment. When a user clicks their current vote button again, the vote is removed (set to 'none'). The system performs an optimistic UI update to immediately reflect the change before server synchronization.","path":"/communityPlatform/member/comments/{commentId}/votes","method":"delete","summary":"Remove a vote from a comment","description":"This operation removes the current vote from a comment if the user has already voted on it. When the user re-clicks their current voting button (e.g., clicking the Upvote button when already upvoted), this operation is triggered to delete the vote record and revert the vote state to 'none'.\n\nThis operation follows the same security rules as vote creation and update: only authenticated members may perform it; guests are redirected to login, and users cannot vote on their own comments. The server ensures only one vote record can exist per user-comment pair, so a DELETE request is the mechanism for removing a vote.\n\nThe operation does not require a request body — the identification of the comment and user context is sufficient. If the user has no existing vote on the comment, the server returns a 404 error confirming no vote exists to delete.\n\nThis operation is the mechanism for setting a vote state back to 'none'. It is used in conjunction with POST and PATCH to provide a complete vote lifecycle: POST (set first vote), PATCH (modify vote), DELETE (remove vote). The comment score is decremented accordingly on the server, and the UI is updated optimistically before sync.","parameters":[{"name":"commentId","description":"Unique identifier of the target comment in UUID format.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation that the vote was successfully removed and the updated comment score after deletion.","typeName":"ICommunityPlatformCommentVoteResponse"},"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/comments/{commentId}/votes","method":"post"},"description":"A vote must be created before it can be removed. This ensures the vote record exists in the database before attempting to delete it."}]},{"specification":"This operation retrieves the list of communities that a specific member has joined, filtered by membership status. It supports filtering and sorting to power the 'Recent Communities' sidebar and is used for home feed content eligibility decisions. The system uses soft-delete architecture for membership records to maintain history and allow rejoining.","path":"/communityPlatform/member/users/{userId}/communities","method":"patch","summary":"Retrieve member's joined communities with filtering","description":"This operation queries all community memberships for a specific member, returning only those communities with an active membership (deleted_at is null). The results include the community ID, name, last interaction timestamp, and metadata, enabling the 'Recent Communities' sidebar to be populated correctly.\n\nThe operation supports filtering by activity recency (using last_interaction_at descending) and pagination to limit results to the top 5 communities as required in the business logic. The endpoint does not support filtering by community category or search — only membership status and recency are relevant.\n\nThe request body can be used to specify pagination parameters (limit, offset) and sorting direction (ascending/descending) for last_interaction_at to support client-side display logic. The server ensures that only community records where deleted_at = NULL are returned — inactive memberships are excluded.\n\nThis operation is essential for rendering the Home feed, which shows posts only from communities in this list. It is also used to populate and maintain the 'Recent Communities' sidebar in the left navigation. Community memberships are managed exclusively via join/leave actions on the community page; this endpoint has no operations for creating or updating membership — those are handled via the community page's Join button.\n\nFor performance, the operation leverages the existing index on community_platform_user_communities on (community_platform_user_id, last_interaction_at). Results are not cached aggressively to ensure real-time accuracy when a user joins or leaves a community.","parameters":[{"name":"userId","description":"Unique identifier of the target member in UUID format.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering and pagination parameters for retrieving communities. Includes limit (default 5), offset, and sort direction for last_interaction_at. Used to implement pagination in the 'Recent Communities' sidebar.","typeName":"ICommunityPlatformUserCommunityRequest"},"responseBody":{"description":"A paginated list of communities the user has joined, sorted by most recent activity.","typeName":"IPageICommunityPlatformUserCommunity"},"authorizationRoles":["member"],"name":"patchByUserid","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a user can join it and have membership records established."},{"endpoint":{"path":"/communityPlatform/member/communities/{communityName}/members","method":"post"},"description":"User must join a community to create a membership record with last_interaction_at and deleted_at status required for this endpoint's filtering."}]},{"specification":"This operation retrieves a paginated list of communities that a specific user has joined or interacted with, based on their membership records in the community_platform_user_communities table. The operation supports filtering by active memberships (deleted_at IS NULL) and sorting by last_interaction_at to prioritize recently active communities. It returns a summary of each community for display in the 'Recent Communities' sidebar. This operation is essential for the user interface's left sidebar functionality, which displays a dynamic list of up to 5 communities ordered by most recent activity. The community data is sourced from community_platform_communities, and membership status is determined by the community_platform_user_communities junction table.","path":"/communityPlatform/member/users/{userId}/communities","method":"get","summary":"Retrieve a user's recent communities they've joined, ordered by last interaction","description":"This operation returns a list of communities that the authenticated user has joined and interacted with, specifically designed to populate the 'Recent Communities' sidebar in the UI. The communities are retrieved based on the user's membership records in the community_platform_user_communities table, filtering out any records where deleted_at is not null (i.e., communities the user has left). Results are ordered by the last_interaction_at timestamp in descending order to prioritize the most recently active communities, ensuring the UI displays the most relevant communities first.\n\nThe operation is optimized for performance by referencing the existing community_platform_user_communities table which tracks all user-community interactions, including joins, posts, comments, and votes. This ensures real-time accuracy of the 'Recent Communities' list without requiring expensive joins with other tables. The system returns a maximum of 5 communities as specified in the business requirements, which is enforced at the query level. Each returned community includes only essential summary information (name, logo, member count) to minimize payload size and optimize for sidebar rendering.\n\nAuthentication is required via the userId path parameter, which must correspond to a valid community_platform_member.id. The user ID is validated against the session to ensure the user is authorized to access their own data. If the user ID is invalid, a 404 response is returned. If the user has no active communities, an empty array is returned, which is handled gracefully by the UI to display a placeholder message suggesting exploration.\n\nThis operation does not require a request body as all parameters are provided in the path. The user's session must be active, and if expired, the API will return a 401 Unauthorized response, prompting the frontend to open the login modal and then retry the request after successful re-authentication.","parameters":[{"name":"userId","description":"Unique identifier of the user whose recent communities are being requested. This must correspond to a valid community_platform_member.id in the system.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"An array of user's recently active communities, ordered by last interaction time in descending order, with a maximum of 5 entries.","typeName":"ICommunityPlatformIPageICommunity.ISummary"},"authorizationRoles":["member"],"name":"getByUserid","authorizationRole":"member","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before a user can join it and have membership records established."},{"endpoint":{"path":"/communityPlatform/member/communities/{communityName}/members","method":"post"},"description":"User must join a community to create a membership record with last_interaction_at and deleted_at status required for this endpoint's filtering."}]},{"specification":"This operation performs a complex search across all posts using advanced filters such as keyword matching, sorting by 'Newest' or 'Top', and pagination. It queries the community_platform_search_posts materialized view in the database, which is a denormalized copy of community_platform_posts data optimized for full-text search performance. The operation returns a paginated list of post summaries including title, author, community, score, comment count, and creation timestamp. This endpoint supports user interaction with the search functionality on the /s/posts tab, allowing users to find content across the entire platform by entering search terms and selecting sort options.","path":"/communityPlatform/search/posts","method":"patch","summary":"Search for posts using keywords with sorting and pagination options","description":"This endpoint supports the comprehensive post search functionality on the platform's /s page, specifically targeting the 'Posts' tab. It queries the community_platform_search_posts materialized view, which contains denormalized data from community_platform_posts and corresponding statistics from community_platform_post_stats to enable efficient full-text search and sorting without expensive joins at query time.\n\nThe operation accepts a request body with parameters for search query (q), sort order (newest or top), pagination (page and limit), and optional community filters. The search query is matched against the title and body fields in the search view using PostgreSQL's pg_trgm extension for fuzzy matching. When the sort parameter is 'newest', results are ordered by created_at descending. When the sort parameter is 'top', results are ordered by score (upvotes - downvotes) descending, followed by created_at descending, and then by post identifier descending for tie-breaking.\n\nThe operation returns a paginated result set of 20 posts per page, as specified in the requirements. Each post in the response includes essential summary data: community name, post title, author display name (or 'Anonymous'), creation timestamp (presented in relative format per client context), comment count, and current score. The response body uses the IPageICommunityPlatformPost type schema, which includes a pagination metadata object and the data array.\n\nThis endpoint enforces the requirement that search queries must be at least 2 characters; if a shorter query is provided, the API returns a 400 Bad Request response with a message indicating the minimum length requirement. This validation occurs before any database query is executed for performance optimization. If no results match the criteria, an empty data array is returned with pagination details indicating zero total results.\n\nAs this is a complex search operation utilizing a request body for query parameters, the HTTP PATCH method is used in accordance with the API design principle for complex collection searches, even though no data is modified on the server. The user's authentication status (guest or member) affects the visibility of join buttons in the UI but does not affect the search results themselves, as all post content is publicly accessible for reading.","parameters":[],"requestBody":{"description":"Search parameters for querying posts including text term, sort type, and pagination controls.","typeName":"ICommunityPlatformPost.IRequest"},"responseBody":{"description":"A paginated collection of post summaries matching the search query, including metadata for pagination and sorting.","typeName":"IPageICommunityPlatformPost"},"authorizationRoles":[],"name":"search","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist to reference in post creation and enable filtering by community_id."},{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Posts must be created to appear in the search results and be filterable by query, sort, or community_id."}]},{"specification":"This operation retrieves a single post's detailed information by its unique identifier, which is used for viewing the complete context of a post on its detail page (/c/[name]/[postID]). The data is retrieved directly from the community_platform_posts table and includes the full title, body, author details, creation and update timestamps, and a reference to its associated community. This endpoint is called after a user clicks on a post from search results or the home feed to present a comprehensive view.","path":"/communityPlatform/search/posts/{postId}","method":"get","summary":"Retrieve a specific post's full details by its unique ID","description":"This operation provides the detailed content for a single post identified by its unique postId parameter. The post details are retrieved from the community_platform_posts table, which stores the complete text, metadata, and relationships for each post including the title, body, author_id, community_id, author_display_name, and timestamps.\n\nThe operation enforces that the post must be active (deleted_at IS NULL) to be visible. If a post has been deleted (hard or soft), the API returns a 404 Not Found response, preventing users from viewing deleted content. The returned post includes the full content fields, including any line breaks in the body, as text-only format is required by business rules. The author_display_name is returned directly from the table, with 'Anonymous' used if the field is null.\n\nThe operation requires the postId parameter to be a valid UUID that corresponds to an existing post in the community_platform_posts table. The prefix of the community name (the 'name' field from the community_platform_communities table) is derived from the community_id relationship, ensuring correct display of the community context in the URL path.\n\nAuthentication is not required to access this endpoint as reading posts is open to everyone according to the requirements. However, the API still validates the user session for potential feature toggles such as whether the viewer is the post's author (which determines whether edit/delete buttons should be shown in the UI). This authorization check is handled by the frontend via the user's session token, not by API authorization roles. The operation is stateless and does not consume or modify any system resources, making it safe for public access.\n\nThe response structure uses the ICommunityPlatformPost type to return the complete post object with all fields as defined in the Prisma schema, including relationships to the author and community as references for frontend routing.","parameters":[{"name":"postId","description":"Unique identifier of the post to retrieve. Must be a valid UUID corresponding to a record in the community_platform_posts table.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete data object for a single post including title, body, author details, and timestamps.","typeName":"ICommunityPlatformPost"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must exist to reference in post creation and enable post to be associated with a valid community."},{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created and persisted before it can be retrieved by its postId."}]},{"specification":"This operation performs a search across all communities using keyword matching and returns a paginated list of community summaries with their metadata and membership status. It queries the community_platform_search_communities materialized view, which contains denormalized data of community names, descriptions, categories, and member counts, optimized for efficient full-text search. This endpoint supports the 'Sub-Communities' tab in the global search interface at /s, allowing users to discover new communities by name or description.","path":"/communityPlatform/search/sub-communities","method":"patch","summary":"Search for communities by name or description with optional sorting","description":"This endpoint implements the community search functionality in the 'Sub-Communities' tab of the global search system. It uses the community_platform_search_communities materialized view, which is a denormalized copy of data from the community_platform_communities table, ensuring fast full-text search performance on community names and descriptions.\n\nThe operation accepts a request body with search parameters: a text query (q) and a sort option ('nameMatch' or 'recentlyCreated'). The query is matched against the name and description fields using PostgreSQL's pg_trgm extension for fuzzy text matching, returning results in order of relevance when sorting by 'nameMatch'. When sorting by 'recentlyCreated', results are ordered by created_at in descending order. Results are paginated with 20 communities per page as specified in the requirements.\n\nEach returned community includes the name, description (truncated to two lines in the UI), category, optional logo_url, and member_count. The member_count is presented as an integer and will be formatted as '1k', '10k', or '1m' in the UI based on its value, per the requirements. The operation also returns a boolean flag indicating whether the current authenticated user has joined the community (based on the community_platform_user_communities table) for UI rendering of 'Join' or 'Joined' buttons.\n\nAuthentication is not required for this search, as community discovery is permitted for guests. However, if an authenticated user is identified by the session, the response includes a 'joined' flag for each community to enhance the user experience. The API rejects search queries under 2 characters with a 400 Bad Request response, enforcing a minimum query length as required by the business rules.\n\nThis endpoint uses the HTTP PATCH method for complex search operations with request bodies, even though it only reads data. The response body uses the IPageICommunityPlatformCommunity type schema that includes pagination metadata and an array of community summary objects with additional joined-state information for authenticated users.","parameters":[],"requestBody":{"description":"Search parameters for querying communities including search term, sort preference, and pagination controls.","typeName":"ICommunityPlatformCommunity.IRequest"},"responseBody":{"description":"A paginated collection of community summaries matching the search query, including joined status for authenticated users and community metadata.","typeName":"IPageICommunityPlatformCommunity"},"authorizationRoles":[],"name":"search","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This endpoint retrieves detailed information about a specific community for search purposes. It directly corresponds to the community_platform_search_communities table in the Prisma schema, which is a denormalized materialized view optimized for search performance. The operation returns community metadata including name, description, category, member count, and timestamps. The endpoint is used when users search for communities and select a specific result to view details.","path":"/communityPlatform/search/sub-communities/{communityId}","method":"get","summary":"Retrieve detailed search information for a specific community","description":"This operation retrieves detailed information for a specific community from the search materialized view. The data is sourced from the community_platform_search_communities table, which is a denormalized copy of community_platform_communities updated by system triggers. This view is optimized for search performance and contains fields specifically targeted for user discovery workflows.\n\nThe response includes the community's unique identifier, searchable name, optional description, assigned category from the predefined list, current member count (with abbreviation formatting), and creation/update timestamps. This data provides context for users evaluating communities before joining.\n\nThe member_count field is maintained atomically and may show abbreviated representations (1k, 10k, 1m) in the UI, though the API returns the raw numeric value. The category is restricted to the defined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nSince this endpoint serves an API for search results, it does not include sensitive information like rules, logo, or banner URLs. This information is only exposed through the community detail endpoint, making this a lightweight view suitable for search result displays.","parameters":[{"name":"communityId","description":"Unique identifier of the community to retrieve from search materialized view","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for a community from the search materialized view","typeName":"ICommunityPlatformSearchCommunity"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before it can be retrieved by its ID in search results"}]},{"specification":"This endpoint provides a paginated search interface for comments across the entire platform. It queries the community_platform_search_comments materialized view table, which contains denormalized comment data optimized for search performance. The operation supports filtering by query text and pagination, returning comment excerpts, author information, parent post context, and score for ranking purposes. This is the primary endpoint for the Comments tab in the global search functionality.","path":"/communityPlatform/search/comments","method":"patch","summary":"Search for comments across all communities with pagination and filtering","description":"This operation allows users to search for comments across the entire platform, returning results from the community_platform_search_comments materialized view. This denormalized table is updated automatically via system triggers whenever comments are created, updated, or deleted, ensuring search results remain current without expensive joins during queries.\n\nUsers can search by entering query terms that match comment content (2+ characters required), and results are returned in pages of 20 items with a \"Load more\" button for pagination. The search matches against comment content using full-text search capabilities with trigram indexing for efficient substring matching.\n\nResults are sorted by creation time descending (Newest) only, as specified by the business requirements. Each returned comment includes the comment content excerpt (capped at 2 lines), author display name (or \"Anonymous\" if not set), creation timestamp, parent post title (for context), and the community name. The score field represents the calculated upvote-minus-downvote total.\n\nThis endpoint does not support other sorting options (like Top) as per requirements, which restricts comment sorting to Newest only. The API returns skeleton comment data suitable for search result listings - full comment content and threading details are available via the individual comment detail endpoint.","parameters":[],"requestBody":{"description":"Search parameters for finding comments including query term and pagination controls","typeName":"ICommunityPlatformSearchComment.IRequest"},"responseBody":{"description":"Paginated collection of comment search results with excerpts and metadata","typeName":"IPageICommunityPlatformSearchComment"},"authorizationRoles":[],"name":"search","authorizationRole":null,"authorizationType":null,"prerequisites":[]},{"specification":"This endpoint retrieves detailed information for a specific comment for search purposes. It corresponds to the community_platform_search_comments materialized view table in the Prisma schema, providing a lightweight view optimized for search result display. The operation returns structured comment data including content, author, parent context, score, and timestamps, suitable for detailed comment views within search results.","path":"/communityPlatform/search/comments/{commentId}","method":"get","summary":"Retrieve detailed search information for a specific comment","description":"This operation retrieves detailed information for a specific comment from the search materialized view. The data is sourced from the community_platform_search_comments table, which is a denormalized copy updated by system triggers for efficient search performance.\n\nThe response includes the comment's unique identifier, content text (2-2,000 characters), author display name (or \"Anonymous\" if not set), parent post title and community name for context, calculated score (upvotes minus downvotes), and timestamps. This detail page is accessed when a user clicks on a comment from search results to see the exact match context.\n\nNote that this endpoint does not return parent thread nesting information or comment replies - those are handled by the comment detail endpoint on the post page. This endpoint provides only the essential information needed for search result context, making it lightweight and fast. The content field contains the full comment text that matched the search query, truncated for display purposes in search results.","parameters":[{"name":"commentId","description":"Unique identifier of the comment to retrieve from search materialized view","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for a comment from the search materialized view","typeName":"ICommunityPlatformSearchComment"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before a comment can be associated with it in search results"},{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"Comment must be created before it can be retrieved by its ID in search results"}]},{"specification":"This endpoint retrieves the current member count for a specific community. It queries the community_platform_community_stats denormalized analytics table, which maintains an atomic counter updated on every join/leave action to avoid expensive COUNT queries during UI rendering. The operation returns the numeric member count that powers the abbreviated display (1k, 10k, 1m) in the UI.","path":"/communityPlatform/analytics/communities/{communityId}/member-count","method":"get","summary":"Retrieve the current member count for a specific community","description":"This operation retrieves the current member count for a specific community from the community_platform_community_stats table. This is a denormalized analytics counter table that is maintained atomically during every join and leave operation, ensuring high-performance read operations without requiring expensive COUNT queries on the junction table.\n\nThe value returned represents the exact count of active members currently joined to the community. The UI will format this value for display according to business rules: 1,000 → 1k, 10,000 → 10k, 1,000,000 → 1m. However, the API returns the raw numeric value for use in internal logic and calculations.\n\nThis endpoint supports the 'Recent Communities' sidebar and community discovery features on both the Explore page and community homepage. Since the counter is updated atomically in real-time, this endpoint is always accurate and responsive. The community_platform_user_communities junction table contains the actual membership records (with soft delete for leave history), but this stats table provides real-time aggregate data for display purposes.","parameters":[{"name":"communityId","description":"Unique identifier of the community whose member count is requested","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Current number of members in the community","typeName":"ICommunityPlatformCommunityStats"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/communities","method":"post"},"description":"Community must be created before its member count can be retrieved, as the analytics endpoint relies on the existence of the community record in the system."}]},{"specification":"This operation retrieves the current upvote and downvote score for a specific post. The score is calculated as (upvotes - downvotes) and is sourced from the community_platform_post_stats denormalized table, which is updated atomically on every vote change to optimize performance for high-frequency read operations. This endpoint supports the 'Top' sorting algorithm in the home feed and search results, and provides real-time score updates for the Global Latest sidebar without requiring expensive joins or aggregations on the vote table.","path":"/communityPlatform/analytics/posts/{postId}/score","method":"get","summary":"Retrieve the vote score for a specific post","description":"This endpoint returns the current vote score for a post, calculated as the difference between the total number of upvotes and downvotes. The score is retrieved from the community_platform_post_stats table, a denormalized statistics table that is atomically updated on every vote action to ensure high-performance reads for feeds and search results.\n\nThis operation is essential for implementing the 'Top' sort order in the home feed and global search, allowing the client to display the relative popularity of posts without executing expensive COUNT queries on the community_platform_post_votes junction table. The score responds to vote changes in real-time due to the atomic updates in the analytics layer.\n\nThe endpoint returns only the numeric score value, as this is the only information required by the client for display purposes. No additional metadata is included to minimize payload size for high-frequency requests across the global sidebar and main feed. The client uses this score to sort and rank posts in the 'Top' view and to indicate post popularity with visual cues.","parameters":[{"name":"postId","description":"Unique identifier of the post whose score is being requested. This reference maps directly to the community_platform_post_stats.community_platform_post_id field.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The current vote score of the post, calculated as (upvotes minus downvotes). This is a simple integer value representing net popularity, which the UI uses to sort posts in 'Top' view and to display the score visually.","typeName":"ICommunityPlatformPostScore"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts","method":"post"},"description":"Post must be created before its vote score can be retrieved, as the analytics endpoint depends on the existence of the post record in the system."}]},{"specification":"This operation retrieves the current upvote and downvote score for a specific comment. The score is calculated as (upvotes - downvotes) and is sourced from the community_platform_comment_stats denormalized table, which is updated atomically on every vote change to optimize performance for threaded comment displays. This endpoint supports score rendering in comment threads on post detail pages and in search results, avoiding expensive aggregation queries on the vote table.","path":"/communityPlatform/analytics/comments/{commentId}/score","method":"get","summary":"Retrieve the vote score for a specific comment","description":"This endpoint returns the current vote score for a comment, calculated as the difference between the total number of upvotes and downvotes. The score is retrieved from the community_platform_comment_stats table, a denormalized statistics table that is atomically updated on every vote action to ensure high-performance reads during comment rendering.\n\nThis operation is essential for displaying the relative popularity of comments in threaded discussions on post detail pages and in search results. Without this denormalized table, calculating scores would require JOINs and COUNTs across the community_platform_comment_votes table, which would be too slow for real-time thread rendering.\n\nThe endpoint returns only the numeric score value, as this is the only information required by the client for display purposes. No additional metadata is included to minimize payload size and ensure fast rendering of comment threads. The client uses this score to sort comments by popularity and to display score indicators next to each comment.\n\nNote: As per business rules, users cannot vote on their own comments, and this endpoint does not return user-specific vote state—it only returns the aggregated score.","parameters":[{"name":"commentId","description":"Unique identifier of the comment whose score is being requested. This reference maps directly to the community_platform_comment_stats.community_platform_comment_id field.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The current vote score of the comment, calculated as (upvotes minus downvotes). This is a simple integer value representing net popularity, which the UI uses to sort comments in threaded view and to display the score visually.","typeName":"ICommunityPlatformCommentScore"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null,"prerequisites":[{"endpoint":{"path":"/communityPlatform/member/posts/{postId}/comments","method":"post"},"description":"Comment must be created before its vote score can be retrieved, as the analytics endpoint depends on the existence of the comment record in the system."}]}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users who can view all public content including posts, comments, and community listings but cannot post, comment, vote, join communities, or create new communities.","kind":"guest"},{"name":"member","description":"Authenticated users who can create posts, comment on posts, upvote or downvote content, join or leave sub-communities, and edit or delete their own content. Members can also create new sub-communities.","kind":"member"},{"name":"admin","description":"System administrator with elevated privileges to delete inappropriate communities, moderate content, manage user reports, and enforce community rules. Admins can perform all member actions and override ownership restrictions when necessary.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageICommunityPlatformGuest":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformGuest"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformMember":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformMember"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformMember.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformMember.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunitySummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunitySummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityPlatformUserCommunityISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityPlatformUserCommunityISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunityPlatformPostISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunityPlatformPostISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformComment.ISparse":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformComment.ISparse"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformUserCommunity":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformUserCommunity"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformPost"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformCommunity":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunity"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunityPlatformSearchComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformSearchComment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ICommunityPlatformGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the guest session.\n\nThis UUID serves as the persistent reference for the temporary guest account created during the guest session. It is immediately generated upon successful creation via the /auth/guest/join endpoint and is used internally to track session state and analytics without associating any permanent user identity or profile with the guest."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest session was created.\n\nThis field records the exact moment a guest account was established, tracked in ISO 8601 format with timezone. It is used for analytics purposes to measure user acquisition trends, session duration patterns, and spam detection. The value is automatically set by the system and cannot be modified by the client."},"ip_address":{"type":"string","description":"Source IP address of the guest user.\n\nThis field captures the public IP address from which the guest session originated, stored as a string in standard IPv4 or IPv6 format. It is used for security analytics, abuse monitoring, and regional content delivery. The value is collected automatically upon session creation and remains immutable for the life of the session. This data is not used for authentication or authorization purposes."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","created_at","token"],"description":"Authentication token and session information for temporary guest access.\n\nThis schema defines the response structure returned after successfully establishing a guest session via the /auth/guest/join or /auth/guest/refresh endpoints. It contains minimal identifying information necessary to maintain the session while ensuring no personal or persistent user data is exposed. The guest account provides read-only access to public platform content and cannot perform interactive actions like posting, commenting, or voting. All data points in this structure are designed to be ephemeral and non-identifying.\n\nThe session remains active only for the duration of the browsing session and is automatically terminated when the user attempts to perform an authentication-requiring action, at which point they are prompted to login to become a member."},"IMember.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for member authentication and communication.\n\nThis unique identifier is used as the primary login credential for new members. It must be a valid, globally unique email address that has not been previously registered in the system. The email serves both as the identifier for authentication and as the contact point for account notifications, password resets, and community updates. The system enforces format validation and uniqueness constraints to prevent duplicates and ensure deliverability."},"password_hash":{"type":"string","description":"Cryptographically hashed password for authentication.\n\nThis field contains the secure hash of the user's chosen password, generated using a strong one-way hash algorithm (bcrypt). It is the only password representation stored in the database, ensuring that even if the database is compromised, the original password cannot be retrieved. The hash is generated server-side upon registration and cannot be provided by the client; clients must submit a plain-text password which is then hashed by the backend before storage. This field is required for all new member accounts and is immutable once set."}},"required":["email","password_hash"],"description":"Request payload containing registration credentials for a new member account.\n\nThis schema defines the exact structure required for creating a new member account through the /auth/member/join endpoint. It includes the minimum set of fields necessary to establish a secure, authenticated user identity on the platform. The system requires both an email address (for identification and communication) and a password hash (for authentication) to create a valid member profile. The email must be unique, and the password_hash must be a correctly generated bcrypt hash. No other fields from the member entity are accepted in this registration request - attributes like display_name, created_at, and last_login_at are auto-generated by the system.\n\nThis payload structure is designed to follow the principle of least privilege, collecting only essential authentication data to protect user privacy and minimize the attack surface."},"ICommunityPlatformMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member account.\n\nThis UUID serves as the immutable primary key for the member's profile in the community_platform_member table. It is automatically generated upon account creation and is used as the core identifier in all authorization and access control decisions throughout the platform. This ID is embedded in authentication tokens (JWT) to establish user identity without exposing personal information. The value is persistent across sessions and is the authoritative reference linking a user to all their content, votes, and membership records."},"email":{"type":"string","format":"email","description":"Email address of the authenticated member.\n\nThis field contains the unique email address used by the member for account registration and login. It is included in the authentication response to allow client-side applications to personalize the user interface (e.g., displaying name/email in profile menus) while still protecting sensitive information like password_hash. The email is technically immutable after account creation for consistency and audit purposes, but this property is only provided for display and convenience, not for account recovery or changes."},"display_name":{"type":"string","maxLength":32,"description":"Optional display name for the member, used for posts and comments. If empty or null, system displays 'Anonymous' by default.\n\nThis field provides a user-customized identifier for content attribution. It is limited to 32 characters as specified in business rules, and must not contain any special formatting characters that could be used for XSS attacks."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was created, precise to the second in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis immutable field establishes the account's origin and is used for onboarding analytics, account age calculations, and chronological ordering in administrative reviews."},"last_login_at":{"type":"string","format":"date-time","description":"Timestamp of the member's last successful login session, precise to the second in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis field is updated on each successful authentication. Used to determine session validity, user activity statuses, and engagement trends. NULL indicates the user has never logged in.\n\nThe field may be NULL for newly created accounts prior to first login, and remains NULL if the account is deactivated (deleted_at is set)."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was deactivated (soft delete). If null, account is active; if set, the account is deleted but preserved for audit trail purposes.\n\nThis implements soft delete functionality to maintain data integrity and audit history. Instead of removing records, the system marks them as inactive, allowing admins to restore accounts if needed and preserving associated content relationships.\n\nAccount statuses:\n- deleted_at = null: Active account\n- deleted_at = Date: Activated soft deletion, account is no longer accessible\n\nThis prevents orphaned data and maintains referential integrity with related content created by the user."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","created_at","token"],"description":"Authentication response containing JWT token.\n\nThis schema defines the structure of the successful authentication response returned after successful login or member registration. It combines a stable, internal user identifier (id) with a verifiable token for session authorization (token) and the member's primary contact identifier (email) to enable a seamless user experience. The design follows security best practices by excluding sensitive data (like password_hash) while providing sufficient context for the client application to function properly.\n\nThe token property uses a reference to the standardized IAuthorizationToken schema to ensure consistency across all authentication responses (member, admin, etc.). This allows for uniform token handling in frontend applications while maintaining flexibility for future token enhancements. The response enables the client to authenticate API requests for protected endpoints (post creation, commenting, voting, etc.) without requiring further credential submission."},"IMember.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address used for member authentication.\n\nThis field contains the email address of the existing member attempting to log in to the platform. It serves as the identifier that the system uses to locate the corresponding record in the community_platform_member table. The system validates that this email exists, is not marked as deleted (deleted_at is null), and has been previously registered. It is a required field for login requests and must match exactly with a registered member's email, case-insensitively."},"password_hash":{"type":"string","description":"Cryptographically hashed password for verification.\n\nThis field contains the hashed password provided by the client during login, generated from the user's plain-text password using the same hashing algorithm (bcrypt) as during account creation. The system compares this submitted hash against the stored password_hash in the database to verify authentication. It is critical that the hashing algorithm and parameters match exactly between client (for demonstration purposes) and server implementation. The system never stores or transmits plain-text passwords.\n\nNOTE: In practical implementation, the client would submit a plain-text password, and the server would hash it with bcrypt. This schema description assumes a test or simulation context where hash values are passed directly. In production, this would be the *plain-text* password field, which the server would hash before comparing."}},"required":["email","password_hash"],"description":"Credentials for authenticating an existing member account.\n\nThis schema defines the exact structure of the payload expected by the /auth/member/login endpoint. It contains the two essential pieces of information needed for authentication: the member's unique email address and their cryptographic password hash. The system checks that these credentials match a record in the community_platform_member table with a null deleted_at field, indicating an active account.\n\nFor practical implementation in a real system, the client would submit a plain-text password (not a hash) derived from user input. The backend would then hash that password with bcrypt and compare it to the stored password_hash. This schema definition is written assuming direct hash comparison (for simulation or testing purposes). In production, this schema would use a 'password' field of type string (plain text) instead of password_hash."},"IMember.IRefresh":{"type":"object","properties":{"refreshToken":{"type":"string","description":"The refresh token used to obtain a new access token for the member account.\n\nThis token is issued during the initial login or join operation and must be stored securely on the client side. It has a longer expiration (30 days) compared to the access token (30 minutes) and is used to refresh the access token without requiring the user to re-enter their credentials.\n\nThe refresh token is validated by the server against the member's record in the community_platform_member table to ensure session integrity and security. It is not used for any other API operations besides refresh.\n\nFor security purposes, the refresh token is not included in the response body of any operation other than the refresh endpoint, and it must be transmitted over HTTPS.\n\nThis field is required for the refresh operation to function and is the only parameter required in the request body for the member refresh endpoint."}},"required":["refreshToken"],"description":"Request payload containing the refresh token to extend the member's authenticated session.\n\nThis object encapsulates the refresh token that allows a member to obtain a new access token without re-authenticating with their email and password.\n\nThe refresh token is issued during the initial authentication process (login or join) and has a validity period of 30 days. When the access token expires (after 30 minutes), the member can use this refresh token to obtain a new access token by calling the /auth/member/refresh endpoint. This maintains a seamless user experience without requiring frequent re-login.\n\nThe refresh token must be stored securely on the client side (e.g., in localStorage with proper security measures) and transmitted only over HTTPS. The server validates the refresh token against the member's record in the community_platform_member table, ensuring that the token's original session is still valid and that the account has not been deleted (deleted_at is null).\n\nThis payload is sent as the request body in a POST request to the /auth/member/refresh endpoint. The response contains a new access token with a fresh 30-minute expiration and potentially a new refresh token depending on system policy.\n\nNo additional properties are allowed beyond refreshToken, as the refresh operation relies solely on the token's validity, not on user credentials or additional data."},"ICommunityPlatformAdmin.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The email address that will be used as the unique identifier for the admin account.\n\nThis field is mandatory and must be a valid email address format. It serves as the primary login credential for the admin user, establishing their identity in the system. The email must be unique across all members and admins in the platform.\n\nDuring the admin registration process, this email is validated against the existing records in the community_platform_member table to ensure it is not already in use. It must adhere to the business rule that each email corresponds to exactly one user account.\n\nThis field is critical for authentication and is referenced in the community_platform_member table as the unique identifier. After registration, the admin will use this email to log in via the /auth/admin/login endpoint."},"password":{"type":"string","description":"The plain-text password provided by the user during admin registration.\n\nThis field is mandatory and must contain a secure password as defined by the platform's password policy. The password is never stored in plain text. Instead, the system hashes it using a cryptographic algorithm (e.g., bcrypt) before storing it in the password_hash field of the community_platform_member table.\n\nThe password must meet minimum security requirements (e.g., minimum length, inclusion of special characters, etc.) as defined in the system's authentication policy. The server will validate these requirements before allowing the registration to proceed.\n\nThis field is only used during the registration process and is not persisted or returned in any response. After hashing, it is discarded by the server.\n\nThe password is transmitted securely over HTTPS to protect it from interception during the registration flow."},"displayName":{"type":"string","maxLength":32,"description":"An optional display name that will be shown as the admin's identity in the UI.\n\nThis field is optional and allows the admin to set a custom identifier that will be displayed in the platform's user interface, such as in posts, comments, or member lists. If this field is not provided or is an empty string, the system will default to displaying the admin's email address as their identity.\n\nThe display name is limited to 32 characters to ensure it remains readable and does not disrupt the UI layout. It must consist of alphanumeric characters and common punctuation, excluding special characters that could cause rendering issues or security vulnerabilities.\n\nThe display name is stored in the display_name field of the community_platform_member table and is used only for presentation purposes. It does not serve any authentication or authorization function.\n\nIf provided, this value will be saved when the admin account is created. If omitted, the field will be stored as null in the database."}},"required":["email","password"],"description":"Request body for admin registration containing authentication credentials and optional display name as defined in the community_platform_member schema.\n\nThis object defines the payload required to register a new admin user on the community platform. It contains the essential authentication credentials: an email address and a password, along with an optional display name.\n\nThe registration process follows a two-step procedure defined by the Prisma schema:\n1. A member account is created in the community_platform_member table with the provided email, password_hash (hashed version of password), and optional display_name.\n2. A corresponding admin record is created in the community_platform_admin table that references the member_id from the newly created member account.\n\nThe email field serves as the unique identifier for the admin's authentication identity and must be unique across all user accounts in the system. The password must be provided in plain text and will be hashed server-side using a secure algorithm before storage. The display_name, if provided, allows the admin to customize their presentation in the UI.\n\nThis request body is sent to the /auth/admin/join endpoint during the admin registration process. The server validates the email format, checks for uniqueness against existing records, enforces password policies, and ensures the display_name (if provided) conforms to length constraints. Upon successful validation, the system creates both the member and admin records and returns an authentication token in the response.\n\nThe operation does not accept any additional properties beyond those defined in the schema, ensuring strict schema adherence and security."},"ICommunityPlatformAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for the authenticated admin user.\n\nThis field represents the UUID assigned to the admin user's member account in the community_platform_member table. It is used system-wide as the primary reference to identify the logged-in user across all operations and security contexts.\n\nThe id is NOT the admin's email address or any user-provided identifier, but the system-generated UUID that uniquely identifies the user record in the database. This ID is used in all authorization checks to validate ownership of content (e.g., posts, comments) and to enforce access controls.\n\nThis value should be included in the response of all authentication operations for admin users, providing the client with the necessary identifier to reference the admin's account in subsequent requests."},"member_id":{"$ref":"#/components/schemas/ICommunityPlatformAdminMemberId","description":"Reference to the underlying member account that possesses admin privileges. This links the admin record to its associated member account in the community_platform_member table.\n\nThe admin is not a separate identity but a privilege level granted to an existing member. This relationship enforces that admin privileges are tied to a specific user account with proper authentication credentials."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","member_id","token"],"description":"Authorization response containing JWT token.\n\nThis response is returned after successful authentication operations such as admin login, admin join, or token refresh.\n\nThe response contains two essential components:\n1. id: The system-generated UUID of the admin's member account, used to identify the user across the platform\n2. token: A JWT token that encodes authentication and authorization claims\n\nThe id field ensures the client has a persistent reference to the user's account in the database, enabling features such as:\n- Content ownership validation\n- Session management\n- Audit trails\n- Dependency tracking in relationships\n\nThe token field provides stateless authentication for all subsequent requests. It is signed with a shared secret and includes an expiration time (typically 30 minutes for access, 30 days for refresh) to balance security with user experience.\n\nThis structure follows the standardized IAuthorized response format across all roles (member, admin), ensuring consistency in authentication response handling throughout the application.\n\nNo other properties are included to maintain secure, minimal payload design. Sensitive information such as the password_hash, last_login_at, or deleted_at status is deliberately omitted from the response to prevent information leakage and adhere to security best practices."},"ICommunityPlatformAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The email address used to authenticate the admin user.\n\nThis field is mandatory and must be a valid email address format that exists in the system as a registered member account.\n\nThe email serves as the unique username for authentication purposes and must correspond to an entry in the community_platform_member table that has been granted admin privileges. The system validates this email against the stored records to locate the corresponding user account.\n\nThis field is case-insensitive for matching purposes but stored in its original format for display.\n\nThe email is the primary identifier for logging in, replacing the need for usernames or other identifiers. This approach simplifies user onboarding and improves recall for users."},"password":{"type":"string","description":"The plain-text password provided by the admin for authentication.\n\nThis field is mandatory and contains the password that the admin entered during the login process. The password is never stored in plain text in the database; instead, it is hashed using a secure algorithm (e.g., bcrypt) and stored as password_hash in the community_platform_member table.\n\nDuring the login process, the server receives this plain-text password, hashes it using the same algorithm, and compares the result with the stored password_hash for the user identified by the email. A match confirms the user's identity.\n\nThis field must meet the platform's password complexity policies (e.g., minimum length, character requirements) which are enforced at registration time. During login, the system validates that the password matches the stored hash.\n\nThe password is transmitted over secure HTTPS connections and is never logged or stored in the server's response.","minLength":8,"maxLength":128}},"required":["email","password"],"description":"Credentials for authenticating an existing admin account.\n\nThis object defines the payload required to authenticate an admin user on the community platform. It contains the two essential authentication fields: email and password.\n\nThe email field identifies the admin user's account in the database and must correspond to a member record that has been granted admin privileges (i.e., the id is referenced in the community_platform_admin table). The password field is the plain-text password provided by the user, which the server will compare against the stored password_hash in the community_platform_member table to validate identity.\n\nSecurity considerations include:\n- Transmission over HTTPS only to prevent interception\n- Proper password hashing on the server using industry-standard algorithms\n- Rate limiting to prevent brute force attacks\n- Session management with JWT tokens upon successful authentication\n\nThe operation validates:\n- Email format\n- Email existence and active status (deleted_at is null)\n- Password hash match\n\nOnly if all validations pass will the server issue a JWT access token (30min) and refresh token (30d). The response will not include the password_hash or any sensitive data.\n\nThis request body is sent to the /auth/admin/login endpoint during the admin login process. An empty or malformed request will return a 400 Bad Request error. Missing email or password will result in authentication failure with appropriate client-side messaging."},"ICommunityPlatformAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"The refresh token used to obtain a new access token.\n\nThis token is issued during the initial login or join operation and has a longer lifetime (typically 30 days). It must be presented to the refresh endpoint to obtain a new access token when the current one expires.\n\nThe refresh token is stored securely on the client side and must be included in the request body for the /auth/admin/refresh endpoint. It is a cryptographically signed JWT that contains the user's identity and issuer information.\n\nSecurity Note: Refresh tokens should be stored in secure HTTP-only cookies or encrypted local storage and never exposed in URLs or client-side logs.\n\nHistorical Note: This token allows users to maintain their authenticated session without needing to re-enter credentials frequently, improving user experience while maintaining security through short-lived access tokens."}},"required":["refresh_token"],"description":"Request body schema for refreshing an admin's access token.\n\nThis schema defines the structure of the request payload sent to the /auth/admin/refresh endpoint. It contains the refresh token that was issued during the initial authentication process.\n\nThe refresh token is a JWT (JSON Web Token) that has been signed by the server's private key and contains the user's ID, role, and expiration information.\n\nThis schema ensures that the refresh request contains the necessary credential information while excluding sensitive or unnecessary fields such as passwords or email addresses.\n\nNote: Only the refresh_token field is required for this operation; no other user information or authentication credentials should be included in this request."},"ICommunityPlatformUserRoleArray":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformUserRole"},"description":"Array of user role definitions.\n\nThis type represents a collection of user role definitions that are returned by the /communityPlatform/roles endpoint. It contains multiple instances of ICommunityPlatformUserRole objects, each describing a distinct role (guest, member, admin) in the system.\n\nEach role definition includes the role's unique identifier, role name (e.g., 'guest', 'member', 'admin'), and a detailed description of its permissions and responsibilities within the platform.\n\nThis array is used to provide client applications with a complete mapping of the role-based access control system, enabling them to properly display permission information and implement appropriate UI behaviors based on the user's role.\n\nThe order of roles in this array is not guaranteed to be meaningful; clients should identify roles by their role_name property rather than position in the array."},"ICommunityPlatformUserRole":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user role.\n\nThis UUID serves as the primary key in the community_platform_user_roles database table, uniquely identifying each role definition.\n\nThe role_id is system-generated and immutable, ensuring stable references across the system for authorization checks, audit logs, and related configurations.\n\nThis identifier is used internally by the system to maintain referential integrity between user accounts (which reference this ID in their role assignment) and the role definitions themselves."},"role_name":{"type":"string","description":"The precise role identifier that defines the permission set. Must be one of: 'guest', 'member', or 'admin'. This value is immutable and used to enforce access control rules throughout the system.\n\nThis string represents the canonical name of the role and serves as the primary way the system identifies and distinguishes between the three distinct permission profiles.\n\nThe value is case-sensitive and must exactly match one of the predefined role names:\n- 'guest': Unauthenticated user with read-only access\n- 'member': Authenticated user with full participation rights\n- 'admin': Privileged user with elevated permissions\n\nThese values are hardcoded in the system to ensure consistency in access control policy enforcement.\n\nThe role_name is used in API authorization validation, UI component behavior, and business logic decision-making."},"description":{"type":"string","description":"A human-readable description of the role's permissions and responsibilities within the platform. Clearly defines what actions users with this role can perform.\n\nThis description provides detailed context about the capabilities and limitations associated with each role, serving as documentation for both developers and administrators.\n\nFor example, the description for 'member' would explain that members can create posts, comment, vote, join communities, and create new communities, while guests can only view content.\n\nThe description is used in administrative interfaces to help explain role assignments to team members and in client applications to provide users with context about their access level.\n\nThe description is written in natural language and can include detailed explanations of permission boundaries and restrictions, such as 'only the original creator can edit community metadata' or 'admin can delete any post regardless of ownership'."}},"required":["id","role_name","description"],"description":"Definition of a single user role in the community platform.\n\nThis schema represents a complete definition of one of the platform's three user roles: guest, member, or admin. Each role has a unique identifier, a canonical name, and a detailed description of its permissions.\n\nThe role definitions are stored in the community_platform_user_roles table and are immutable once created. These definitions form the foundation of the platform's role-based access control system, determining what actions users can perform.\n\nThis schema is used to transfer role metadata from the server to clients, typically when listing all roles or retrieving information about a specific role by ID.\n\nThe structure ensures all necessary information is provided for implementing access control logic on both server and client sides, including identifying permissions boundaries, understanding role hierarchies, and building appropriate user interfaces based on role capabilities."},"ICommunityPlatformGuestIRequest":{"type":"object","properties":{"ip_address":{"type":"string","description":"IP address of the guest user for filtering search results.\n\nThis field allows administrators to filter guest sessions by the IP address from which they accessed the platform. It can be used to identify patterns of activity, detect potential abuse, or investigate suspicious behavior.\n\nThe IP address is captured during guest session creation in the community_platform_guest table and stored as a string value. This filter supports exact matches or partial matching for IP ranges.\n\nExample valid values: \"192.168.1.100\", \"10.0.0.1\", \"203.0.113.42\".\n\nNote: This field is only relevant for administrative searches and is not exposed to regular users. When using this filter, the requesting user must have admin privileges."},"created_at_min":{"type":"string","format":"date-time","description":"Minimum timestamp for filtering guest sessions by creation time.\n\nThis filter parameter allows administrators to search for guest sessions that were created on or after the specified date and time.\n\nThe timestamp must be provided in ISO 8601 format (e.g., \"2023-12-01T08:30:00Z\"). This enables querying for guests who accessed the service during specific time periods for analytics or security investigations.\n\nThis parameter can be used independently or in conjunction with created_at_max to define a time range for guest session searches. When not provided, there is no lower bound on creation time."},"created_at_max":{"type":"string","format":"date-time","description":"Maximum timestamp for filtering guest sessions by creation time.\n\nThis filter parameter allows administrators to search for guest sessions that were created on or before the specified date and time.\n\nThe timestamp must be provided in ISO 8601 format (e.g., \"2023-12-31T23:59:59Z\"). This enables querying for guests who accessed the service during specific time periods for analytics or security investigations.\n\nThis parameter can be used independently or in conjunction with created_at_min to define a time range for guest session searches. When not provided, there is no upper bound on creation time."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination of search results.\n\nThis parameter controls which page of search results is returned, with the first page being 1.\n\nThe server returns a maximum of 20 guest sessions per page as defined by standard pagination rules. This parameter must be an integer greater than or equal to 1.\n\nWhen omitted, the server defaults to page 1. If a page number exceeds the total available pages, an empty result set is returned with appropriate pagination metadata."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of guest sessions to return per page.\n\nThis parameter controls the size of each result page when searching guest sessions.\n\nValid values range from 1 to 100, with a default of 20 if the parameter is omitted. This allows administrators to customize the volume of data returned in each API response for performance optimization or display purposes.\n\nNote: Exceeding the maximum limit of 100 will result in a 400 Bad Request error response."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field by which to sort the guest session results.\n\nThis parameter determines the primary sort order for guest session search results. Valid values are:\n- \"created_at\": Sort by guest session creation time (descending)\n- \"ip_address\": Sort by IP address in alphabetical order\n\nThe default sort order is \"created_at\" descending (newest first). This field provides flexibility for administrators to analyze guest patterns based on different criteria.\n\nWhen sorting by created_at, the system uses the created_at field from the community_platform_guest table, which records when each guest session was initiated."},{"const":"ip_address","description":"Field by which to sort the guest session results.\n\nThis parameter determines the primary sort order for guest session search results. Valid values are:\n- \"created_at\": Sort by guest session creation time (descending)\n- \"ip_address\": Sort by IP address in alphabetical order\n\nThe default sort order is \"created_at\" descending (newest first). This field provides flexibility for administrators to analyze guest patterns based on different criteria.\n\nWhen sorting by created_at, the system uses the created_at field from the community_platform_guest table, which records when each guest session was initiated."}],"description":"Field by which to sort the guest session results.\n\nThis parameter determines the primary sort order for guest session search results. Valid values are:\n- \"created_at\": Sort by guest session creation time (descending)\n- \"ip_address\": Sort by IP address in alphabetical order\n\nThe default sort order is \"created_at\" descending (newest first). This field provides flexibility for administrators to analyze guest patterns based on different criteria.\n\nWhen sorting by created_at, the system uses the created_at field from the community_platform_guest table, which records when each guest session was initiated."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction for the search results.\n\nThis parameter determines whether the search results are ordered in ascending or descending order based on the field specified by sort_by.\n\nValid values are \"asc\" for ascending order and \"desc\" for descending order.\n\nWhen sort_by is \"created_at\", the default sort_order is \"desc\" (newest sessions first). When sort_by is \"ip_address\", the default is \"asc\" (alphabetical order).\n\nThis parameter allows administrative users to customize how guest session data is presented for analysis purposes."},{"const":"desc","description":"Sort direction for the search results.\n\nThis parameter determines whether the search results are ordered in ascending or descending order based on the field specified by sort_by.\n\nValid values are \"asc\" for ascending order and \"desc\" for descending order.\n\nWhen sort_by is \"created_at\", the default sort_order is \"desc\" (newest sessions first). When sort_by is \"ip_address\", the default is \"asc\" (alphabetical order).\n\nThis parameter allows administrative users to customize how guest session data is presented for analysis purposes."}],"description":"Sort direction for the search results.\n\nThis parameter determines whether the search results are ordered in ascending or descending order based on the field specified by sort_by.\n\nValid values are \"asc\" for ascending order and \"desc\" for descending order.\n\nWhen sort_by is \"created_at\", the default sort_order is \"desc\" (newest sessions first). When sort_by is \"ip_address\", the default is \"asc\" (alphabetical order).\n\nThis parameter allows administrative users to customize how guest session data is presented for analysis purposes."}},"required":[],"description":"Search and filtering criteria for retrieving guest sessions.\n\nThis schema defines the structure of the request body for the PATCH /communityPlatform/admin/guests endpoint, which enables administrators to perform complex searches across guest session records.\n\nThe schema provides a comprehensive set of optional filtering parameters including IP address, creation time ranges, and pagination controls. All parameters are optional, allowing flexible queries from simple to complex.\n\nThis approach enables administrators to conduct targeted investigations, analyze user access patterns, identify potential abuse, or generate usage statistics while ensuring data privacy and system performance through pagination and filtering.\n\nAll filters are applied in conjunction (AND logic), meaning only guest sessions meeting all specified criteria will be returned in the results."},"ICommunityPlatformMemberIRequest":{"type":"object","properties":{"search":{"type":"string","description":"Text search query to filter member accounts by email, display name, or other searchable fields. Must be at least 2 characters for meaningful results.\n\nThis search term is applied across relevant fields in the community_platform_member table including email and display_name using fuzzy matching to find partial matches."},"createdBefore":{"type":"string","format":"date-time","description":"Filter members created before this timestamp. Uses ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis enables finding older or newly registered users. For example, to find users who joined after a specific date, set this to the cutoff date."},"createdAfter":{"type":"string","format":"date-time","description":"Filter members created after this timestamp. Uses ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis enables finding recently registered users. For example, to find users who joined within the last week, set this to the date 7 days ago."},"lastLoginBefore":{"type":"string","format":"date-time","description":"Filter members whose last login was before this timestamp. Uses ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis enables identifying inactive users who have not logged in since a specific date, useful for engagement analysis or cleanup tasks."},"lastLoginAfter":{"type":"string","format":"date-time","description":"Filter members whose last login was after this timestamp. Uses ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis enables identifying recently active users, useful for engagement analysis or targeted communications."},"isActive":{"type":"boolean","description":"Filter members based on active status. When true, returns only members with deleted_at = null. When false, returns only deactivated members.\n\nThis value is determined by whether the user's account is marked as deleted in the community_platform_member table."},"sortBy":{"oneOf":[{"const":"created_at","description":"Field to sort the results by. Must be one of: 'created_at', 'last_login_at', or 'email'.\n\nThis determines the ordering of the paginated results, with 'created_at' being the default for new user analysis, 'last_login_at' for activity analysis, and 'email' for alphabetical sorting."},{"const":"last_login_at","description":"Field to sort the results by. Must be one of: 'created_at', 'last_login_at', or 'email'.\n\nThis determines the ordering of the paginated results, with 'created_at' being the default for new user analysis, 'last_login_at' for activity analysis, and 'email' for alphabetical sorting."},{"const":"email","description":"Field to sort the results by. Must be one of: 'created_at', 'last_login_at', or 'email'.\n\nThis determines the ordering of the paginated results, with 'created_at' being the default for new user analysis, 'last_login_at' for activity analysis, and 'email' for alphabetical sorting."}],"description":"Field to sort the results by. Must be one of: 'created_at', 'last_login_at', or 'email'.\n\nThis determines the ordering of the paginated results, with 'created_at' being the default for new user analysis, 'last_login_at' for activity analysis, and 'email' for alphabetical sorting."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sorting order for results. Must be either 'asc' (ascending) or 'desc' (descending).\n\nThis follows standard database sorting conventions where 'desc' shows most recent or highest values first."},{"const":"desc","description":"Sorting order for results. Must be either 'asc' (ascending) or 'desc' (descending).\n\nThis follows standard database sorting conventions where 'desc' shows most recent or highest values first."}],"description":"Sorting order for results. Must be either 'asc' (ascending) or 'desc' (descending).\n\nThis follows standard database sorting conventions where 'desc' shows most recent or highest values first."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination, starting at 1. This determines which set of results to return.\n\nUsed with limit to enable pagination of the result set. The maximum page limit is determined by the system's data size and performance constraints."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of results per page. Must be between 1 and 100, with a default of 20.\n\nThis controls the response size and performance characteristics. Higher values fetch more data per request but increase latency and resource usage."}},"required":[],"description":"Search criteria for finding member accounts, supporting advanced filtering and pagination for administrative purposes.\n\nThis request object is used in admin search operations to find members based on various criteria including creation time, login activity, and search terms.\n\nThe structure enables comprehensive user management workflow by allowing admins to filter active/inactive accounts, target users based on time periods, and paginate results efficiently.\n\nAll filter criteria are combined with AND logic - only members matching all specified conditions are returned. This is optimized for performance on the community_platform_member table."},"ICommunityPlatformMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the member account. This UUID is used to link the member to their posts, comments, and other activities within the platform. The system uses this identifier to enforce content ownership rules, ensuring users can only edit or delete their own content."},"email":{"type":"string","format":"email","description":"User's email address used for authentication and communication. Must be unique across all members.\n\nThis serves as the primary identifier for login and is used for sending system notifications and communications. The system enforces uniqueness to prevent multiple accounts with the same email."},"display_name":{"type":"string","description":"Optional display name for posts and comments. If empty, system defaults to 'Anonymous'. Length constrained to 32 characters by business rules.\n\nThis field allows members to customize how their name appears on posts and comments. If this field is null or empty, the system displays 'Anonymous' as the author name in all views. The maximum length of 32 characters ensures display consistency across all UI components."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was created. Used for user onboarding analytics and account age calculation.\n\nThis immutable timestamp represents when the account was initially registered in the system. It is used for generating account age statistics, determining eligibility for certain features, and understanding user retention patterns."},"last_login_at":{"type":"string","format":"date-time","description":"Timestamp of the member's last successful login. Used to determine session validity and user activity status.\n\nThis field is updated every time a member successfully authenticates. It helps identify inactive users and is used for session management, determining if the account is still in active use, and providing accurate data for user engagement analytics."}},"required":["id","email","created_at"],"description":"Member account entity that represents authenticated users with full participation rights including posting, commenting, voting, and joining communities. This table stores authentication credentials and user preferences. Member accounts own all content they create and can edit/delete only their own content.\n\nThis entity serves as the core representation of authenticated users within the community platform. It contains the essential authentication information needed to verify user identity, along with optional display preferences for how they appear to other users. The account is linked to all contributions made by the user, including posts, comments, and votes, ensuring proper ownership attribution.\n\nThe schema strictly excludes sensitive fields like password_hash from response types to maintain security. Authentication credentials are handled through authorization tokens, and password_hash exists only in the database for verification purposes."},"ICommunityPlatformMember.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Text search query to find members by email or display name. Must be at least 2 characters for meaningful results.\n\nThis query performs partial matching on both the email and display_name fields to support user discovery. For example, searching for 'john' will find users with email 'john@gmail.com' or display_name 'John Smith'."},"sortBy":{"oneOf":[{"const":"created_at","description":"Field to sort the results by. Must be either 'created_at' or 'email'.\n\n'created_at' sorts newest accounts first (upcoming/:desc), while 'email' sorts alphabetically. This enables efficient user enumeration in administrative interfaces."},{"const":"email","description":"Field to sort the results by. Must be either 'created_at' or 'email'.\n\n'created_at' sorts newest accounts first (upcoming/:desc), while 'email' sorts alphabetically. This enables efficient user enumeration in administrative interfaces."}],"description":"Field to sort the results by. Must be either 'created_at' or 'email'.\n\n'created_at' sorts newest accounts first (upcoming/:desc), while 'email' sorts alphabetically. This enables efficient user enumeration in administrative interfaces."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sorting order of results. Must be either 'asc' (ascending) or 'desc' (descending).\n\nDefault sort order is 'desc' for created_at (newest first) and 'asc' for email (A-Z)."},{"const":"desc","description":"Sorting order of results. Must be either 'asc' (ascending) or 'desc' (descending).\n\nDefault sort order is 'desc' for created_at (newest first) and 'asc' for email (A-Z)."}],"description":"Sorting order of results. Must be either 'asc' (ascending) or 'desc' (descending).\n\nDefault sort order is 'desc' for created_at (newest first) and 'asc' for email (A-Z)."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination, representing results to display. Minimum value is 1.\n\nUsed with limit parameter to navigate through large result sets, with 20 items per page as standard for user-friendly interfaces."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of results per page, maximum 100. Minimum is 1. Default is 20.\n\nThis controls the payload size and API performance, with limits to avoid overwhelming clients and servers with too much data in a single response."}},"required":[],"description":"Parameters for searching and filtering member accounts by search term and sorting options.\n\nThis request object is used in member search operations to find user accounts based on textual queries and sorting preferences. It supports paginated results for efficient data retrieval.\n\nThe search term matches against both email and display_name fields in the community_platform_member table for broad discoverability. Sorting defaults to creation date in descending order when sortBy is not specified, showing newest members first.\n\nThis structure supports the admin search endpoint /communityPlatform/admin/members and is consistent with the design pattern for searching user resources."},"ICommunityPlatformAdmin":{"type":"object","properties":{"id":{"$ref":"#/components/schemas/ICommunityPlatformAdminId","description":"Unique identifier for the admin record in UUID format. This is the primary key for the admin table.\n\nAutomatically generated by the system on admin privilege assignment and remains immutable throughout the admin's tenure."},"member_id":{"$ref":"#/components/schemas/ICommunityPlatformAdminMemberId","description":"Reference to the underlying member account that possesses admin privileges. This links the admin record to its associated member account in the community_platform_member table.\n\nThe admin is not a separate identity but a privilege level granted to an existing member. This relationship enforces that admin privileges are tied to a specific user account with proper authentication credentials."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when admin privileges were granted to this member, precise to the second in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).\n\nThis immutable field establishes when the user was elevated to admin status, providing a clear audit trail for privilege changes and system governance."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp when admin privileges were revoked (soft delete). If null, admin privileges are active; if set, they have been removed but audit trail is preserved.\n\nThis implements soft delete pattern to maintain integrity, allowing privilege revocation while preserving historical records for audit and compliance purposes.\n\nAdmin status:\n- deleted_at = null: Admin privileges are active\n- deleted_at = Date: Admin privileges have been revoked\n\nThe underlying member account remains intact and can be granted admin privileges again if needed."}},"required":["id","member_id","created_at"],"description":"An admin account representing elevated privileges granted to an existing member.\n\nThis object represents a member with additional system-level permissions, such as moderating content or managing communities. Admin accounts are not standalone identities but privilege levels assigned to existing member accounts.\n\nThe schema strictly follows the community_platform_admin table definition from the Prisma schema, with no additional or omitted fields. It maintains complete fidelity to the database structure.\n\nThe member_id field is a foreign key reference to a specific community_platform_member, ensuring the admin privilege is properly associated with an authenticated user account. The created_at and deleted_at fields support a comprehensive audit trail for privilege management."},"ICommunityPlatformCommunity.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Search term to match against community name and description.\n\nThis field is used to filter communities based on partial or full text matching of their name or description properties. The search supports fuzzy matching on alphanumeric characters, hyphens, and underscores.\n\nWhen provided, the system will return communities whose name or description contain the search term.\n\nMinimum length is 2 characters. If less than 2 characters are provided, the system will reject the request.\n\nThis parameter enables users to discover communities by topic, interest, or name.\n\nThe search term should be provided as a plain text string without special characters like wildcards or regex patterns.","minLength":2},"category":{"oneOf":[{"const":"Tech & Programming","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},{"const":"Science","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},{"const":"Movies & TV","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},{"const":"Games","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},{"const":"Sports","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},{"const":"Lifestyle & Wellness","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},{"const":"Study & Education","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},{"const":"Art & Design","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},{"const":"Business & Finance","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},{"const":"News & Current Affairs","description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."}],"description":"The predefined community category to filter by.\n\nThis field restricts search results to communities assigned to a specific category from the predefined list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nWhen this property is provided, only communities matching the specified category will be returned.\n\nThe category must exactly match one of the predefined values in the system. Any other value will be ignored or treated as invalid.\n\nThis property allows users to explore communities based on topic areas and interests in a structured way."},"sort":{"oneOf":[{"const":"nameMatch","description":"The sort order for the returned communities.\n\nThis property determines how the list of communities is ordered in the response.\n\nWhen 'nameMatch' is specified, communities are sorted by relevance to the search term using text similarity metrics, with best matches appearing first.\n\nWhen 'recentlyCreated' is specified, communities are sorted by creation date in descending order (newest first).\n\nIf neither value is provided, the system will default to 'nameMatch' for search queries and 'recentlyCreated' for unfiltered lists.\n\nThis property enables users to customize how community results are presented based on their discovery goals."},{"const":"recentlyCreated","description":"The sort order for the returned communities.\n\nThis property determines how the list of communities is ordered in the response.\n\nWhen 'nameMatch' is specified, communities are sorted by relevance to the search term using text similarity metrics, with best matches appearing first.\n\nWhen 'recentlyCreated' is specified, communities are sorted by creation date in descending order (newest first).\n\nIf neither value is provided, the system will default to 'nameMatch' for search queries and 'recentlyCreated' for unfiltered lists.\n\nThis property enables users to customize how community results are presented based on their discovery goals."}],"description":"The sort order for the returned communities.\n\nThis property determines how the list of communities is ordered in the response.\n\nWhen 'nameMatch' is specified, communities are sorted by relevance to the search term using text similarity metrics, with best matches appearing first.\n\nWhen 'recentlyCreated' is specified, communities are sorted by creation date in descending order (newest first).\n\nIf neither value is provided, the system will default to 'nameMatch' for search queries and 'recentlyCreated' for unfiltered lists.\n\nThis property enables users to customize how community results are presented based on their discovery goals."},"page":{"type":"integer","description":"The page number of results to retrieve.\n\nThis field specifies which page of paginated results should be returned. Pages are 1-indexed (i.e., the first page is 1, not 0).\n\nThe system returns 20 communities per page, as specified in the search requirements.\n\nIf this value is not provided, the system defaults to retrieving the first page (page = 1).\n\nThis pagination structure allows users to navigate through large result sets efficiently without loading all data at once.","minimum":1},"limit":{"type":"integer","description":"The maximum number of communities to return per page.\n\nThis property defines the page size for the search results. The system supports a maximum limit of 50 communities per page to prevent excessive payload sizes.\n\nWhen not specified, the system defaults to a limit of 20 communities per page, consistent with the design requirements for search results.\n\nThis property allows the client to control data volume and optimize performance based on display context and bandwidth constraints.","minimum":1,"maximum":50}},"required":[],"description":"Request schema for searching and filtering communities.\n\nThis object defines the parameters for querying and retrieving communities with advanced search and filtering capabilities. It supports filtering by community name, category, and sorting preferences, along with pagination controls.\n\nThe search capabilities allow content discovery across the entire platform, enabling users to find communities based on specific topics, interests, or names.\n\nThis request structure follows the pattern established for search operations in the system, using a request body rather than URL parameters to support complex queries that may exceed URL length limits.\n\nAll fields are optional, but at least one filter condition (search or category) should ideally be provided for meaningful results. When left unspecified, the system returns all communities sorted by default criteria."},"ICommunityPlatformCommunity.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"The unique alphanumeric identifier for the community.\n\nThis field defines the public name that users will use to access the community via URL and search.\n\nThe name must be 5-64 alphanumeric characters and may include hyphens (-) and underscores (_). No other special characters are permitted.\n\nThe name must be globally unique across the entire platform - if the supplied name already exists in the system, the creation will fail with a conflict error.\n\nThe name is immutable after creation and serves as the primary identifier for the community.\n\nThis value is required for community creation and cannot be left empty or null.","minLength":5,"maxLength":64,"pattern":"^[a-zA-Z0-9_-]+$"},"category":{"oneOf":[{"const":"Tech & Programming","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},{"const":"Science","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},{"const":"Movies & TV","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},{"const":"Games","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},{"const":"Sports","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},{"const":"Lifestyle & Wellness","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},{"const":"Study & Education","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},{"const":"Art & Design","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},{"const":"Business & Finance","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},{"const":"News & Current Affairs","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."}],"description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization allows users to browse communities by topic of interest and supports organized discovery.\n\nThe category value must exactly match one of the predefined values in the system. Any other value will be rejected.\n\nThis property is required for community creation to ensure proper organization and filtering across the platform."},"description":{"type":"string","description":"An optional summary of the community's purpose and focus.\n\nThis field provides additional context about the community's goals, rules, and discussion topics.\n\nThe description may contain up to 500 characters of plain text, including line breaks for formatting. No HTML, markdown, or special formatting is supported.\n\nWhen not provided, the system will leave this field as null. The community will display without any description in its UI.\n\nThis field helps potential members understand whether the community aligns with their interests before joining.","maxLength":500},"rules":{"type":"string","description":"Community guidelines presented as plain text with line breaks.\n\nThis field contains the community rules formatted as a multi-line string where each line represents one rule.\n\nA maximum of 20 rules is permitted. UI will only display the first 5 rules with numbering (1., 2., etc.), with a \"Show all\" link for additional rules if needed.\n\nOnly plain text with line breaks (\\n) is allowed. No HTML, markdown, or special formatting of rules is permitted.\n\nWhen not provided, the field will be set to null, and the community will display without rules.","maxLength":10000},"logo_url":{"type":"string","description":"The URL to the community's logo image.\n\nThis field provides an optional URL linking to the community's logo, which should be in PNG, JPG, or SVG format.\n\nThe URL string must be a valid web-accessible URL of up to 80,000 characters as defined by database schema.\n\nWhen not provided, the system will assign a default placeholder logo in the UI.\n\nThis field is for informational display only and is not used for authentication or authorization purposes.\n\nThe logo image itself is managed externally and validated only for format (URL) on creation, not for image content or existence.","maxLength":80000},"banner_url":{"type":"string","description":"The URL to the community's banner image.\n\nThis field provides an optional URL linking to the community's banner image, which should be in PNG or JPG format.\n\nThe URL string must be a valid web-accessible URL of up to 80,000 characters as defined by database schema.\n\nWhen not provided, the system will assign a default placeholder banner in the UI.\n\nThis field is for informational display only and is not used for authentication or authorization purposes.\n\nThe banner image itself is managed externally and validated only for format (URL) on creation, not for image content or existence.","maxLength":80000}},"required":["name","category"],"description":"Request schema for creating a new community.\n\nThis object defines the required and optional metadata for creating a new sub-community.\n\nThe 'name' and 'category' fields are mandatory because they define the community's identity and topic area.\n\nThe 'description', 'rules', 'logo_url', and 'banner_url' are optional fields that allow for richer community presentation.\n\nThe 'name' field is subject to strict format validation (alphanumeric, hyphen, and underscore only) and must be unique across the entire platform.\n\nThe 'category' must be one of the predefined values to ensure consistent community organization.\n\nNo other properties are allowed in this schema.\n\nAll fields use plain text exclusively - no HTML, scripts, or special formatting is allowed to maintain platform security and integrity."},"ICommunityPlatformCommunity":{"type":"object","properties":{"id":{"type":"string","description":"The unique identifier of the community.\n\nThis is a system-generated UUID that serves as the primary key for the community record in the database.\n\nThe id is immutable and assigned at the time of community creation.\n\nIt is never provided by the client and is always generated by the server.\n\nThis identifier is used internally to reference the community across all related operations and tables such as community_platform_posts, community_platform_user_communities, and community_platform_search_communities.\n\nThe UUID format ensures global uniqueness and enables distributed system reliability.","format":"uuid"},"name":{"type":"string","description":"The unique alphanumeric identifier for the community.\n\nThis field defines the public name that users will use to access the community via URL and search.\n\nThe name must be 5-64 alphanumeric characters and may include hyphens (-) and underscores (_). No other special characters are permitted.\n\nThe name is immutable after creation and serves as the primary identifier for the community.\n\nThis value is the human-readable identifier that appears in URLs, search results, and community listings.\n\nThe system enforces that each community name must be globally unique across the entire platform to avoid conflicts.","minLength":5,"maxLength":64,"pattern":"^[a-zA-Z0-9_-]+$"},"category":{"oneOf":[{"const":"Tech & Programming","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},{"const":"Science","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},{"const":"Movies & TV","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},{"const":"Games","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},{"const":"Sports","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},{"const":"Lifestyle & Wellness","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},{"const":"Study & Education","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},{"const":"Art & Design","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},{"const":"Business & Finance","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},{"const":"News & Current Affairs","description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."}],"description":"The predefined category that this community belongs to.\n\nThis field assigns the community to one of the platform's predefined topic categories: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization supports organized exploration and discovery of communities by user interest.\n\nThe category value is set during creation and cannot be changed after the community is created.\n\nThese categories represent the core topic areas the platform supports to facilitate focused community formation."},"description":{"type":"string","description":"An optional summary of the community's purpose and focus.\n\nThis field provides additional context about the community's goals, rules, and discussion topics.\n\nThe description may contain up to 500 characters of plain text, including line breaks for formatting. No HTML, markdown, or special formatting is supported.\n\nWhen not provided, the system will leave this field as null, and the community will display without any description in its UI.\n\nThis field helps potential members understand whether the community aligns with their interests before joining.","maxLength":500},"rules":{"type":"string","description":"Community guidelines presented as plain text with line breaks.\n\nThis field contains the community rules formatted as a multi-line string where each line represents one rule.\n\nA maximum of 20 rules is permitted. UI will only display the first 5 rules with numbering (1., 2., etc.), with a \"Show all\" link for additional rules if needed.\n\nOnly plain text with line breaks (\\n) is allowed. No HTML, markdown, or special formatting of rules is permitted.\n\nWhen not provided, the field will be set to null, and the community will display without rules.","maxLength":10000},"logo_url":{"type":"string","description":"The URL to the community's logo image.\n\nThis field provides an optional URL linking to the community's logo, which should be in PNG, JPG, or SVG format.\n\nThe URL string must be a valid web-accessible URL of up to 80,000 characters as defined by database schema.\n\nWhen not provided, the system will assign a default placeholder logo in the UI.\n\nThis field is for informational display only and is not used for authentication or authorization purposes.\n\nThe logo image itself is managed externally and validated only for format (URL) on creation, not for image content or existence.","maxLength":80000},"banner_url":{"type":"string","description":"The URL to the community's banner image.\n\nThis field provides an optional URL linking to the community's banner image, which should be in PNG or JPG format.\n\nThe URL string must be a valid web-accessible URL of up to 80,000 characters as defined by database schema.\n\nWhen not provided, the system will assign a default placeholder banner in the UI.\n\nThis field is for informational display only and is not used for authentication or authorization purposes.\n\nThe banner image itself is managed externally and validated only for format (URL) on creation, not for image content or existence.","maxLength":80000},"member_count":{"type":"integer","description":"The current number of members who have joined this community.\n\nThis field represents an immediately-updated count of active members associated with the community.\n\nThe count is maintained atomically in the community_platform_community_stats table to ensure efficient display performance.\n\nFor display purposes, numbers of 1,000 or more will be abbreviated using K and M suffixes (e.g., 1,000 → 1k, 10,000 → 10k, 1,000,000 → 1m), but the API returns the raw numeric value for calculative purposes.\n\nThis count is updated in real-time when users join or leave the community.\n\nThe value cannot be less than zero, and the system ensures that this field is always accurate through atomic updates.\n\nThe count only includes active members (where deleted_at is null in community_platform_user_communities).","minimum":0},"created_at":{"type":"string","description":"The timestamp when this community was created.\n\nThis field records the exact moment the community was created in the system using ISO 8601 format in UTC.\n\nThe created_at timestamp is immutable and set only at creation time.\n\nIt is used for chronological sort order, display of community age, and internal analytics.\n\nThis field is automatically generated by the system and cannot be modified by clients.","format":"date-time"}},"required":["id","name","category","member_count","created_at"],"description":"Full representation of a community entity.\n\nThis schema defines the complete structure of a community as returned in responses, containing both user-provided metadata and system-managed fields.\n\nAll fields are defined based on the community_platform_communities and community_platform_community_stats tables in the Prisma schema.\n\nThis representation is used in community detail views, search results, and user profile displays.\n\nThe system does not expose the creator's ID or any user-specific information in this response to maintain privacy and user autonomy.\n\nThe member_count is derived from the denormalized community_platform_community_stats table to ensure performance and accuracy without complex joins."},"ICommunityPlatformCommunity.IUpdate":{"type":"object","properties":{"description":{"type":"string","description":"An optional summary of the community's purpose and focus.\n\nThis field provides additional context about the community's goals, rules, and discussion topics.\n\nThe description may contain up to 500 characters of plain text, including line breaks for formatting. No HTML, markdown, or special formatting is supported.\n\nWhen not provided, the system will leave this field unchanged.\n\nWhen provided as null, the system will clear the description (set it to null).\n\nThis field helps potential members understand whether the community aligns with their interests before joining.","maxLength":500},"rules":{"type":"string","description":"Community guidelines presented as plain text with line breaks.\n\nThis field contains the community rules formatted as a multi-line string where each line represents one rule.\n\nA maximum of 20 rules is permitted. UI will only display the first 5 rules with numbering (1., 2., etc.), with a \"Show all\" link for additional rules if needed.\n\nOnly plain text with line breaks (\\n) is allowed. No HTML, markdown, or special formatting of rules is permitted.\n\nWhen not provided, the system will leave this field unchanged.\n\nWhen provided as null, the system will clear the rules (set it to null).\n\nThis field allows community creators to update or remove their community guidelines over time as the community evolves.\n\nNote: This field is stored as a single text field with line breaks and will only be displayed with numbering (1., 2., etc.) for the first 5 lines in the UI.","maxLength":10000},"logo_url":{"type":"string","description":"The URL to the community's logo image.\n\nThis field provides an optional URL linking to the community's logo, which should be in PNG, JPG, or SVG format.\n\nThe URL string must be a valid web-accessible URL of up to 80,000 characters as defined by database schema.\n\nWhen not provided, the system will leave this field unchanged.\n\nWhen provided as null, the system will clear the logo (set it to null) and revert to the default placeholder logo in the UI.\n\nThis field is for informational display only and is not used for authentication or authorization purposes.\n\nThe logo image itself is managed externally and validated only for format (URL) on update, not for image content or existence.","maxLength":80000},"banner_url":{"type":"string","description":"The URL to the community's banner image.\n\nThis field provides an optional URL linking to the community's banner image, which should be in PNG or JPG format.\n\nThe URL string must be a valid web-accessible URL of up to 80,000 characters as defined by database schema.\n\nWhen not provided, the system will leave this field unchanged.\n\nWhen provided as null, the system will clear the banner (set it to null) and revert to the default placeholder banner in the UI.\n\nThis field is for informational display only and is not used for authentication or authorization purposes.\n\nThe banner image itself is managed externally and validated only for format (URL) on update, not for image content or existence.","maxLength":80000}},"required":[],"description":"Request schema for partially updating a community's editable metadata.\n\nThis object defines the fields that can be modified after a community has been created.\n\nOnly four fields are allowed for update: description, rules, logo_url, and banner_url.\n\nThe community name is immutable and cannot be changed through this operation.\n\nEach field in this schema is optional. If a field is omitted from the request, it will remain unchanged.\n\nTo clear a field (e.g., remove an existing logo), send the field with a value of null.\n\nThis schema implements a partial update pattern (similar to PATCH), allowing clients to modify only the fields they wish to change.\n\nThe system enforces ownership rules: only the original creator of the community can perform this update.\n\nThis request structure takes advantage of the flexible nature of partial updates, minimizing data transmission and allowing precise control over modifications."},"ICommunityPlatformCommunityPlatformUserCommunityIRequest":{"type":"object","properties":{"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of items to return per page. Must be between 1 and 100. Default is 5 for the 'Recent Communities' sidebar.\n\nThis value determines pagination size for the user communities list. The system enforces a maximum limit of 100 to prevent excessive load, while the business requirement for 'Recent Communities' is to display up to 5 communities, so this parameter allows flexible pagination for administrative interfaces while maintaining the default of 5 for the main user interface.\n\nThe limit directly controls how many community records are fetched in a single request from the community_platform_user_communities table. It's crucial for performance optimization in both the main application and administrative dashboards."},"offset":{"type":"integer","minimum":0,"description":"Number of items to skip before starting to return results.\n\nThis parameter implements pagination by specifying the starting point for the result set. In the context of the 'Recent Communities' feature, this is typically used for 'Load more' functionality or administrative pagination of user membership data. The offset works in conjunction with the limit parameter to support efficient data retrieval from the community_platform_user_communities table.\n\nFor the main 'Recent Communities' sidebar (limited to 5 communities), this value is typically 0, but when implementing pagination through 'Load more' buttons in administrative interfaces, this value increases in steps of the limit size to fetch subsequent pages."},"sort":{"oneOf":[{"const":"last_interaction_at","description":"Sorting direction for the communities list.\n\nThis property defines how the communities are ordered in the returned result set. Per business requirements, the 'Recent Communities' list must be ordered by most recent activity (last_interaction_at), which is the default sorting option. The alternate option 'created_at' allows for historical analysis in administrative contexts, showing communities in order of when the membership was first established.\n\nThe sorting is always descending (newest first) as required by the 'Recent Communities' functionality. The sort parameter is critical for implementing the dynamic community list that reflects user activity patterns accurately. This value is derived from fields in the community_platform_user_communities table."},{"const":"created_at","description":"Sorting direction for the communities list.\n\nThis property defines how the communities are ordered in the returned result set. Per business requirements, the 'Recent Communities' list must be ordered by most recent activity (last_interaction_at), which is the default sorting option. The alternate option 'created_at' allows for historical analysis in administrative contexts, showing communities in order of when the membership was first established.\n\nThe sorting is always descending (newest first) as required by the 'Recent Communities' functionality. The sort parameter is critical for implementing the dynamic community list that reflects user activity patterns accurately. This value is derived from fields in the community_platform_user_communities table."}],"description":"Sorting direction for the communities list.\n\nThis property defines how the communities are ordered in the returned result set. Per business requirements, the 'Recent Communities' list must be ordered by most recent activity (last_interaction_at), which is the default sorting option. The alternate option 'created_at' allows for historical analysis in administrative contexts, showing communities in order of when the membership was first established.\n\nThe sorting is always descending (newest first) as required by the 'Recent Communities' functionality. The sort parameter is critical for implementing the dynamic community list that reflects user activity patterns accurately. This value is derived from fields in the community_platform_user_communities table."},"direction":{"oneOf":[{"const":"asc","description":"Sort direction, either ascending or descending.\n\nWhile the primary business requirement specifies descending order (newest first) for the 'Recent Communities' list, this parameter provides flexibility for administrative tools and custom reports. By default, this should be set to 'desc' to comply with the requirement that communities are ordered by most recent activity, but the ability to switch to 'asc' enables analysis of user membership history from oldest to newest.\n\nThis parameter works in conjunction with the sort property to precisely control the sequence of returned community records from the database query on community_platform_user_communities table."},{"const":"desc","description":"Sort direction, either ascending or descending.\n\nWhile the primary business requirement specifies descending order (newest first) for the 'Recent Communities' list, this parameter provides flexibility for administrative tools and custom reports. By default, this should be set to 'desc' to comply with the requirement that communities are ordered by most recent activity, but the ability to switch to 'asc' enables analysis of user membership history from oldest to newest.\n\nThis parameter works in conjunction with the sort property to precisely control the sequence of returned community records from the database query on community_platform_user_communities table."}],"description":"Sort direction, either ascending or descending.\n\nWhile the primary business requirement specifies descending order (newest first) for the 'Recent Communities' list, this parameter provides flexibility for administrative tools and custom reports. By default, this should be set to 'desc' to comply with the requirement that communities are ordered by most recent activity, but the ability to switch to 'asc' enables analysis of user membership history from oldest to newest.\n\nThis parameter works in conjunction with the sort property to precisely control the sequence of returned community records from the database query on community_platform_user_communities table."},"community_name":{"type":"string","minLength":5,"maxLength":64,"pattern":"^[a-zA-Z0-9_-]+$","description":"Filter communities by name pattern.\n\nThis optional parameter allows filtering the list of communities to only those matching the specified name pattern. The name must follow the alphanumeric format with hyphen and underscore allowed (5 to 64 characters), matching the exact constraints of the community_platform_communities.name field.\n\nThis filter is particularly useful in administrative interfaces where users need to quickly find membership records for specific communities. The pattern matching is implemented via database queries on the community_platform_user_communities table joined with community_platform_communities to match the name field.\n\nThis parameter is not used in the primary 'Recent Communities' sidebar which shows all joined communities without filtering, but it's essential for admin panels and detailed analytics."}},"required":["limit","offset","sort","direction"],"description":"Request parameters for searching and filtering user communities with pagination and sorting.\n\nThis schema defines the structure of the request body for the /communityPlatform/member/users/{userId}/communities endpoint when using the PATCH method. It enables advanced filtering of a user's community memberships based on pagination, sorting, and filtering criteria.\n\nThe schema follows the business requirement to display up to 5 communities in the 'Recent Communities' sidebar, but also supports broader administrative use cases through customizable pagination and sorting options. All parameters are consistent with the structure of the community_platform_user_communities database table which tracks the relationship between users and communities.\n\nThe required parameters ensure that every query has explicit pagination control to prevent performance issues, while the optional community_name filter provides additional flexibility for administrative tools. This design allows for efficient data retrieval from the database without requiring multiple queries or complicated joins.\n\nKey business rules this schema implements:\n- Limits maximum results to prevent overloading (max limit: 100)\n- Enforces consistent pagination patterns\n- Requires explicit sort criteria\n- Validates community name format against business rules\n- Enables administrative filtering capabilities\n\nThis schema is used exclusively for the 'search' operation on user communities and represents the complete set of parameters needed to query the community_platform_user_communities table effectively."},"ICommunityPlatformCommunityPlatformUserCommunity":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user-community membership record.\n\nThis field represents the primary key in the community_platform_user_communities database table. Each record in this junction table has a unique UUID identifier that serves as a reference point for system operations and audit logs.\n\nThis ID is automatically generated by the system when a new membership relationship is established and is used internally for all database operations. It's not exposed to users in the UI but is necessary for system integrity and potential administrative queries.\n\nThe UUID format ensures global uniqueness and is used consistently across all system records, following the design pattern in the underlying Prisma schema."},"community_platform_user_id":{"type":"string","format":"uuid","description":"Foreign key reference to the user who has membership in the community.\n\nThis field links the membership record to a specific member in the community_platform_member table. It represents the user who has joined (or previously joined) the community and whose activity is tracked in this membership relationship.\n\nThis field is critical for enforcing the ownership rules in the system, ensuring that only authenticated users can access their own membership data. The user_id must correspond to a valid member account with no deleted_at timestamp (active account).\n\nThis relationship enables the system to determine which communities belong to which users for the purpose of the Home feed and 'Recent Communities' list functionality."},"community_platform_community_id":{"type":"string","format":"uuid","description":"Foreign key reference to the community the user has joined.\n\nThis field links the membership record to a specific community in the community_platform_communities table. It represents the community for which this user has membership status.\n\nThe community_id must correspond to an existing and active community in the system (not deleted). This relationship enables the system to determine which posts to include in a user's Home feed and to populate the 'Recent Communities' sidebar.\n\nThe system uses this field to join with other tables for data retrieval and to enforce the business rule that users can only interact with communities they have access to."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the membership relationship was established.\n\nThis field records when the user first joined the community. It's immutable once set and represents the historical point of entry into the community.\n\nThis timestamp is used for audit trails and historical analysis of user engagement patterns. It does not affect the display order in the 'Recent Communities' list, which uses last_interaction_at instead, but it's essential for understanding the timeline of user participation.\n\nThis field directly maps to the created_at column in the community_platform_user_communities database table."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this membership record was last updated.\n\nThis field is automatically updated whenever there's any activity related to the user in this community—whether the user joined, posted, commented, or voted. It's also updated when the user leaves and rejoins the community.\n\nThis field works in conjunction with last_interaction_at to maintain data integrity. While last_interaction_at is updated for all user activities in the community, updated_at is a broader timestamp that reflects any change to the membership record.\n\nThis field is critical for determining when user activity occurred and ensuring the 'Recent Communities' list remains accurate."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the user left the community, marking membership as inactive.\n\nThis field implements a soft delete pattern for community memberships. When a user leaves a community, this field is set to the current timestamp, indicating that the membership is no longer active, but the record is preserved for audit purposes.\n\nA null value indicates an active membership, while any non-null value indicates the user has left the community. This design allows users to rejoin communities and maintains a complete history of community interactions.\n\nThis field follows the business rule that membership is managed through a soft-delete mechanism rather than physical deletion, enabling data persistence for analytics and compliance purposes."},{"type":"null"}],"description":"Timestamp when the user left the community, marking membership as inactive.\n\nThis field implements a soft delete pattern for community memberships. When a user leaves a community, this field is set to the current timestamp, indicating that the membership is no longer active, but the record is preserved for audit purposes.\n\nA null value indicates an active membership, while any non-null value indicates the user has left the community. This design allows users to rejoin communities and maintains a complete history of community interactions.\n\nThis field follows the business rule that membership is managed through a soft-delete mechanism rather than physical deletion, enabling data persistence for analytics and compliance purposes."},"last_interaction_at":{"type":"string","format":"date-time","description":"Timestamp of the user's most recent activity within this community.\n\nThis field is updated whenever the user engages with the community in any way: joining, posting, commenting, or voting. It determines the ordering of communities in the 'Recent Communities' sidebar, where the most recently active communities appear first.\n\nEach time the user takes an action in the community (creating a post, commenting on a post, or voting on a post or comment), this timestamp is updated to reflect the most recent engagement. This ensures the 'Recent Communities' list accurately represents the user's current interests and activity patterns.\n\nThis field directly supports the business requirement that the 'Recent Communities' list displays communities ordered by most recent activity, which is critical for personalized content discovery."}},"required":["id","community_platform_user_id","community_platform_community_id","created_at","updated_at","last_interaction_at"],"description":"Membership record representing a user's relationship with a community.\n\nThis schema defines the data structure returned when accessing a user's community membership through the system. It represents a record in the community_platform_user_communities junction table that establishes the relationship between a member and a community.\n\nThe schema includes all essential fields from the underlying database table, including timestamps for when membership was created and last updated, a soft delete marker for when a user leaves a community, and a crucial last_interaction_at field that tracks the user's most recent activity in the community. This field is specifically designed to enable the 'Recent Communities' feature by ordering communities based on activity.\n\nThe schema follows the business requirement that membership is preserved through soft deletion, allowing users to leave and rejoin communities without losing history. It also supports the ability to track engagement patterns across communities, enabling personalized feed content.\n\nEach field corresponds exactly to its respective column in the community_platform_user_communities table, ensuring complete fidelity with the database schema. The structure is simple and focused, containing only the essential information needed to represent the membership relationship.\n\nThis object is used in responses from endpoints that return membership information, such as retrieving a user's recent communities or listing all communities a user has joined. It provides the complete context needed to implement the home feed filtering and recent communities UI components."},"ICommunityPlatformCommunityPlatformPostIRequest":{"type":"object","properties":{"query":{"type":"string","minLength":2,"maxLength":255,"description":"Search term to find posts matching the query string.\n\nThis parameter enables full-text search across post titles and bodies, with a minimum of 2 characters to prevent noisy, low-quality searches. The search is implemented using PostgreSQL's pg_trgm extension for fuzzy matching, ensuring results are returned even with partial matches or typos.\n\nThe max length of 255 characters prevents excessively long queries that could impact performance or be used for malicious purposes. This parameter supports the platform's global search functionality and is the primary mechanism for users to discover content across the entire platform.\n\nWhen used for the /s/posts tab, this query matches against both title and body fields in the community_platform_search_posts materialized view, providing comprehensive search results. The system returns 20 results per page, with a 'Load more' functionality for pagination."},"sort":{"oneOf":[{"const":"newest","description":"Sorting method for the returned posts.\n\nThis parameter determines how search results are ordered using two predefined methods:\n\n- 'newest': Sorts by created_at field in descending order (most recent first), with ties broken by the post ID descending.\n- 'top': Sorts by score (upvotes minus downvotes) in descending order, with ties broken by created_at descending and then by post ID descending.\n\nThis directly implements the business requirements for the 'Newest' and 'Top' sort options, aligning with the user experience defined in the home feed and search interfaces. The sorting algorithms are cached and optimized in the community_platform_search_posts materialized view for performance.\n\nThis parameter is essential for the search feature's core functionality, allowing users to prioritize either recency or community-driven popularity of posts."},{"const":"top","description":"Sorting method for the returned posts.\n\nThis parameter determines how search results are ordered using two predefined methods:\n\n- 'newest': Sorts by created_at field in descending order (most recent first), with ties broken by the post ID descending.\n- 'top': Sorts by score (upvotes minus downvotes) in descending order, with ties broken by created_at descending and then by post ID descending.\n\nThis directly implements the business requirements for the 'Newest' and 'Top' sort options, aligning with the user experience defined in the home feed and search interfaces. The sorting algorithms are cached and optimized in the community_platform_search_posts materialized view for performance.\n\nThis parameter is essential for the search feature's core functionality, allowing users to prioritize either recency or community-driven popularity of posts."}],"description":"Sorting method for the returned posts.\n\nThis parameter determines how search results are ordered using two predefined methods:\n\n- 'newest': Sorts by created_at field in descending order (most recent first), with ties broken by the post ID descending.\n- 'top': Sorts by score (upvotes minus downvotes) in descending order, with ties broken by created_at descending and then by post ID descending.\n\nThis directly implements the business requirements for the 'Newest' and 'Top' sort options, aligning with the user experience defined in the home feed and search interfaces. The sorting algorithms are cached and optimized in the community_platform_search_posts materialized view for performance.\n\nThis parameter is essential for the search feature's core functionality, allowing users to prioritize either recency or community-driven popularity of posts."},"page":{"type":"integer","minimum":1,"maximum":1000,"description":"Page number for pagination, starting from 1.\n\nThis parameter implements paginated search results by dividing the results into 20-item pages as required by the KPI. The page number must be between 1 and 1000 to prevent excessively large result sets that could impact performance.\n\nThe system responds with 20 items per page, and when a user clicks 'Load more', the page parameter increments by 1 to fetch the next set of results. This design ensures consistent UI behavior across the platform and prevents performance issues from returning massive results in a single request.\n\nThe page parameter works in conjunction with the limit parameter (which is fixed at 20 for main feeds) to enable the infinite scroll pattern described in the requirements."},"limit":{"type":"integer","minimum":1,"maximum":100,"const":20,"description":"Number of items to return per page, fixed at 20 for main feeds.\n\nThis parameter defines the pagination size for search results and is absolutely fixed at 20 items per page, as specified in the requirements for main feed pagination. While the schema allows values between 1 and 100, the business requirement mandates exactly 20 items per page, so this field is constrained to a constant value of 20.\n\nThis ensures consistency in the user interface, where the number of posts visible at once remains constant throughout the application experience. The system ignores any client-side attempts to alter this value, enforcing it server-side for UI predictability and performance optimization.\n\nThis limit value is specifically intended for the main posts feed, including the home feed and explore feed where displaying more than 20 items would overwhelm users and degrade the browsing experience."},"community_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional filter to restrict posts to a specific community.\n\nThis optional parameter allows users to search posts within a single community rather than across the entire platform. When included, the search is constrained to the community identified by the provided UUID.\n\nThis parameter is particularly relevant in the community-specific search context, such as when a user is on a particular community page and searches for content within that community. This narrows the result set to a specific sub-community while identifying the corresponding community in the database through the community_id field in the community_platform_search_posts table.\n\nWhen omitted, the search covers all communities, providing platform-wide results. The system uses this filter to efficiently query the community_platform_search_posts materialized view with optimized performance."},{"type":"null"}],"description":"Optional filter to restrict posts to a specific community.\n\nThis optional parameter allows users to search posts within a single community rather than across the entire platform. When included, the search is constrained to the community identified by the provided UUID.\n\nThis parameter is particularly relevant in the community-specific search context, such as when a user is on a particular community page and searches for content within that community. This narrows the result set to a specific sub-community while identifying the corresponding community in the database through the community_id field in the community_platform_search_posts table.\n\nWhen omitted, the search covers all communities, providing platform-wide results. The system uses this filter to efficiently query the community_platform_search_posts materialized view with optimized performance."},"author_name":{"oneOf":[{"type":"string","minLength":1,"maxLength":32,"description":"Optional filter to search for posts by specific author display name.\n\nThis parameter enables users to find posts created by a specific author, specified by their display name (which becomes 'Anonymous' if not set). The search queries the author_name field in the community_platform_search_posts materialized view, which mirrors the author_display_name field from community_platform_posts table.\n\nThe length constraint of 32 characters matches the business rule for author display names, which have a maximum length of 32 characters. This parameter is particularly valuable in searches where users want to find content from specific contributors to the platform.\n\nWhen used in conjunction with the query parameter, it allows for advanced searches like finding posts by a specific author on a particular topic, enabling precise content discovery."},{"type":"null"}],"description":"Optional filter to search for posts by specific author display name.\n\nThis parameter enables users to find posts created by a specific author, specified by their display name (which becomes 'Anonymous' if not set). The search queries the author_name field in the community_platform_search_posts materialized view, which mirrors the author_display_name field from community_platform_posts table.\n\nThe length constraint of 32 characters matches the business rule for author display names, which have a maximum length of 32 characters. This parameter is particularly valuable in searches where users want to find content from specific contributors to the platform.\n\nWhen used in conjunction with the query parameter, it allows for advanced searches like finding posts by a specific author on a particular topic, enabling precise content discovery."},"created_after":{"oneOf":[{"type":"string","format":"date-time","description":"Filter posts created after the specified timestamp.\n\nThis optional parameter enables users to search for posts from a specific time period forward. The value must be a valid ISO 8601 date-time string representing the starting point for the search.\n\nThis filter is particularly useful for exploring recent content, reviewing activity during a specific period, or auditing platform activity. It's applied on the created_at field in the community_platform_search_posts materialized view for efficient range queries.\n\nWhen used with created_before, this forms a time range filter. This functionality supports advanced reports and administrative analytics where users need to examine activity within specific date boundaries."},{"type":"null"}],"description":"Filter posts created after the specified timestamp.\n\nThis optional parameter enables users to search for posts from a specific time period forward. The value must be a valid ISO 8601 date-time string representing the starting point for the search.\n\nThis filter is particularly useful for exploring recent content, reviewing activity during a specific period, or auditing platform activity. It's applied on the created_at field in the community_platform_search_posts materialized view for efficient range queries.\n\nWhen used with created_before, this forms a time range filter. This functionality supports advanced reports and administrative analytics where users need to examine activity within specific date boundaries."},"created_before":{"oneOf":[{"type":"string","format":"date-time","description":"Filter posts created before the specified timestamp.\n\nThis optional parameter enables users to search for posts from a specific time period backward. The value must be a valid ISO 8601 date-time string representing the end point for the search.\n\nThis filter is particularly useful for reviewing old content, comparing time periods, or pagination of historical data. It's applied on the created_at field in the community_platform_search_posts materialized view.\n\nWhen used with created_after, this forms a complete time range filter. This functionality supports advanced reporting capabilities and administrative reviews of past activity on the platform."},{"type":"null"}],"description":"Filter posts created before the specified timestamp.\n\nThis optional parameter enables users to search for posts from a specific time period backward. The value must be a valid ISO 8601 date-time string representing the end point for the search.\n\nThis filter is particularly useful for reviewing old content, comparing time periods, or pagination of historical data. It's applied on the created_at field in the community_platform_search_posts materialized view.\n\nWhen used with created_after, this forms a complete time range filter. This functionality supports advanced reporting capabilities and administrative reviews of past activity on the platform."},"min_score":{"oneOf":[{"type":"integer","minimum":-100000,"maximum":100000,"description":"Minimum score threshold for returned posts.\n\nThis optional parameter filters posts to include only those with a score (upvotes minus downvotes) equal to or greater than the specified value. The range allows for negative values, accommodating posts with many downvotes.\n\nThis parameter is particularly valuable when using top sort mode to identify popular content. It enables users to exclusively see high-quality or widely-approved content, filtering out less popular posts. This matches the business requirement for the 'Top' sort option which prioritizes content by community approval.\n\nThe score is derived from the community_platform_post_stats denormalized table and is indexed for efficient filtering."},{"type":"null"}],"description":"Minimum score threshold for returned posts.\n\nThis optional parameter filters posts to include only those with a score (upvotes minus downvotes) equal to or greater than the specified value. The range allows for negative values, accommodating posts with many downvotes.\n\nThis parameter is particularly valuable when using top sort mode to identify popular content. It enables users to exclusively see high-quality or widely-approved content, filtering out less popular posts. This matches the business requirement for the 'Top' sort option which prioritizes content by community approval.\n\nThe score is derived from the community_platform_post_stats denormalized table and is indexed for efficient filtering."},"max_score":{"oneOf":[{"type":"integer","minimum":-100000,"maximum":100000,"description":"Maximum score threshold for returned posts.\n\nThis optional parameter filters posts to include only those with a score (upvotes minus downvotes) equal to or less than the specified value. The range allows for negative values, accommodating posts with many downvotes.\n\nThis parameter is useful for finding posts with limited community engagement or for studying low-scoring content. When combined with min_score, it creates a score range filter. This functionality supports analytics, moderation, and custom feed experiences for users who want to explore content beyond the most popular items.\n\nThe score constraint uses the denormalized score from the community_platform_post_stats table which is maintained in real-time by atomic updates."},{"type":"null"}],"description":"Maximum score threshold for returned posts.\n\nThis optional parameter filters posts to include only those with a score (upvotes minus downvotes) equal to or less than the specified value. The range allows for negative values, accommodating posts with many downvotes.\n\nThis parameter is useful for finding posts with limited community engagement or for studying low-scoring content. When combined with min_score, it creates a score range filter. This functionality supports analytics, moderation, and custom feed experiences for users who want to explore content beyond the most popular items.\n\nThe score constraint uses the denormalized score from the community_platform_post_stats table which is maintained in real-time by atomic updates."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Filter to retrieve a specific post by its unique identifier.\n\nThis optional parameter allows direct access to a single post using its unique UUID identifier. When provided, the system ignores all other search parameters and returns only the post matching the given id (if it exists and is not deleted).\n\nThis is primarily used for deep linking to specific posts from search results or external sources. It acts as a shortcut to bypass the standard search and filtering process while still validating the post's existence and accessibility.\n\nThe post_id must correspond to an existing record in the community_platform_posts table that has not been marked as deleted (deleted_at is null)."},{"type":"null"}],"description":"Filter to retrieve a specific post by its unique identifier.\n\nThis optional parameter allows direct access to a single post using its unique UUID identifier. When provided, the system ignores all other search parameters and returns only the post matching the given id (if it exists and is not deleted).\n\nThis is primarily used for deep linking to specific posts from search results or external sources. It acts as a shortcut to bypass the standard search and filtering process while still validating the post's existence and accessibility.\n\nThe post_id must correspond to an existing record in the community_platform_posts table that has not been marked as deleted (deleted_at is null)."}},"required":["query","sort","page","limit"],"description":"Search request parameters for posts with filtering and sorting.\n\nThis schema defines the structure of the request body for the /communityPlatform/posts endpoint when using the PATCH method for advanced search operations. It enables comprehensive filtering of posts by search term, sort order, pagination, and various criteria.\n\nAll parameters are designed to work with the community_platform_search_posts materialized view for optimal search performance. The schema enforces business requirements: 20 items per page, minimum 2-character search queries, and the two defined sort methods ('newest' and 'top').\n\nThe required parameters ensure consistent pagination and search functionality across the platform, while optional parameters provide advanced filtering capabilities for administrative and analytical use cases. This allows users to discover content efficiently through title and body full-text search, filtered by community, author, or time range.\n\nThis schema supports the platform's core search functionality on the /s page, enabling users to find posts across the entire system with responsive performance, even at scale. It represents the complete set of parameters needed to implement the search functionality as described in the business requirements."},"ICommunityPlatformPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post.\n\nThis field represents the primary key in the community_platform_posts database table. Each post on the platform is assigned a unique UUID identifier upon creation, which is used as the reference point for all interactions with the post, including comments, votes, and updates.\n\nThis ID is generated by the system and cannot be modified after creation. It serves as the immutable reference for linking the post with its associated data in related tables such as community_platform_comments and community_platform_post_votes.\n\nThe UUID format ensures global uniqueness across the entire platform and is consistent with the design pattern used throughout the system for entity identification."},"community_id":{"type":"string","format":"uuid","description":"Foreign key reference to the community where this post was created.\n\nThis field links the post to a specific sub-community in the community_platform_communities table. It determines which community's feed the post appears in and is critical for enforcing the business rule that each post must be associated with exactly one community.\n\nThe system validates that the community_id corresponds to an existing and active community (not deleted) before allowing a post to be created. This relationship enables the platform to organize content meaningfully and provides context for users navigating to specific communities.\n\nThis foreign key relationship ensures data integrity and enables efficient querying of all posts within a particular community for display purposes."},"author_id":{"type":"string","format":"uuid","description":"Foreign key reference to the member who authored this post.\n\nThis field links the post to the member account in the community_platform_member table that created the post. This connection enforces the business rule that users can only edit or delete their own content, as the owner of the post is the member with this ID.\n\nThe system uses this field to establish ownership and permission controls. When a user attempts to edit or delete a post, the system compares the authenticated user's ID with this author_id to verify authorization.\n\nThis relationship is also used to associate communities with their active contributors and for administrative functions, such as managing abusive behavior by identifying authors of objectionable content."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Title of the post, with a character limit of 5-120.\n\nThis field contains the headline of the post and must be at least 5 characters and no more than 120 characters in length, as specified by the business rules. The title serves as the primary summary of the post's content and is used for display in feeds, search results, and home pages.\n\nThe system validates this constraint at both client and server levels, preventing posts with titles that are too short or too long from being created. This ensures consistency in content presentation and improves the user experience by preventing overly long or meaningless titles.\n\nThe title field is indexed for full-text search to enable efficient discovery through the global search functionality on the /s page, matching against both the title and body fields in the community_platform_search_posts materialized view."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Content body of the post, with a character limit of 10-10,000.\n\nThis field contains the main text content of the post, which must be between 10 and 10,000 characters in length. It contains only plain text with line breaks (\\n); no HTML, JavaScript, or other executable code is allowed.\n\nThis constraint ensures posts contain meaningful content while preventing excessively long submissions that could degrade performance or overwhelm readability. The body field supports rich discussions while maintaining usability on various devices.\n\nThe system validates this constraint before save and strips any non-text elements from the content. This field is also used for full-text search in the community_platform_search_posts materialized view, enabling users to find posts based on their content."},"author_display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32,"description":"Optional display name for the author, with a maximum length of 32 characters.\n\nThis field allows the author to specify a custom display name that will appear with the post instead of their full email or Username. If not provided (null or empty), the system displays 'Anonymous' as the author name.\n\nThe 32-character limit ensures display names are concise and consistent with UI design requirements, preventing obscenely long names that could break layouts. This provides flexibility for authors to use pseudonyms or nicknames while maintaining accessibility.\n\nThis value is stored as provided in the database and only used for display purposes; it has no effect on user identity or permissions. The system never overwrites this field unless explicitly updated by the author."},{"type":"null"}],"description":"Optional display name for the author, with a maximum length of 32 characters.\n\nThis field allows the author to specify a custom display name that will appear with the post instead of their full email or Username. If not provided (null or empty), the system displays 'Anonymous' as the author name.\n\nThe 32-character limit ensures display names are concise and consistent with UI design requirements, preventing obscenely long names that could break layouts. This provides flexibility for authors to use pseudonyms or nicknames while maintaining accessibility.\n\nThis value is stored as provided in the database and only used for display purposes; it has no effect on user identity or permissions. The system never overwrites this field unless explicitly updated by the author."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the post was created.\n\nThis field records the exact date and time when the post was first created and persisted in the system. It's an immutable field that never changes, even when the post is edited later.\n\nThis timestamp is used for determining the 'Newest' sort order, ensuring posts are displayed in chronological sequence. It's also used in the 'Top' sort algorithm when tie-breaking among posts with identical scores.\n\nThe system automatically sets this value upon creation, and it's used to calculate relative timestamps displayed to users as 'X minutes ago' in their local timezone (Asia/Seoul)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the post was last updated.\n\nThis field is automatically updated every time the author modifies the post's title or body content. It tracks the most recent edit to the post, allowing users to know when content was last changed.\n\nThis field is used to display an 'edited' label on the UI (e.g., 'edited 3 hours ago') when the updated_at timestamp differs from created_at. It does not change for votes or comments on the post—only for edits to the post's core content.\n\nThe system ensures this timestamp is always updated atomically and reliably when a post is modified, enabling accurate tracking of content changes for transparency and moderation purposes."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the post was deleted.\n\nThis field implements a soft delete mechanism, distinguishing between active and deleted posts. When null, the post is active and visible in all feeds. When set to a timestamp, the post is considered deleted and is hidden from all user-facing views.\n\nThe system does not physically remove deleted posts from the database; instead, it uses this field to filter them out while preserving audit trail data for compliance and administrative purposes.\n\nThis approach allows for recovery of accidentally deleted posts while maintaining data integrity. When a post is deleted, the system sets this field to the current timestamp, triggers updates to related tables (such as community counts and search indexes), and prevents the post from appearing in any user's feed."},{"type":"null"}],"description":"Timestamp when the post was deleted.\n\nThis field implements a soft delete mechanism, distinguishing between active and deleted posts. When null, the post is active and visible in all feeds. When set to a timestamp, the post is considered deleted and is hidden from all user-facing views.\n\nThe system does not physically remove deleted posts from the database; instead, it uses this field to filter them out while preserving audit trail data for compliance and administrative purposes.\n\nThis approach allows for recovery of accidentally deleted posts while maintaining data integrity. When a post is deleted, the system sets this field to the current timestamp, triggers updates to related tables (such as community counts and search indexes), and prevents the post from appearing in any user's feed."}},"required":["id","community_id","author_id","title","body","created_at"],"description":"Full post object representing a user's contribution to a community.\n\nThis schema defines the complete structure of a post returned by endpoints that retrieve post details, such as the single post endpoint (/communityPlatform/posts/{postId}) and when posts are fetched for display in feeds.\n\nIt includes all core fields from the community_platform_posts database table: the unique identifier, community and author references, title and body content, author display name, and timestamps for creation and updates. It also includes the soft delete flag (deleted_at) which determines visibility.\n\nThe schema enforces all business rules regarding field constraints: the title must be 5-120 characters, the body 10-10,000 characters, and the author display name 0-32 characters (with default rendering as 'Anonymous'). The timestamps are maintained in UTC as ISO 8601 strings but are displayed locally in the user's timezone (Asia/Seoul).\n\nThis object constitutes the tangible content unit of the platform, providing users with the complete context of any contribution. The structure supports the fundamental operations of the system: reading, authoring, editing, and deleting posts. The information here is exposed to users through the home feed, community pages, and search results, providing the foundational data layer for the entire platform's content delivery."},"ICommunityPlatformPost.ICreate":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"The unique identifier of the community where this post will be created.\n\nThis value corresponds to the community_platform_communities.id field in the database and is required to establish the relationship between the post and its target community.\n\nA valid UUID must be provided that references an existing community record. The system validates that the community exists and is not deleted before processing the request."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"The title of the post, which must be between 5 and 120 characters inclusive.\n\nThis field represents the main headline or subject of the post and serves as a summary for readers. It is used in feeds, search results, and page titles. The business rules require that the title be concise yet informative to facilitate content discovery.\n\nIf the title is shorter than 5 characters or exceeds 120 characters, the system will reject the request with a validation error."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"The main content of the post, containing between 10 and 10,000 characters of plain text.\n\nThis field holds the substantial narrative or information the user wishes to share with the community. It must contain only plain text with line breaks (\\n); no HTML, JavaScript, or executable content is permitted.\n\nThe system validates the character count and strips any disallowed formatting before storage. If the content is below 10 characters or exceeds 10,000 characters, the system will reject the request."},"author_display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"An optional display name for the author of the post.\n\nIf provided, this field overrides the default author name. It can be up to 32 characters long and contains only alphanumeric characters and spaces. If omitted (null) or left empty, the system will display \"Anonymous\" as the author's name in all UI contexts.\n\nThis field supports user personalization while maintaining privacy, as it is not linked to the user's email or account identifier."}},"required":["community_id","title","body"],"description":"Request payload for creating a new post in the community platform.\n\nThis schema defines the mandatory and optional fields required to create a new post in the system, capturing the essential information a member needs to contribute content to a community.\n\nThe schema enforces strict validation rules for the title (5-120 characters) and body (10-10,000 characters) to ensure content quality and readability. It also supports optional author display names to accommodate user preferences.\n\nThis type is exclusively used in the POST /communityPlatform/member/posts endpoint and is validated against server-side constraints before persistence. The system automatically assigns the authenticated user's ID as the author_id and sets the creation timestamp, so these fields are not included in the request."},"ICommunityPlatformPost.IUpdate":{"type":"object","properties":{"title":{"oneOf":[{"type":"string","minLength":5,"maxLength":120},{"type":"null"}],"description":"The updated title of the post, between 5 and 120 characters inclusive.\n\nThis field can be provided to modify the post's headline. If null is provided, the title remains unchanged. The system validates against the 5-120 character constraint for any provided value.\n\nThis field supports the business requirement that users can edit the content of their own posts while maintaining the requirement for concise, informative titles."},"body":{"oneOf":[{"type":"string","minLength":10,"maxLength":10000},{"type":"null"}],"description":"The updated content of the post, between 10 and 10,000 characters of plain text.\n\nThis field can be provided to modify the body of the post. If null is provided, the body remains unchanged. The system validates that any provided content meets the 10-10,000 character constraint and contains only plain text with \\n line breaks.\n\nThis field enables users to refine their posts over time while ensuring content quality and preventing abuse through excessively long or improperly formatted content."}},"required":[],"description":"Partial update payload for modifying an existing post's content.\n\nThis schema represents the fields that can be updated in a post, following the patch pattern where each field's value is optional. The system treats null or omitted fields as \"no change\" instructions.\n\nOnly the title and body can be updated; fields like community_id, author_id, created_at, and author_display_name are immutable after creation, ensuring content ownership and historical fidelity. This schema supports the business requirement that users can edit their own posts while preventing unauthorized changes to metadata.\n\nThis type is exclusively used in the PUT /communityPlatform/member/posts/{postId} endpoint and requires authentication and ownership validation before any update can be processed."},"ICommunityPlatformComment.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","minimum":1,"maximum":1000},{"type":"null"}],"description":"The page number to retrieve for paginated comment results.\n\nThis parameter controls pagination of comments, allowing clients to navigate through large comment threads. The valid range is 1 to 1000 pages, with page 1 being the most recent set of comments.\n\nWhen omitted or set to null, the system defaults to page 1. This parameter is used in conjunction with the limit parameter to efficiently fetch comment threads without overwhelming network responses."},"limit":{"oneOf":[{"type":"number","minimum":1,"maximum":100},{"type":"null"}],"description":"The number of comment records to return per page.\n\nThis parameter defines the size of each paginated result set. The system enforces a maximum limit of 100 results per page to ensure responsive UI performance and prevent excessive data transfer.\n\nWhen omitted or set to null, the system defaults to 20 comments per page, which aligns with the business requirement for main feed pagination. This allows clients to customize load volumes based on bandwidth, device, or performance considerations."},"sort":{"oneOf":[{"const":"newest"},{"const":"top"},{"type":"null"}],"description":"The sorting criteria to apply to comment results.\n\nThis parameter controls the ordering of the returned comments. Two valid values are supported:\n- \"newest\": Sort by creation timestamp descending, then by comment ID descending for ties.\n- \"top\": Sort by comment score (upvotes minus downvotes) descending, then by creation timestamp descending, then by comment ID descending for ties.\n\nWhen omitted or set to null, the system defaults to \"newest\" sort, which is the mainstream experience recommended for most users.\n\nThis field enables the business requirement for both time-based and popularity-based comment ordering in detail pages and search results."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The unique identifier of the parent comment to retrieve replies for.\n\nWhen this field is provided, the system filters comments to return only direct replies to the specified parent comment, enabling thread navigation.\n\nIf set to null or omitted, the system returns top-level comments attached directly to the parent post.\n\nThis feature supports the business requirement for unlimited nesting of replies while allowing efficient retrieval of specific comment branches without loading the entire thread at once."}},"required":[],"description":"Search and pagination parameters for retrieving comment records from the platform.\n\nThis schema is used as the request body for the PATCH /communityPlatform/posts/{postId}/comments endpoint to enable complex filtering and pagination of comment threads.\n\nThe parameters allow clients to specify page size, page number, sort order (newest or top), and parent-child relationships to efficiently navigate and load comment threads on post detail pages and search results. All parameters are optional to support flexible use cases, allowing clients to require only what they need.\n\nThe schema prevents page sizes larger than 100 and ensures reasonable pagination limits to maintain UI performance and accessibility on all device types."},"ICommunityPlatformComment.ISparse":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the comment in the database.\n\nThis field serves as the primary key for the comment record and is immutable. It is generated by the system upon creation and is used as the path parameter in detail endpoints like /posts/{postId}/comments/{commentId}.\n\nThis field is essential for tracking relationships between comments and their parents, votes, and search indexing."},"post_id":{"type":"string","format":"uuid","description":"The unique identifier of the parent post to which this comment belongs.\n\nThis field establishes the logical relationship between the comment and its containing post in the community_platform_posts table. It enables the system to retrieve all comments associated with a specific post and ensures correct association in search and feed contexts."},"author_id":{"type":"string","format":"uuid","description":"The unique identifier of the member who authored this comment.\n\nThis field links the comment to the community_platform_member record that created it, enabling ownership enforcement for edit/delete operations and displaying the correct author information in the UI.\n\nThis field is used to determine whether the current user is the author of the comment and to enforce the business rule that users can only edit or delete their own comments."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The unique identifier of the parent comment this reply is part of, or null if this is a top-level comment.\n\nThis field enables the hierarchical structure of nested comments. If null, the comment is a direct reply to the post. If set, it references another comment ID, establishing a reply chain in the recursive structure.\n\nThe system supports unlimited nesting depth with this field and maintains the integrity of comment thread relationships."},"content":{"type":"string","minLength":2,"maxLength":2000,"description":"The plain text content of the comment, between 2 and 2,000 characters.\n\nThis field contains the visible text that users have written. It must not contain any HTML, JavaScript, CSS, or executable code; only plain text with eligible line breaks (\\n) are permitted.\n\nThe system enforces the 2-2000 character constraint and scans for invalid content before storage to prevent security vulnerabilities and ensure consistent display."},"created_at":{"type":"string","format":"date-time","description":"The ISO 8601 timestamp of when this comment was created.\n\nThis field records the exact date and time when the comment was first submitted and persisted to the database. It is immutable upon creation and serves as the primary ordering mechanism for \"Newest\" sort.\n\nThe system outputs this in UTC and the client is responsible for rendering relative timestamps in the user's local timezone (Asia/Seoul)."},"updated_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"The ISO 8601 timestamp of when this comment was last updated, or null if never edited.\n\nThis field is updated every time a user edits their comment. It enables the \"edited\" UI indicator and preserves history for audit purposes.\n\nIf the comment has never been edited, this field is set to null. The system will return null for new comments until an edit occurs."},"author_display_name":{"oneOf":[{"type":"string","minLength":0,"maxLength":32},{"type":"null"}],"description":"The display name the comment author chose to use for this comment.\n\nIf the author provided a display name during registration, it will be used here. If the author left it blank during registration or later, this field will be null and the system will display \"Anonymous\" as the default author name in the UI.\n\nThis field supports the business requirement for personalized author identification while protecting privacy, as it is decoupled from the user's authentication credentials."},"score":{"type":"integer","description":"The calculated vote score for this comment, computed as (upvotes - downvotes).\n\nThis field represents the net popularity of the comment based on user votes. It is sourced from the denormalized community_platform_comment_stats table to ensure high-performance reading in feeds and threads.\n\nThe system updates this value atomically when votes change, ensuring accurate display of comment popularity in \"Top\" sort order and when loaded in search results."},"reply_count":{"type":"integer","description":"The total number of direct replies to this comment.\n\nThis field counts all immediate child comments that have parent_id matching this comment's id. It supports the UI display of reply count indicators in comment threads without requiring recursive queries.\n\nThe value is derived from the community_platform_comment_stats table and is updated atomically when replies are created or deleted."}},"required":["id","post_id","author_id","created_at","content","score"],"description":"Minimal summary representation of a comment for display in feeds and search results.\n\nThis schema provides essential information needed to render a comment in UI lists without including full dependency details or complex nesting information.\n\nIt includes the core data points required to display the comment state: identifier, content, author information, time, score, and reply count. This is designed for use in the /posts/{postId}/comments returns and /s/comments search results, where lightweight responses are critical for performance.\n\nThe author_display_name and parent_id are included as nullable fields to support optional display preferences and thread context, respectively. The updated_at field is only included if edited, supporting a clean UI representation that hides \"edited\" indicators unless relevant."},"ICommunityPlatformComment.ICreate":{"type":"object","properties":{"content":{"type":"string","minLength":2,"maxLength":2000,"description":"The text content of the comment. Must be between 2 and 2,000 characters.\n\nThis field contains the user's contribution to the discussion thread, which can be a top-level comment or a reply to another comment. The content must be plain text only, with line breaks (\\n) permitted.\n\nAccording to business rules: no HTML, JavaScript, CSS, or executable content is allowed. Any such content is stripped before storage. The system enforces length limits to ensure readability and prevent abuse.\n\nThe maximum length of 2,000 characters balances detailed expression with efficient display in threaded UIs. The minimum of 2 characters prevents empty or meaningless submissions."},"parent_id":{"type":"string","format":"uuid","description":"The unique identifier of the parent comment this comment is replying to.\n\nThis field is optional. If omitted, the comment is a top-level comment directly under a post.\n\nIf provided, it references an existing comment in the community_platform_comments table that is not deleted. This enables the nesting of comments into threads.\n\nThis relationship supports unlimited nesting depth (up to 5 levels in UI), with the parent_id establishing the hierarchical relationship in the comment tree. Parent comments themselves can be replies to other comments, creating nested discussion threads. This design enables deep, contextual conversations while maintaining performance through indexed foreign keys."}},"required":["content"],"description":"Request body schema for creating a new comment on a post.\n\nThis type defines the data structure required to submit a new comment to the platform, either as a top-level comment or as a reply to an existing comment.\n\nIt includes the core content of the comment and an optional reference to a parent comment for threading. This schema is used by the POST /communityPlatform/member/posts/{postId}/comments endpoint.\n\nThe schema follows strict business rules: content must be plain text between 2-2000 characters, with no code or formatting. Parent_id is only accepted if the referenced comment exists and is active.\n\nThis is not a user profile or authentication schema - it is purely about submitting comment text and establishing context within a thread."},"ICommunityPlatformComment.IUpdate":{"type":"object","properties":{"content":{"type":"string","minLength":2,"maxLength":2000,"description":"The updated text content of the comment. Must be between 2 and 2,000 characters.\n\nThis field contains the new version of the comment content after editing. The system allows members to update their own comments to correct typos, improve clarity, or add new information.\n\nAccording to business rules: no HTML, JavaScript, CSS, or executable content is allowed. Any such content is stripped before storage. The system enforces the same length limits as creation: minimum 2 characters, maximum 2,000 characters.\n\nThe update preserves the original creation timestamp and only modifies the updated_at timestamp. The comment's score, author, and parent relationships remain unchanged. This format ensures that edits are consistent with the original intent while allowing refinement."}},"required":["content"],"description":"Request body schema for updating an existing comment.\n\nThis type defines the data structure required to modify the content of an existing comment on the platform.\n\nIt contains a single required field: content, which represents the new version of the comment text. The update applies only to the comment's body content and does not allow modifications to the author, parent comment, or other metadata.\n\nThis schema is used by the PUT /communityPlatform/member/posts/{postId}/comments/{commentId} endpoint.\n\nBusiness rules restrict editing to the original author only, and this schema structure supports that by limiting changes to just the textual content, preserving all other inherited data like creation time and identity. The strict character limits ensure consistency with the creation process, maintaining UI compatibility and preventing abuse."},"ICommunityPlatformPost.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"default":1,"description":"The page number of results to retrieve.\n\nThis parameter controls pagination of post lists in the Home feed, search results, and community feeds. It must be a positive integer starting at 1.\n\nWhen querying for posts, this value determines which 20-item subset of the sorted list is returned. The first page (page=1) returns the first 20 posts, the second page (page=2) returns the next 20, and so on.\n\nThis field is optional and defaults to 1. If a user requests a page that exceeds the total number of pages, an empty data array is returned without error, following the platform's optimistic UI pattern."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"The number of posts to return per page.\n\nThis parameter controls pagination size for post lists. It must be an integer between 1 and 100.\n\nCORE BUSINESS RULE: This parameter MUST be set to 20 for main feed pagination views as defined in requirements. This ensures consistent user experience, with exactly 20 post cards displayed per page in the Home feed, Community Home, and search results.\n\nThe limit can be overridden only for testing purposes - the production system enforces 20 posts per page as the standard. This value is not configurable by the end-user and is hard-coded in the business logic.\n\nThe maximum limit of 100 prevents excessive payload sizes and denial-of-service attacks by commanding large result sets."},"sort":{"oneOf":[{"const":"newest","description":"The sorting criteria to apply to the list of posts.\n\nThis parameter determines the order in which posts are returned in feed and search results.\n\nTwo options are supported:\n- \"newest\": Sorts by creation time (created_at) descending, and if equal, by post ID descending. This shows the most recently created posts first.\n- \"top\": Sorts by score (upvotes minus downvotes) descending, and if equal, by creation time descending, then by post ID descending. This shows the most popular posts first.\n\nThe default is \"newest\", consistent with the UI precision where the Home feed initially loads newest content. This field is essential for implementing the two core feed viewing modes as required by user experience.\n\nRegardless of sorting, the results always respect the user's membership status: only posts from joined communities appear in the authenticated user's Home feed."},{"const":"top","description":"The sorting criteria to apply to the list of posts.\n\nThis parameter determines the order in which posts are returned in feed and search results.\n\nTwo options are supported:\n- \"newest\": Sorts by creation time (created_at) descending, and if equal, by post ID descending. This shows the most recently created posts first.\n- \"top\": Sorts by score (upvotes minus downvotes) descending, and if equal, by creation time descending, then by post ID descending. This shows the most popular posts first.\n\nThe default is \"newest\", consistent with the UI precision where the Home feed initially loads newest content. This field is essential for implementing the two core feed viewing modes as required by user experience.\n\nRegardless of sorting, the results always respect the user's membership status: only posts from joined communities appear in the authenticated user's Home feed."}],"description":"The sorting criteria to apply to the list of posts.\n\nThis parameter determines the order in which posts are returned in feed and search results.\n\nTwo options are supported:\n- \"newest\": Sorts by creation time (created_at) descending, and if equal, by post ID descending. This shows the most recently created posts first.\n- \"top\": Sorts by score (upvotes minus downvotes) descending, and if equal, by creation time descending, then by post ID descending. This shows the most popular posts first.\n\nThe default is \"newest\", consistent with the UI precision where the Home feed initially loads newest content. This field is essential for implementing the two core feed viewing modes as required by user experience.\n\nRegardless of sorting, the results always respect the user's membership status: only posts from joined communities appear in the authenticated user's Home feed."},"q":{"type":"string","minLength":2,"maxLength":100,"description":"The search query term for filtering posts by content.\n\nThis parameter enables full-text search across post titles and bodies. Queries must be at least 2 characters long, as per the business requirement for search minimum length.\n\nThe query is matched against the title and body fields using full-text search with pg_trgm extensions for fuzzy matching. This allows users to find posts using keywords, phrases, or partial matches.\n\nThe maximum length of 100 characters prevents excessively long search strings that could degrade performance. When this field is used, it overrides the default 'newest' sort, applying an algorithmic relevance ranking based on word match and position.\n\nIf the query is empty or less than 2 characters, the operation returns a 400 error immediately without querying the database."},"community_id":{"type":"string","format":"uuid","description":"The unique identifier of the community to filter posts by.\n\nThis parameter restricts search results or feed views to only posts from a specific community.\n\nThis field is optional and used when a user navigates to a specific community page (e.g., /c/ai) or when filtering a search by community. When provided, results are limited to posts where the community_id matches exactly.\n\nThis allows for targeted navigation and does not require the user to be a member of the community to view its posts - reading is open to everyone. However, when used with authentication, it helps personalize the Home feed to show only posts from joined communities."}},"required":[],"description":"Request parameters for retrieving a paginated, filtered, and sorted list of posts.\n\nThis schema defines the query parameters for GET and PATCH requests that retrieve lists of posts from the platform, used in the Home feed, Community Home, Global Search (Posts tab), and Explore views.\n\nIt supports pagination (page, limit), sorting (sort), full-text search (q), and community filtering (community_id). These parameters work together to generate highly customizable feeds optimized for performance and user experience.\n\nThe schema follows core business requirements: pagination is capped at 20 items per page for main feeds, search requires 2+ character queries, and sort options are limited to Newest and Top with specific tie-breaking rules.\n\nThis is not a mutation schema - it's purely for reading and filtering. It does not require authentication, as reading posts is open to everyone. However, the response content may be filtered based on the user's membership status if they are authenticated - that logic is handled server-side, not in this schema."},"ICommunityPlatformPost.IVoteState":{"type":"object","properties":{"state":{"oneOf":[{"const":"upvote","description":"The current vote state of the authenticated user on this post.\n\nThis field indicates whether the user has upvoted, downvoted, or not voted at all on the specified post.\n\nThe value 'upvote' means the user has cast an upvote that is still active.\n\nThe value 'downvote' means the user has cast a downvote that is still active.\n\nThe value 'none' means the user has not voted on this post, or has previously voted but clicked the same button again to remove their vote.\n\nThis state is determined by checking the community_platform_post_votes table for a record where the post_id and user_id match. If no record exists, the state is 'none'. If a record exists, its vote_state field value is returned.\n\nThis structure enables optimistic UI updates: when a user clicks to upvote or downvote, the UI immediately displays the selected state based on this response before the server confirms the action. If the server operation fails, the UI can revert to this previous state. This design ensures a responsive, seamless user experience in low-bandwidth conditions."},{"const":"downvote","description":"The current vote state of the authenticated user on this post.\n\nThis field indicates whether the user has upvoted, downvoted, or not voted at all on the specified post.\n\nThe value 'upvote' means the user has cast an upvote that is still active.\n\nThe value 'downvote' means the user has cast a downvote that is still active.\n\nThe value 'none' means the user has not voted on this post, or has previously voted but clicked the same button again to remove their vote.\n\nThis state is determined by checking the community_platform_post_votes table for a record where the post_id and user_id match. If no record exists, the state is 'none'. If a record exists, its vote_state field value is returned.\n\nThis structure enables optimistic UI updates: when a user clicks to upvote or downvote, the UI immediately displays the selected state based on this response before the server confirms the action. If the server operation fails, the UI can revert to this previous state. This design ensures a responsive, seamless user experience in low-bandwidth conditions."},{"const":"none","description":"The current vote state of the authenticated user on this post.\n\nThis field indicates whether the user has upvoted, downvoted, or not voted at all on the specified post.\n\nThe value 'upvote' means the user has cast an upvote that is still active.\n\nThe value 'downvote' means the user has cast a downvote that is still active.\n\nThe value 'none' means the user has not voted on this post, or has previously voted but clicked the same button again to remove their vote.\n\nThis state is determined by checking the community_platform_post_votes table for a record where the post_id and user_id match. If no record exists, the state is 'none'. If a record exists, its vote_state field value is returned.\n\nThis structure enables optimistic UI updates: when a user clicks to upvote or downvote, the UI immediately displays the selected state based on this response before the server confirms the action. If the server operation fails, the UI can revert to this previous state. This design ensures a responsive, seamless user experience in low-bandwidth conditions."}],"description":"The current vote state of the authenticated user on this post.\n\nThis field indicates whether the user has upvoted, downvoted, or not voted at all on the specified post.\n\nThe value 'upvote' means the user has cast an upvote that is still active.\n\nThe value 'downvote' means the user has cast a downvote that is still active.\n\nThe value 'none' means the user has not voted on this post, or has previously voted but clicked the same button again to remove their vote.\n\nThis state is determined by checking the community_platform_post_votes table for a record where the post_id and user_id match. If no record exists, the state is 'none'. If a record exists, its vote_state field value is returned.\n\nThis structure enables optimistic UI updates: when a user clicks to upvote or downvote, the UI immediately displays the selected state based on this response before the server confirms the action. If the server operation fails, the UI can revert to this previous state. This design ensures a responsive, seamless user experience in low-bandwidth conditions."}},"required":["state"],"description":"Response schema representing the voter's current state on a specific post.\n\nThis type defines the structure of the data returned by the PATCH /communityPlatform/member/posts/{postId}/votes endpoint, which retrieves the authentication user's voting status on a post.\n\nIt contains a single string property 'state' with three possible values: 'upvote', 'downvote', or 'none'. These correspond exactly to the algorithmic rules described in requirements: upvote transitions to downvote or none; downvote transitions to upvote or none; no vote is 'none'.\n\nThis schema is critical for implementing the voting UI pattern where the user's current state is required prior to interaction. The browser needs to know: 1) if the user has voted, and 2) what direction they voted in, to correctly render the states of the upvote and downvote buttons.\n\nIt is not used for setting votes (that uses ICommunityPlatformPost.ICreateVote), but only for querying the existing state. This separation ensures clear responsibilities and avoids race conditions in state management. The response is always a single object with this one field, minimizing bandwidth and maximizing clarity for client-side state management."},"ICommunityPlatformPost.ICreateVote":{"type":"object","properties":{"vote_state":{"oneOf":[{"const":"upvote","description":"The desired vote state to apply to the post. Must be either 'upvote' or 'downvote'.\n\nThis field is used to indicate the user's intent regarding their vote on the post. The system will interpret this value to determine whether to create a new vote record or toggle an existing vote from one state to another.\n\n- When a user has no existing vote on the post, submitting 'upvote' will create a new upvote record.\n- When a user has no existing vote on the post, submitting 'downvote' will create a new downvote record.\n- When a user has an existing upvote, submitting 'downvote' will change the vote to downvote.\n- When a user has an existing downvote, submitting 'upvote' will change the vote to upvote.\n- When a user has an existing vote of either type and submits the same vote state, the system will remove the vote (set to 'none').\n\nThe value is case-sensitive and must match exactly one of the permitted enum values. Any other values will result in a 400 Bad Request response."},{"const":"downvote","description":"The desired vote state to apply to the post. Must be either 'upvote' or 'downvote'.\n\nThis field is used to indicate the user's intent regarding their vote on the post. The system will interpret this value to determine whether to create a new vote record or toggle an existing vote from one state to another.\n\n- When a user has no existing vote on the post, submitting 'upvote' will create a new upvote record.\n- When a user has no existing vote on the post, submitting 'downvote' will create a new downvote record.\n- When a user has an existing upvote, submitting 'downvote' will change the vote to downvote.\n- When a user has an existing downvote, submitting 'upvote' will change the vote to upvote.\n- When a user has an existing vote of either type and submits the same vote state, the system will remove the vote (set to 'none').\n\nThe value is case-sensitive and must match exactly one of the permitted enum values. Any other values will result in a 400 Bad Request response."}],"description":"The desired vote state to apply to the post. Must be either 'upvote' or 'downvote'.\n\nThis field is used to indicate the user's intent regarding their vote on the post. The system will interpret this value to determine whether to create a new vote record or toggle an existing vote from one state to another.\n\n- When a user has no existing vote on the post, submitting 'upvote' will create a new upvote record.\n- When a user has no existing vote on the post, submitting 'downvote' will create a new downvote record.\n- When a user has an existing upvote, submitting 'downvote' will change the vote to downvote.\n- When a user has an existing downvote, submitting 'upvote' will change the vote to upvote.\n- When a user has an existing vote of either type and submits the same vote state, the system will remove the vote (set to 'none').\n\nThe value is case-sensitive and must match exactly one of the permitted enum values. Any other values will result in a 400 Bad Request response."}},"required":["vote_state"],"description":"Represents the payload for creating or toggling a user's vote on a post.\n\nThis type is used when a user interacts with the upvote or downvote buttons on a post. The system uses this payload to determine the next state of the vote, whether creating a new vote, toggling between upvote and downvote, or removing the vote entirely.\n\nThe component only requires a single field: vote_state, which indicates the target state. The server logic handles the transition from the current state (none, upvote, or downvote) to the requested state according to business rules.\n\nThis design avoids the need for multiple endpoints for each possible state change and allows the client to handle voting as a single interaction with consistent semantics.\n\nSecurity Note: This operation is protected by authentication. Users cannot vote on their own posts. If the request comes from the post's author, the server will reject it with a 403 Forbidden response and display: \"You can't vote on your own posts/comments.\""},"ICommunityPlatformCommentVoteRequest":{"type":"object","properties":{"vote_state":{"oneOf":[{"const":"upvote","description":"The desired vote state to apply to the comment. Must be either 'upvote' or 'downvote'.\n\nThis field is used to indicate the user's intent regarding their vote on the comment. The system will interpret this value to determine whether to create a new vote record or toggle an existing vote from one state to another.\n\n- When a user has no existing vote on the comment, submitting 'upvote' will create a new upvote record.\n- When a user has no existing vote on the comment, submitting 'downvote' will create a new downvote record.\n- When a user has an existing upvote, submitting 'downvote' will change the vote to downvote.\n- When a user has an existing downvote, submitting 'upvote' will change the vote to upvote.\n- When a user has an existing vote of either type and submits the same vote state, the system will remove the vote (set to 'none').\n\nThe value is case-sensitive and must match exactly one of the permitted enum values. Any other values will result in a 400 Bad Request response."},{"const":"downvote","description":"The desired vote state to apply to the comment. Must be either 'upvote' or 'downvote'.\n\nThis field is used to indicate the user's intent regarding their vote on the comment. The system will interpret this value to determine whether to create a new vote record or toggle an existing vote from one state to another.\n\n- When a user has no existing vote on the comment, submitting 'upvote' will create a new upvote record.\n- When a user has no existing vote on the comment, submitting 'downvote' will create a new downvote record.\n- When a user has an existing upvote, submitting 'downvote' will change the vote to downvote.\n- When a user has an existing downvote, submitting 'upvote' will change the vote to upvote.\n- When a user has an existing vote of either type and submits the same vote state, the system will remove the vote (set to 'none').\n\nThe value is case-sensitive and must match exactly one of the permitted enum values. Any other values will result in a 400 Bad Request response."}],"description":"The desired vote state to apply to the comment. Must be either 'upvote' or 'downvote'.\n\nThis field is used to indicate the user's intent regarding their vote on the comment. The system will interpret this value to determine whether to create a new vote record or toggle an existing vote from one state to another.\n\n- When a user has no existing vote on the comment, submitting 'upvote' will create a new upvote record.\n- When a user has no existing vote on the comment, submitting 'downvote' will create a new downvote record.\n- When a user has an existing upvote, submitting 'downvote' will change the vote to downvote.\n- When a user has an existing downvote, submitting 'upvote' will change the vote to upvote.\n- When a user has an existing vote of either type and submits the same vote state, the system will remove the vote (set to 'none').\n\nThe value is case-sensitive and must match exactly one of the permitted enum values. Any other values will result in a 400 Bad Request response."}},"required":["vote_state"],"description":"Represents the payload for creating or updating a user's vote on a comment.\n\nThis type is used when a user interacts with the upvote or downvote buttons on a comment. The system uses this payload to determine the next state of the vote, whether creating a new vote, toggling between upvote and downvote, or removing the vote entirely.\n\nThe component only requires a single field: vote_state, which indicates the target state. The server logic handles the transition from the current state (none, upvote, or downvote) to the requested state according to business rules.\n\nThis design avoids the need for multiple endpoints for each possible state change and allows the client to handle voting as a single interaction with consistent semantics.\n\nSecurity Note: This operation is protected by authentication. Users cannot vote on their own comments. If the request comes from the comment's author, the server will reject it with a 403 Forbidden response and display: \"You can't vote on your own posts/comments.\""},"ICommunityPlatformCommentVoteResponse":{"type":"object","properties":{"score":{"type":"integer","description":"The updated score of the comment after applying the vote change.\n\nThe score is calculated as the total number of upvotes minus the total number of downvotes for this comment. This value is maintained atomically in the community_platform_comment_stats table and is updated immediately upon any vote action.\n\nThe score reflects the net popularity of the comment and determines its order in the 'Top' sort of comment threads. It is used by the UI to display the comment's popularity relative to other comments.\n\nThe response includes this value to support optimistic UI updates. The frontend will update the comment's displayed score immediately upon receiving this response, ensuring a responsive experience even before full server synchronization."}},"required":["score"],"description":"Represents the response payload after a successful vote action on a comment.\n\nThis type is returned by the vote creation, update, and deletion endpoints for comments. It contains a single field: score, which is the updated net score of the comment after the vote operation.\n\nThe score field is crucial for optimistic UI updates. When a user votes on a comment, the frontend immediately shows the new score based on the expected change. This response provides the exact server-verified score for confirmation. If there is a discrepancy between the optimistic prediction and the server's actual value (e.g., due to race conditions), the UI will update to match the server's value.\n\nThis response does not include information about the vote state itself ('upvote' or 'downvote') because the UI state is already updated based on the initial user interaction and should remain consistent with client action. The server only confirms the final score result."},"ICommunityPlatformUserCommunityRequest":{"type":"object","properties":{"limit":{"type":"integer","minimum":1,"maximum":100,"default":5,"description":"The maximum number of communities to return in the response.\n\nThis field controls pagination for the 'Recent Communities' sidebar. The business requirement specifies that the sidebar displays at most 5 communities, ordered by most recent activity.\n\nThe system enforces a maximum limit of 100 to prevent excessive memory usage or slow responses. The default value of 5 ensures this endpoint always returns a curated list that matches the UI requirements, even if a client attempts to request a larger number.\n\nThis value determines how many records from the community_platform_user_communities table (filtered by active membership and ordered by last_interaction_at descending) are returned in the data array of the response."},"offset":{"type":"integer","minimum":0,"default":0,"description":"The number of records to skip before beginning to return results.\n\nThis field supports pagination for scenarios where clients may need to load additional communities beyond the initial 5. Although the UI requires only the top 5 most recent, this field allows for backward compatibility or future extensions where more communities may be displayed.\n\nThe offset value must be non-negative. A value of 0 means the first 5 (or limit) communities starting from the most recent are returned.\n\nThe backend will enforce that only communities with deleted_at = NULL (active memberships) are included in the count, and the results are always ordered by last_interaction_at DESC."},"sort_direction":{"oneOf":[{"const":"asc","description":"The direction in which to sort the communities by last_interaction_at.\n\nThis field controls whether results are returned in ascending (oldest first) or descending (newest first) order based on the last_interaction_at field.\n\nThe default value is 'desc', which aligns with the business requirement that the 'Recent Communities' list shows the most recently active communities first.\n\nAlthough the business requirement enforces 'desc' as the only sensible option for the main UI, this field is provided for extensibility. For example, it could be used internally for debugging or analytics displays where historical ordering is useful."},{"const":"desc","description":"The direction in which to sort the communities by last_interaction_at.\n\nThis field controls whether results are returned in ascending (oldest first) or descending (newest first) order based on the last_interaction_at field.\n\nThe default value is 'desc', which aligns with the business requirement that the 'Recent Communities' list shows the most recently active communities first.\n\nAlthough the business requirement enforces 'desc' as the only sensible option for the main UI, this field is provided for extensibility. For example, it could be used internally for debugging or analytics displays where historical ordering is useful."}],"description":"The direction in which to sort the communities by last_interaction_at.\n\nThis field controls whether results are returned in ascending (oldest first) or descending (newest first) order based on the last_interaction_at field.\n\nThe default value is 'desc', which aligns with the business requirement that the 'Recent Communities' list shows the most recently active communities first.\n\nAlthough the business requirement enforces 'desc' as the only sensible option for the main UI, this field is provided for extensibility. For example, it could be used internally for debugging or analytics displays where historical ordering is useful."}},"required":[],"description":"Represents the request parameters for retrieving a member's recent communities.\n\nThis type is used as the request body for the PATCH /communityPlatform/member/users/{userId}/communities endpoint, which returns a paginated list of communities the user has actively joined.\n\nThe parameters in this request body provide fine-grained control over the result set, allowing for pagination and sorting. The application will typically use default values for the 'Recent Communities' sidebar (limit=5, sort_direction=desc), but this structure allows for future flexibility.\n\nWhile the business requirement dictates a maximum of 5 recent communities, this object allows the system to be extendable for scenarios where more metadata or different sorting might be needed in the future, for example, in an administrative dashboard.\n\nThis schema is designed with strict additionalProperties: false to prevent undefined fields from being passed. All parameters are optional, with sensible defaults to ensure the endpoint always returns meaningful results without requiring client-side parameter specification."},"ICommunityPlatformIPageICommunity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the collection of communities."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunityPlatformCommunity.ISummary"},"description":"Array of community summary objects, each containing essential information for display in UI views like the 'Recent Communities' sidebar.\n\nThe community summary includes name, category, and member count, optimized for efficient rendering. This avoids including full details like description, rules, logo, or banner which are not needed in summary contexts.\n\nThe items in this array are sorted by the user's most recent interaction with each community (join, post, comment, vote) and limited to the 5 most recent as required by the business rule for the 'Recent Communities' list."}},"required":["pagination","data"],"description":"Paginated collection of community summary information with pagination metadata and data array.\n\nThis represents a lightweight version of the full Community type, designed specifically for display in the left sidebar 'Recent Communities' list. It contains only the essential information needed for user interface rendering: community name, category, and member count.\n\nThe special IPage format ensures compatibility with the platform's standard pagination pattern and allows the UI to handle loading, filtering, and navigation consistently across all collection-type responses.\n\nThe underlying communities in the data array must be those the authenticated user has joined (active membership with deleted_at = null) and ordered by last_interaction_at descending to maintain the required 'most recently active' priority order."},"ICommunityPlatformSearchCommunity":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the community in the search materialized view.\n\nThis UUID serves as the primary key for the community_platform_search_communities table and is guaranteed to match the corresponding community_platform_communities.id, ensuring referential integrity.\n\nThis field is used internally by the backend for linking search results to their source data in the master database."},"community_id":{"type":"string","format":"uuid","description":"Reference to the source community in the community_platform_communities table.\n\nThis field maintains the relationship between the search materialized view and the origin community data. When a community is created, updated, or deleted, the search view is automatically refreshed via system triggers that use this foreign key relationship.\n\nThis field enables the system to keep search results synchronized with the master data without requiring manual intervention."},"name":{"type":"string","description":"The unique alphanumeric identifier of the community, used for exact and fuzzy search matching.\n\nThe name follows strict business rules: it must be 5-64 characters long, contain only alphanumeric characters, hyphens (-), and underscores (_), and must be globally unique across the entire platform. This field is immutable after community creation.\n\nSearch queries match against this field in its raw form to find communities that exactly match the user's search term."},"description":{"type":"string","description":"The optional summary text of the community, included in full-text search to match user queries about community topics.\n\nThis field is limited to 500 characters as defined in the business rules. When a user searches for terms contained in the community description, results that match this field will be returned alongside matches in the name field.\n\nThis allows users to discover communities by their stated purpose or topic focus, even if the name itself doesn't contain specific keywords."},"category":{"oneOf":[{"const":"Tech & Programming","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},{"const":"Science","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},{"const":"Movies & TV","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},{"const":"Games","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},{"const":"Sports","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},{"const":"Lifestyle & Wellness","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},{"const":"Study & Education","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},{"const":"Art & Design","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},{"const":"Business & Finance","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},{"const":"News & Current Affairs","description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."}],"description":"The predefined category designation of the community, used for filtering and categorization in search results.\n\nThis field contains one value from the exact list of 10 predefined categories specified in the business requirements. When a user searches or filters by category, this field is used to ensure results strictly align with the available categories.\n\nThe category helps organize communities and guide users to topics aligned with their interests."},"member_count":{"type":"integer","description":"The current count of users who have joined this community.\n\nThis field is maintained atomically in the community_platform_community_stats denormalized table, updated on every join/leave action to ensure instant accuracy for display purposes even under high traffic.\n\nThe value shown here is the raw numeric count and will be formatted by the UI according to the business rules: 1,000 → 1k, 10,000 → 10k, 1,000,000 → 1m. However, the API returns the unformatted integer value for backend processing and comparison."},"created_at":{"type":"string","format":"date-time","description":"The timestamp of when the community was created, carried over from the community_platform_communities table.\n\nThis timestamp is used for sorting communities in the 'Recently Created' search sort option. It reflects the original creation time of the community and remains unchanged after creation.\n\nThe format follows ISO 8601 datetime standard (e.g., '2025-10-01T16:40:28.932Z') to ensure consistent parsing across different systems and locales."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp of when the community's search index was last updated from the source community data.\n\nThis field is automatically maintained by system triggers that update the community_platform_search_communities view whenever there are changes to the community's name, description, category, or member_count.\n\nIt does not track actual changes to the community itself but rather the synchronization events with the search materialized view, ensuring search results are always current."}},"required":["id","community_id","name","category","member_count","created_at","updated_at"],"description":"Detailed information for a community from the search materialized view (community_platform_search_communities).\n\nThis schema represents the structure returned by the /communityPlatform/search/sub-communities/{communityId} endpoint and is optimized for search results display. It provides metadata about a community without including dynamic or presentation-specific fields like logo_url, banner_url, or rules.\n\nThe data is sourced from a materialized view to ensure fast read performance during search operations where frequently accessed community metadata is needed without expensive joins to the master tables. This design optimizes for high-frequency read operations during community discovery.\n\nNote: While the master community entity contains additional fields (logo_url, banner_url, rules), they are intentionally omitted here to keep the response lightweight for search result context. Full details are available via the individual community detail endpoint."},"ICommunityPlatformSearchComment.IRequest":{"type":"object","properties":{"q":{"type":"string","description":"The search query term used to match against comment content.\n\nThe query must be at least 2 characters long as per business rules; shorter queries will be rejected by the API before execution. The search matches symptomatically against the content field of comments using PostgreSQL's pg_trgm extension for fuzzy text matching.\n\nThis field enables users to find specific comments across the platform by entering keywords or phrases present in the text. Searches are case-insensitive and support substring matching (e.g., searching 'ai' will match comments containing 'AI', 'Machine Learning AI', etc.)."},"page":{"type":"integer","minimum":1,"description":"The page number for paginated results.\n\nPagination is required because search results can span many pages. By default, 20 results are returned per page as specified in the requirements.\n\nThis field is optional; if not provided, the system defaults to page = 1. Always starts at 1, not 0.\n\nWhen a user clicks 'Load more' in the UI, this page number is incremented to query the next set of results."},"limit":{"type":"integer","minimum":1,"maximum":50,"default":20,"description":"The number of comments to return per page.\n\nValid values are between 1 and 50, with 20 as the default as required by the business rules for search results.\n\nThis allows for flexible pagination control while maintaining performance constraints. Values above 50 are rejected as they could impose excessive load on the search system.\n\nThis corresponds to the \"20 results per page\" requirement for search results and ensures uniform user experience across the platform."}},"required":["q"],"description":"Request parameters for searching comments in the global search functionality.\n\nThis schema defines the structure of the request body for the /communityPlatform/search/comments endpoint. It allows users to specify a search term (q), along with optional pagination parameters (page and limit) to control the results displayed.\n\nThe pagination model implements the business requirement that search results return 20 entries per page. The minimum query length of 2 characters is enforced at the API level.\n\nThis enables the user to perform complex searches across all comments in the platform, sorting strictly by Newest (creation timestamp descending) as required.\n\nNote: Sorting for comments is hardcoded to \"Newest\" only. This schema does not include a \"sort\" field because the business rules specify that comment search is sorted by creation time and no other options are supported.\n\nThe schema may be extended in the future to support additional advanced search capabilities, such as filtering by author or community, but it will always remain minimal and focused."},"ICommunityPlatformSearchComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment in the search materialized view.\n\nThis UUID is the primary key for the community_platform_search_comments table and is guaranteed to match the corresponding comment's id in the community_platform_comments table.\n\nThis field is used internally by the backend to link search results directly to the comment data in the source table. This enables consistent data integrity and seamless navigation from search results to comment detail views."},"comment_id":{"type":"string","format":"uuid","description":"Reference to the source comment in the community_platform_comments table.\n\nThis link maintains the relationship between the search view and the underlying comment record that contains the full comment content, nested reply structure, vote count, and user information.\n\nWhen the comment is updated, deleted, or created, system triggers automatically synchronize this materialized view to reflect changes, ensuring search results remain accurate without requiring manual maintenance."},"post_id":{"type":"string","format":"uuid","description":"Reference to the parent post that this comment belongs to, from the community_platform_posts table.\n\nThis enables the search results to provide context by linking to the parent post. When displaying a comment in search, users can easily navigate to the full post and read the surrounding discussion.\n\nThis field is essential for the comment search experience, allowing users to understand where the comment fits in the larger conversation."},"community_id":{"type":"string","format":"uuid","description":"Reference to the community where this comment was made, from the community_platform_communities table.\n\nThis field provides the community context for the comment, allowing users to identify which topic-specific community the comment belongs to. Combined with the post_id, this fully identifies the hierarchical location of the comment within the platform structure."},"content":{"type":"string","description":"The full text content of the comment, including line breaks, with a length constraint of 2-2,000 characters.\n\nThis field contains the complete comment text exactly as submitted by the user, ensuring search results accurately match the content entered. The content is plain text only — no HTML, code, or formatting is permitted.\n\nFor search results, this field is typically truncated for display with an ellipsis (e.g., \"I really enjoyed this post about AI...\"), but the full content is available here for backend processing if needed."},"author_name":{"type":"string","description":"The display name of the comment author or \"Anonymous\" if not set.\n\nThis field reflects the value from the author_display_name field in the community_platform_member table. If the member did not provide a display name, the system defaults to \"Anonymous\" as required by business rules.\n\nThis allows users to find comments by specific authors without requiring authentication or full user data disclosure in the search results."},"score":{"type":"integer","description":"The calculated vote score of the comment, defined as (upvotes - downvotes).\n\nThis value is maintained in the community_platform_comment_stats denormalized table and updated atomically on every vote action (upvote/downvote/toggle). The score reflects the community's collective assessment of the comment's value.\n\nThis field is used to determine comment popularity and is used in the \"Top\" sort ordering of search results, though for comments, the business rules require Newest (creation time)排序 only."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the comment was originally created, inherited from the community_platform_comments table.\n\nThis field is used for the \"Newest\" sort order in comment search results, ensuring comments are ordered chronologically from most recent to oldest.\n\nThe format follows ISO 8601 datetime standard (e.g., '2025-10-01T16:40:28.932Z') to ensure consistent parsing across systems and for relative time calculation in the UI."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp of when the comment's search index was last updated from the source comment data.\n\nThis field is maintained automatically by system triggers that refresh the search view whenever a comment is created, edited, or deleted. It does not track the comment's own editing history, which is stored in the commented_at field of the source record.\n\nThis allows the search index to remain current for accurate query results without requiring manual re-indexing."}},"required":["id","comment_id","post_id","community_id","content","author_name","score","created_at","updated_at"],"description":"Detailed information for a comment from the search materialized view (community_platform_search_comments).\n\nThis schema represents the structure returned by the /communityPlatform/search/comments/{commentId} endpoint and is optimized for search result contextual display. It provides essential metadata and content for identifying and understanding a comment within its context.\n\nThe data is sourced from a materialized view to ensure fast read performance during search operations. This structure avoids complex database joins and maintains high-speed access when resolving queries from the /s/comments tab.\n\nUnlike the full comment detail view on post detail pages, this response does not include threading information (parent_id, replies) — only the direct comment and its immediate context (parent post and community) are included. This keeps the response lightweight for display in search result listings while providing enough information for users to judge relevance and navigate to the comment's full context."},"ICommunityPlatformCommunityStats":{"type":"object","properties":{"member_count":{"type":"integer","description":"The current number of members in this community. Updated atomically on every join/leave action. Never exceeds 10M and is formatted as 1k, 10k, 1m in UI.\n\nThe member_count field is maintained as an atomic counter that is incremented when a user joins a community and decremented when a user leaves. This denormalized approach avoids expensive COUNT queries on the junction table during high-frequency render operations on the home feed and community pages. The value is displayed with abbreviated formatting for user experience (e.g., 1,000 → '1k', 10,000 → '10k', 1,000,000 → '1m'), but the API returns the raw integer value for internal logic and calculations.\n\nThis field is critical for performance, as real-time display of member counts would be too slow using JOIN and COUNT operations on the community_platform_user_communities table when there are millions of members across all communities. The atomic updates ensure accuracy while maintaining sub-millisecond query performance."}},"required":["member_count"],"description":"Denormalized statistics counter for member count of communities. This table is updated atomically on every user join or leave action to avoid expensive COUNT queries on the community_platform_user_communities junction table during feed rendering. Used by the home page to display member counts as 1k, 10k, etc. This is a subsidiary table with denormalized data that supports high-frequency read operations.\n\nThe member_count field is maintained as an atomic counter that is incremented when a user joins a community and decremented when a user leaves. This denormalized approach avoids expensive COUNT queries on the junction table during high-frequency render operations on the home feed and community pages. The value is displayed with abbreviated formatting for user experience (e.g., 1,000 → '1k', 10,000 → '10k', 1,000,000 → '1m'), but the API returns the raw integer value for internal logic and calculations.\n\nThis field is critical for performance, as real-time display of member counts would be too slow using JOIN and COUNT operations on the community_platform_user_communities table when there are millions of members across all communities. The atomic updates ensure accuracy while maintaining sub-millisecond query performance."},"ICommunityPlatformPostScore":{"type":"object","properties":{"score":{"type":"integer","description":"The total score of the post calculated as (upvotes - downvotes). Updated atomically on every vote event to optimize high-frequency sorting by \"Top\" in feeds and Global Latest sidebar.\n\nThe score field implements a real-time, atomic counter that tracks the net difference between upvotes and downvotes on each post. This value is updated every time a user toggles their vote, ensuring the Top sort order is accurate and responsive. The atomic update mechanism using database transactions prevents race conditions when multiple votes occur simultaneously.\n\nThis denormalized field is essential for performance, as calculating this score on-demand using JOIN and COUNT queries on the community_platform_post_votes table would be prohibitively slow when many posts are being sorted in real-time across feeds and the global latest sidebar. The score field enables sub-millisecond retrieval of post popularity rankings while maintaining data integrity through server-side atomic operations."}},"required":["score"],"description":"Denormalized statistics counter for total score (upvotes minus downvotes) of posts. This table is updated atomically on every vote action (upvote/downvote/toggle) to avoid expensive COUNT queries on the community_platform_post_votes table during top-sorting of feeds and global latest sidebar. Used to calculate and display the score in posts without performing joins or aggregations at query time. This is a subsidiary table with denormalized data.\n\nThe score field implements a real-time, atomic counter that tracks the net difference between upvotes and downvotes on each post. This value is updated every time a user toggles their vote, ensuring the Top sort order is accurate and responsive. The atomic update mechanism using database transactions prevents race conditions when multiple votes occur simultaneously.\n\nThis denormalized field is essential for performance, as calculating this score on-demand using JOIN and COUNT queries on the community_platform_post_votes table would be prohibitively slow when many posts are being sorted in real-time across feeds and the global latest sidebar. The score field enables sub-millisecond retrieval of post popularity rankings while maintaining data integrity through server-side atomic operations."},"ICommunityPlatformCommentScore":{"type":"object","properties":{"score":{"type":"integer","description":"The total score of the comment calculated as (upvotes - downvotes). Updated atomically on every vote event to optimize high-frequency display of comment scores in threaded discussions."}},"required":["score"],"description":"Denormalized statistics counter for total score (upvotes minus downvotes) of comments. This table is updated atomically on every vote action (upvote/downvote/toggle) to avoid expensive COUNT queries on the community_platform_comment_votes table during comment rendering. Used to calculate and display comment score efficiently on post detail pages and search results. This is a subsidiary table with denormalized data.\n\n### Description of `score` property:\n\n> The total score of the comment calculated as (upvotes - downvotes). Updated atomically on every vote event to optimize high-frequency display of comment scores in threaded discussions.\n>\n> This field implements an atomic counter that maintains the net difference between upvotes and downvotes for each comment. It is updated with each vote toggle to ensure real-time accuracy in comment rankings, particularly important for the \"Top\" sort order in comment threads on post detail pages and in search results.\n>\n> Implementing this as a denormalized counter instead of calculating it with JOIN and COUNT queries on the community_platform_comment_votes table provides orders-of-magnitude better performance for rendering comment threads. The atomic update ensures the score remains accurate even during high-concurrency voting scenarios, allowing for a smooth, responsive user experience with immediate feedback on vote changes."},"ICommunityPlatformGuest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the guest session began. This field tracks access time for analytics but does not store persistent user state."},"ip_address":{"type":"string","description":"IP address of the guest user. Used for analytics and spam detection. Not used for authentication."}},"required":["id","created_at"],"description":"Guest account entity that represents unauthenticated users with read-only access to public content. This table enforces that all operations requiring authentication are blocked at the data layer, and no user-specific state is persisted. Used to prevent unauthorized access to write operations.\n\n### Description of `id` property:\n\n> Primary Key.\n>\n> This field is a unique UUID identifier for each guest session. It allows the system to track individual guest interactions for analytics and rate limiting purposes. The UUID format ensures global uniqueness across distributed systems and is generated on the server when a guest session is initiated.\n>\n> This identifier is ephemeral and not tied to any persistent user account. It is not used for authentication or authorization purposes, only for session tracking and abuse detection.\n>\n> The UUID will be stored in the system's tracking database until the session expires, at which point it may be permanently deleted or stored in an archive for analytics.\n>\n> No human-readable information is associated with this identifier, maintaining user anonymity as required by the platform's privacy policy.\n\n### Description of `created_at` property:\n\n> Timestamp when the guest session began. This field tracks access time for analytics but does not store persistent user state.\n>\n> This field records the exact date and time when a guest user first accessed the platform, using ISO 8601 format with timezone information. The timestamp is generated server-side at the moment the guest session is created via the /auth/guest/join endpoint.\n>\n> This field is used for analytics to understand traffic patterns, including peak usage times and duration of guest visits. It helps evaluate the effectiveness of guest experiences in converting users to registered members. However, it does not store any persistent identity or user-specific preferences.\n>\n> To protect user privacy, these timestamps are periodically aggregated and anonymized for reporting, and individual records are purged after a defined period as specified in the data retention policy.\n>\n> The server uses Asia/Seoul timezone for all timestamp generation, as specified in the business requirements, ensuring consistency in user experience metrics and reporting.\n\n### Description of `ip_address` property:\n\n> IP address of the guest user. Used for analytics and spam detection. Not used for authentication.\n>\n> This field captures the public IP address of the guest user at the time of their session initiation. It is stored as a string without normalization or anonymization, which allows for granular analysis of geographic patterns, rate limiting, and detection of automated scraping bots.\n>\n> The field is useful for identifying suspicious activity patterns such as multiple guest sessions from the same IP address, which may indicate automated bots. It also helps with regional analytics to understand where growth opportunities exist.\n>\n> Importantly, this field is not used for authentication purposes. Guest users are anonymous and cannot perform any actions that require authentication, so the IP address is strictly an operational and security logging tool.\n>\n> To comply with data privacy regulations, this field is stored in accordance with the platform's Data Retention Policy and will be automatically purged after a defined period (typically 30 days) unless an active investigation is ongoing."},"ICommunityPlatformMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the member account. This is essential for identifying the member in system operations and linking their activities across the platform. All user-specific actions are tied to this identifier."},"email":{"type":"string","format":"email","description":"User's email address used for authentication and communication.\n\nThis is the primary identifier for account access, but is included in summary to enable certain administrative workflows.\n\nNote: If the summary type is used in user-facing contexts, this field should be omitted. For administrative use cases, it remains available."},"display_name":{"type":"string","description":"Optional display name for posts and comments. If empty, system defaults to 'Anonymous'. Length constrained to 32 characters by business rules.\n\nThis field represents how the member appears publicly on the platform. If the display_name is null or empty, the system defaults to 'Anonymous' in UI displays."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the member account was created.\n\nThe creation date is included in the summary for performance reporting and analytics. This timestamp is fixed and cannot be modified after account creation."},"last_login_at":{"type":"string","format":"date-time","description":"Timestamp of the member's last successful login.\n\nThis is used to determine member activity status and to distinguish between new, active, and inactive users. In summary contexts, this helps identify recently active members for features like 'Recent Members' lists."}},"required":["id","created_at"],"description":"Simplified response version with essential properties for list views.\n\nThis type provides a lightweight representation of member data suitable for display in lists and summaries where complete user details are not necessary. It omits sensitive information like password hashes while preserving essential identifiers and metadata for rendering user information in UI components."},"ICommunityPlatformCommunitySummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the community. This is used internally to reference the community in all related records, including posts, comments, and user memberships."},"name":{"type":"string","description":"Unique alphanumeric identifier for the community. May contain hyphens (-) and underscores (_). Must be 5 to 64 characters long. Immutable after creation.\n\nThe community name is used in URLs and serves as the primary identifier for users to find and reference the community. It must be unique across the entire platform and follows strict format rules for readability and URL compatibility."},"category":{"type":"string","description":"The predefined category this community belongs to. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"].\n\nThis categorization helps users discover and filter communities based on topics of interest. The category is selected during creation and cannot be changed afterward."},"description":{"type":"string","description":"Optional summary text with a maximum length of 500 characters. Describes the community's purpose and rules.\n\nThis field provides a brief overview of the community's focus and goals. It is displayed in community listings and search results to help users understand the community's purpose before joining. The limit ensures concise presentation."},"member_count":{"type":"integer","description":"Current number of users who have joined this community. Updated in real-time when users join or leave. Displayed as \"1k\" for ≥1000, \"1m\" for ≥1000000.\n\nThis is a denormalized counter maintained in a separate analytics table for performance optimization. It reflects the real-time active membership count and is used in all UI displays to indicate community size and popularity."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this community was created. Used for sorting in \"Recently Created\" search and internal audit tracking.\n\nThis immutable timestamp marks when the community was officially established on the platform. It is used to determine recency in search results, for audit purposes, and to calculate how long a community has been active."}},"required":["id","name","category","member_count","created_at"],"description":"Simplified response version with essential properties for list views.\n\nThis type provides a lightweight representation of community data suitable for display in lists and summaries where complete community details are not necessary. It omits sensitive or verbose information like rules, logo, and banner while preserving essential metadata for rendering community information in the Explore feed and search results."},"ICommunityPlatformCommunityPlatformUserCommunityISummary":{"type":"object","properties":{"community_id":{"type":"string","format":"uuid","description":"The community the user is associated with. {!!community_platform_communities.id!}.\n\nThis reference links the membership record to the community entity, ensuring data integrity and enabling efficient lookups of a user's active communities."},"community_name":{"type":"string","description":"The unique name of the community being joined or associated with.\n\nThis is included in the summary for immediate display without requiring a separate lookup to the community entity. It should match the name in the community_platform_communities table exactly."},"last_interaction_at":{"type":"string","format":"date-time","description":"Timestamp of the user's most recent activity within this community. This field is updated when the user joins, posts, comments, or votes. Used to sort and maintain the 'Recent Communities' list with the most recently active communities appearing first.\n\nThis timestamp determines the ordering of the Recent Communities list in the left sidebar. The most recent activity can be joining, posting, commenting, or voting in that community, making this the primary indicator of recent engagement."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the membership relationship was established. This is immutable once set.\n\nThis mark when the user first joined the community. It is preserved even when the user leaves and rejoins, maintaining a historical record of the relationship."}},"required":["community_id","community_name","last_interaction_at"],"description":"Simplified summary representation of community membership records for display in the 'Recent Communities' list.\n\nThis type provides key information about a user's community memberships without requiring full membership records. It focuses on the data needed to render the left sidebar Recent Communities list: the community name, last interaction time, and the community identifier. This enables efficient loading and display of the most recently active communities without full database joins."},"ICommunityPlatformCommunityPlatformPostISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the post.\n\nThis UUID serves as the primary key for each post in the system and is used to uniquely identify the content item across all operations and relationships, including comments, votes, and search records."},"title":{"type":"string","description":"The title of the post.\n\nThis field contains a brief summary or headline for the post, required to be between 5 and 120 characters. It is the primary field used for displaying post previews in feeds, search results, and community lists. The title must be plain text with no HTML, markdown, or executable content.","minLength":5,"maxLength":120},"author_display_name":{"type":"string","description":"The display name of the post's author.\n\nThis field contains the optional custom name that the post's author has chosen to appear publicly. If this field is empty or null, the system defaults to displaying 'Anonymous' as the author.\n\nThe author display name has a maximum length of 32 characters and should consist of readable text. It is associated with the post at the time of creation and does not change if the author subsequently changes their profile display name.\n\nThis field is designed to provide anonymity while allowing users to choose recognizable identifiers when desired."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the post was created.\n\nThis field records the exact date and time when the post was first published to the system. It is used as the primary sorting criterion in 'Newest' feed order and as a secondary criterion when posts have equal scores in 'Top' views.\n\nThe timestamp is stored in ISO 8601 format with timezone information (UTC)."},"comment_count":{"type":"integer","description":"The total number of comments on this post.\n\nThis field represents the count of all active comments (where deleted_at is null) associated with the post. It is stored in the community_platform_post_stats denormalized table to enable fast retrieval without executing expensive JOIN operations on the comments table.\n\nFor display purposes, counts of 1,000 or more are abbreviated as '1k', '10k', '1m' etc. in the UI, though the underlying value is stored as a raw integer."},"score":{"type":"integer","description":"The calculated score of the post from upvotes and downvotes.\n\nThis field represents the net score calculated as (number of upvotes minus number of downvotes). It is used as the primary sorting criterion in 'Top' view order and as a secondary criterion in 'Newest' view when posts have identical creation times.\n\nThe score is stored in the community_platform_post_stats denormalized table and is updated atomically with every vote action to ensure consistent, high-performance sorting, even with high-volume voting activity.\n\nThe score is displayed directly in post cards and is the key metric determining post visibility in the 'Top' feed."},"community_name":{"type":"string","description":"The name of the community in which this post was created.\n\nThis field provides the display name of the community (e.g., 'ai', 'science') to which this post belongs. It is used in post cards and search results to indicate the context and topic focus of the post. The name is sourced from the community_platform_communities table and cannot be changed after post creation.\n\nThis field allows users to quickly identify the community context of posts without needing to navigate to the community page.","minLength":5,"maxLength":64,"pattern":"^[a-zA-Z0-9_-]+$"}},"required":["id","title","created_at","comment_count","score","community_name"],"description":"Summary representation of a post for list views and feed rendering.\n\nThis schema is optimized for displaying posts in the Home feed, Community Home feeds, and search results. It provides essential information for post previews while minimizing payload size and computational overhead.\n\nThe summary includes only the data required for the user interface: post title, author name (or 'Anonymous'), creation time, comment count, score, and community name. It excludes the full post body, which would be expensive to transfer for large lists. The score and comment count are sourced from denormalized tables to ensure optimal performance for busy feeds.\n\nThis structure supports the 20-item-per-page pagination requirement and enables the 'Load more' functionality by providing all necessary data to render each post card in the feed without additional API calls."},"ICommunityPlatformUserCommunity":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the membership record. This UUID uniquely identifies the relationship between a user and a community in the community_platform_user_communities table.\n\nThis field is automatically generated by the system upon membership creation and is immutable. It serves as the primary key for the junction table and is used to reference specific membership records in related operations and queries."},"community_platform_user_id":{"type":"string","format":"uuid","description":"The user who has established membership.\n\nThis field is a foreign key reference to the community_platform_member table's id field. It identifies which member account has joined the community.\n\nThis field is required to establish the user-community relationship and is used in all membership-related operations including join/leave actions, recent communities list generation, and home feed filtering. The system validates this ID against authenticated user sessions to enforce ownership rules."},"community_platform_community_id":{"type":"string","format":"uuid","description":"The community the user is associated with.\n\nThis field is a foreign key reference to the community_platform_communities table's id field. It identifies which specific community the user has joined or is associated with.\n\nThis field is essential for linking the membership record to the correct community and is used in queries that retrieve all users for a specific community or determine community membership status. It ensures data integrity by referencing only valid, existing communities."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the membership relationship was established.\n\nThis field records the exact moment when a user first joined a community. It is set once during the initial join operation and is immutable.\n\nThis timestamp is critical for determining membership history and is used in conjunction with last_interaction_at to track user engagement over time. It helps establish the chronological order of community membership for reporting, analytics, and user history purposes."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this membership record.\n\nThis field is automatically updated whenever the membership is modified, such as when a user posts, comments, or votes in the community.\n\nThis timestamp is used for caching and synchronization purposes, ensuring the system can track the recency of user activity in a community. It's also used when generating the 'Recent Communities' list, where recently updated memberships are prioritized."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp when the user left the community.\n\nWhen null, the membership is active; when set, the membership is inactive. This implements a soft-delete pattern to maintain audit trail while allowing rejoining.\n\nThis field enables the 'Leave' functionality without permanently deleting records. When a user leaves a community, this field is set with the current timestamp, effectively deactivating the membership while preserving the record for analytics, history, and potential rejoining. This design supports business requirements for participation history and community membership tracking."},"last_interaction_at":{"type":"string","format":"date-time","description":"Timestamp of the user's most recent activity within this community.\n\nThis field is updated when the user joins, posts, comments, or votes. It determines ordering in the 'Recent Communities' list with the most recently active communities appearing first.\n\nThis timestamp is the key driver for the personalized 'Recent Communities' navigation experience. Every interaction (join, post, comment, vote) triggers an update to this field, ensuring that the communities a user engages with most recently appear at the top of their sidebar. This fosters engagement by making recently active communities easily accessible."}},"required":["id","community_platform_user_id","community_platform_community_id","created_at","updated_at","last_interaction_at"],"description":"Junction table tracking the dynamic relationship between users and communities.\n\nThis table enables the 'Recent Communities' list functionality and content filtering for the home feed. Each record represents a user's membership status in a community and tracks when the user last interacted with that community (through join, post, comment, or vote). The record is soft-deleted when a user leaves a community, enabling rejoining and maintaining activity history.\n\nKey Business Rules:\n- Users can join and leave communities dynamically\n- The last_interaction_at field determines ordering in the 'Recent Communities' list\n- active status is tracked through deleted_at (not is_joined)\n- This table must support efficient queries for 'Recent Communities' list (top 5 by last_interaction_at)\n- This table supports home feed filtering by excluding posts from communities where deleted_at is not null\n- This table has no independent API endpoints - managed only through community join/leave actions in UI\n\nThis table is fundamental to the platform's personalized content experience. By maintaining a record of every user-community relationship with activity timestamps, it enables the system to provide tailored content filtering in the home feed and a dynamic, activity-based navigation experience in the left sidebar. The soft-delete pattern ensures data integrity for audit trails while maintaining the ability for users to leave and rejoin communities seamlessly."},"ICommunityPlatformAdminMemberId":{"type":"string","format":"uuid","description":"Reference to the underlying member account that possesses admin privileges. This links the admin record to its associated member account in the community_platform_member table.\n\nThe admin is not a separate identity but a privilege level granted to an existing member. This relationship enforces that admin privileges are tied to a specific user account with proper authentication credentials."},"ICommunityPlatformAdminId":{"type":"string","format":"uuid","description":"Unique identifier for the admin record in UUID format. This is the primary key for the admin table.\n\nAutomatically generated by the system on admin privilege assignment and remains immutable throughout the admin's tenure."},"ICommunityPlatformCommunity.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the community.\n\nThis UUID is the primary key for the community in the system and is used to reference the community in all relationships and operations. The community ID remains immutable once created."},"name":{"type":"string","description":"The unique alphanumeric name of the community.\n\nCommunity names are unique across the entire platform and serve as the primary identifier in URLs (e.g., '/c/[name]'). They must be 5-64 characters long and can contain only alphanumeric characters, hyphens (-), and underscores (_). The name forms the public identity of the community and cannot be changed after creation.","minLength":5,"maxLength":64,"pattern":"^[a-zA-Z0-9_-]+$"},"category":{"oneOf":[{"const":"Tech & Programming","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},{"const":"Science","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},{"const":"Movies & TV","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},{"const":"Games","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},{"const":"Sports","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},{"const":"Lifestyle & Wellness","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},{"const":"Study & Education","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},{"const":"Art & Design","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},{"const":"Business & Finance","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},{"const":"News & Current Affairs","description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."}],"description":"The community's predefined category.\n\nEach community must be assigned exactly one category from the approved list: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. This categorization enables content filtering, discovery, and navigation."},"description":{"type":"string","description":"The optional summary description of the community.\n\nThis field provides a brief explanation of the community's purpose, topic focus, or guidelines. It is limited to a maximum of 500 characters and is displayed in community listings and search results to help users determine if the community aligns with their interests.\n\nWhen this field is null or empty, no description is shown to users."},"member_count":{"type":"integer","description":"The current number of members in the community.\n\nThis field is maintained in real-time by incrementing when members join and decrementing when members leave. For display purposes, values of 1,000 or more are abbreviated in the UI as \"1k\", \"10k\", \"1m\" etc., but the underlying value is stored as a raw integer.\n\nThis count is sourced from the community_platform_community_stats denormalized table to ensure rapid retrieval without expensive JOIN operations."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the community was created.\n\nThis field records the exact date and time when the community was established by its creator. It is used for sorting in 'Recently Created' search results, internal audit tracking, and determining the age of the community.\n\nThe timestamp is stored in ISO 8601 format with timezone information (UTC)."}},"required":["id","name","category","member_count","created_at"],"description":"Summary representation of a community for list views and search results.\n\nThis schema is optimized for displaying communities in discovery interfaces, including the Explore page, search results, and 'Recent Communities' sidebar. It excludes sensitive or internal fields like rules, logo_url, and banner_url to optimize performance and reduce payload size.\n\nThe summary data enables users to quickly assess the nature and popularity of communities without loading extensive metadata, supporting the platform's requirement for efficient content discovery."}}}}