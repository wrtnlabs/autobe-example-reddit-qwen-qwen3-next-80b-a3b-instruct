{"operations":[{"specification":"This operation handles the registration of a guest user into the system. When a guest accesses the platform and chooses to create an account, this endpoint is invoked to generate a new member record and issue an initial JWT authentication token. The operation is publicly accessible and does not require any prior authentication. The request body includes the email address, password, and an optional display name for the new member. The system validates the email format, checks for uniqueness, and ensures the password meets minimum complexity requirements derived from the communitybbs_member schema. The operation then creates a corresponding communitybbs_member record in the database and issues a signed authentication token paired with a secure session record in the communitybbs_session table. This response includes the access token, refresh token, and associated member metadata. This endpoint exists solely to facilitate the transition from guest to member status as defined by the business requirements, enabling users to become authenticated members and gain access to interactive features.","authorizationType":"join","description":"This authorization operation enables unauthenticated guests to register as members of the Community BBS platform. The operation is triggered when a user initiates the account creation flow, translating the guest state into a persistent member identity. The implementation is governed by the communitybbs_member data model, which enforces strict requirements: the email field must be unique and contain a valid email format; the password_hash is securely stored using BCrypt encryption; and the display_name is mandatory, defaulting to \"Anonymous\" if not provided. The operation creates a new record in the communitybbs_member table with the submitted credentials, automatically generating a unique UUID for the id field. Concurrently, a corresponding session record is initiated in the communitybbs_session table with a cryptographically secure token, an expiration timestamp, and an active status marked as true. The operation references no fields beyond those defined in the communitybbs_member schema, meaning it does not rely on or update any denormalized fields such as last_active_at or updated_at, as those are handled by the application layer following successful creation. This flow integrates directly with the platform's authentication workflow, where a successful join operation immediately provides access to all member-only functionalities including posting, commenting, voting, and community joining. The operation does not support password recovery or token refresh; those are separate concerns handled by their own dedicated endpoints. Security considerations include ensuring password hashes are never transmitted in plaintext and that validation is performed strictly server-side. The operation is stateless and idempotent, meaning repeated execution with identical credentials will fail due to the unique email constraint. A successful response will include the newly generated member's email and display_name in the response body, formatted as ICommunitybbsMember.IAuthorized, following the required DTO naming pattern for authentication operations. This operation is the only authorized path for a guest to transition into a member, and all other user interactions are blocked until this step is successfully completed.","summary":"Registers a guest user as a member by creating a new member record and issuing initial JWT tokens.","method":"post","name":"join","path":"/auth/guest/join","parameters":[],"requestBody":{"description":"Request body for registering a new member from guest state. Contains required credentials and optional display preferences.","typeName":"ICommunitybbsMember.ICreate"},"responseBody":{"description":"Response body containing the issued authentication tokens and member profile information following successful registration.","typeName":"ICommunitybbsMember.IAuthorized"},"authorizationRole":"guest"},{"specification":"This operation allows a guest user to refresh their temporary session token. As a guest cannot authenticate with credentials, this refresh token is issued upon the initial guest session creation and has a limited lifetime for temporary access. The refresh operation validates the provided refresh token against stored session records in the communitybbs_session table linked to a guest actor. The request contains only the refresh token in the Authorization header, with no body required. The system checks whether the session is still valid (not expired or deleted) and whether the token matches exactly. If valid, the system generates new access and refresh tokens and updates the last_activity_at timestamp of the session record, extending the session lifetime. This operation does not modify any user profile data in the communitybbs_guest table; it only updates session management state. This endpoint exists to maintain continuous session validity without requiring the guest to re-enter information, ensuring seamless browsing experience as specified in the requirements.","authorizationType":"refresh","description":"This authorization operation permits authenticated guest users to extend their temporary access duration by refreshing the session token, without requiring credentials. Guests, by definition, do not authenticate with email/password but are assigned temporary token-based sessions to maintain state during their anonymous browsing. This operation references the communitybbs_session table exclusively, validating the provided refresh token against the token field and checking its expires_at and is_valid fields. When valid, the system generates a new set of tokens, updates the last_activity_at field to the current timestamp to extend session viability, and returns a new token pair. No fields from the communitybbs_guest table are modified during this operation, as the guest entity only stores immutable data like ip_address and display_name. This operation does not perform any validation on the email or password fields because these do not exist for guest users. The refresh process is stateless and token-bound, relying entirely on the integrity of the token stored in the session record. This operation is crucial for maintaining a fluid user experience as described in the functional requirements, allowing guests to browse for extended periods without login interruptions. The operation responds with a new token set that must be used for subsequent requests; the previously issued tokens are immediately invalidated. This endpoint is protected only by the correctness of the token itself, not by any user credentials, and follows the authentication workflow defined for non-authenticated sessions. Response body follows the ICommunitybbsMember.IAuthorized pattern to maintain consistency in token responses across guest and member flows, even though no member entity exists.","summary":"Refreshes a temporary session token for a guest user to maintain anonymous access.","method":"post","name":"refresh","path":"/auth/guest/refresh","parameters":[],"requestBody":null,"responseBody":{"description":"Response body containing new access and refresh tokens after successful session extension.","typeName":"ICommunitybbsMember.IAuthorized"},"authorizationRole":"guest"},{"specification":"User registration for member role. This operation creates a new member account with email and password. It triggers the creation of a session token upon successful registration. This is the initial entry point for new users into the system. Requires unique email and valid password format. This corresponds to the communitybbs_member table in the Prisma schema, which has email, password_hash, display_name, created_at, and updated_at fields. Operation is public and requires no authentication.","authorizationType":"join","description":"This operation allows a guest to register as a new member by providing a valid email address and password. When registered successfully, it creates a new record in the communitybbs_member table with the provided email and a BCrypt-hashed password. The display_name defaults to the email prefix if not provided. Upon successful registration, the system automatically establishes a new session, issuing a JWT token for subsequent authenticated interactions. This behavior is consistent with the Prisma schema showing that the member table contains email, password_hash, display_name, created_at, and updated_at fields, all of which are populated during this operation. The session is created in the communitybbs_session table with actor_id referencing the new member's id. This operation is critical for user onboarding and does not require prior authentication. \n\nSecurity is enforced by validating email format and ensuring the password_hash meets complexity requirements. The system must guarantee uniqueness of email across all members, as defined by the unique index on the email field in the communitybbs_member table. Any attempt to register with a duplicate email results in error.\n\nThis operation must be initiated before any other authenticated operations can be performed by the user. It establishes a persistent identity that can be used across sessions via the authentication system. This operation is distinct from login and refresh, as it creates a new user record rather than authenticating an existing one.","summary":"Register a new member account with email and password.","parameters":[{"name":"email","description":"The user's email address, used as primary identifier and login credential. Must be unique and valid email format, as validated by the unique constraint on communitybbs_member.email field.","schema":{"type":"string","format":"email"}},{"name":"password","description":"The plaintext password the user wishes to set. This will be hashed by the system using BCrypt before storage in communitybbs_member.password_hash. Must meet complexity requirements, typically minimum length of 8 characters.","schema":{"type":"string","minLength":8}},{"name":"displayName","description":"Optional preferred display name for the user. If not provided, system defaults to email prefix (the part before @). Truncated to 32 characters if longer. Stored in communitybbs_member.display_name field.","schema":{"type":"string","minLength":1,"maxLength":32}}],"requestBody":{"description":"Request body for member registration containing authentication credentials and optional display name.","typeName":"IMember.ICreate"},"responseBody":{"description":"Response body after successful member registration. Contains authentication token and member profile data.","typeName":"ICommunitybbsMember.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/member/join","method":"post"},{"specification":"User login for member role. This operation authenticates an existing member using email and password. Upon successful verification, it generates a new session and issues an access token. This operation is public and allows members to regain access to their accounts. It corresponds to the verification of email and password_hash in the communitybbs_member table. Login operation triggers session creation in the communitybbs_session table with actor_id referencing the member's id. It does not modify any member record, only validates credentials and creates a session.","authorizationType":"login","description":"This operation authenticates a user by verifying the provided email and password against the stored credentials in the communitybbs_member table. The system checks the email against the unique constraint and compares the provided password with the stored password_hash using BCrypt hashing. If valid, a new session is created in the communitybbs_session table with an associated JWT token, and the session's actor_id is linked to the member's id. The session record includes an expires_at timestamp and is marked as is_valid = true. This operation must be performed before any application logic that requires authentication, as it establishes the authenticated context for the user session. This operation respects the email field uniqueness constraint in the member table. The service does not notify users if login fails for security purposes, returning a generic 'Login failed. Please try again.' message. This response aligns with the requirement that the system must not provide information that could aid in credential enumeration attacks. No personal data is modified during this operation — it only validates credentials and instantiates a session.","summary":"Authenticate member user using email and password.","parameters":[{"name":"email","description":"Registered email address of the member, used as login identifier. Must match an existing record in communitybbs_member.email.","schema":{"type":"string","format":"email"}},{"name":"password","description":"Plain-text password provided by user. Verified against stored password_hash in communitybbs_member using BCrypt algorithm.","schema":{"type":"string","minLength":8}}],"requestBody":{"description":"Request body for member login containing email and password for authentication.","typeName":"IMember.ILogin"},"responseBody":{"description":"Response body after successful authentication. Contains JWT access token and session details.","typeName":"ICommunitybbsMember.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/member/login","method":"post"},{"specification":"Token refresh for member role. This operation extends the validity of a user's authentication session using a valid refresh token. It ensures user experience continuity without requiring re-login. The refresh token must be presented in the header. It operates on the session record in the communitybbs_session table, updating the expires_at and last_activity_at timestamps. This operation must be called before the session expires to maintain continuous access. Indicates use of active session by validating token against communitybbs_session.token and actor_id references to communitybbs_member.","authorizationType":"refresh","description":"This operation allows a member to renew their access token by presenting a valid refresh token. The refresh token is validated against the session record in the communitybbs_session table. If the session exists, has not expired, is not deleted, and is marked as is_valid, a new access token is issued. The existing session record is updated with a new expires_at timestamp, typically extending the session by 30 days, and the last_activity_at timestamp is set to the current time. The updated_at timestamp is also refreshed. The actor_id in the session record references the member's id in the communitybbs_member table, ensuring the refresh is applied to the correct user context. This operation does not require re-authentication with email and password, providing a seamless experience. The refresh token must be securely stored by the client and presented in the request header. No other fields in the member table are affected — this is purely a session maintenance operation.","summary":"Refresh member's access token using a valid refresh token.","parameters":[],"requestBody":{"description":"Request body for token refresh operation with refresh token in header.","typeName":"IMember.IRefresh"},"responseBody":{"description":"Response body after successful refresh. Contains a new JWT access token and updated session metadata.","typeName":"ICommunitybbsMember.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/member/refresh","method":"post"},{"specification":"Delete a user’s own post. This operation permanently removes a post authored by the authenticated member. Uses the communitybbs_post table, where it updates the deleted_at field to mark the post as deleted (soft delete). This behavior is determined by the presence of the deleted_at column in the Prisma schema, which exists for soft deletion capability. The operation is only permitted if the member_id matches the post's communitybbs_member_id. Authorization is role-based to the member who created the post.","authorizationType":null,"description":"This operation deletes a specific post authored by the authenticated member. When called, it performs a soft delete by updating the deleted_at field in the communitybbs_post table from null to the current timestamp. This preserves historical data and allows potential recovery by moderators, as required by the schema design. The soft delete implementation is possible because the communitybbs_post table includes a deleted_at column of type DateTime? (nullable). The operation checks that the communitybbs_member_id of the post matches the id of the currently authenticated member to ensure ownership. If the post is already deleted or does not exist, the system returns a 404 error. This behavior aligns with the requirement that users can only delete their own posts. The operation does not affect the response in the search index (communitybbs_search_post) in real time — that is handled asynchronously by the search service. Upon delete, the associated votes are also logically deleted via cascading relationships.","summary":"Permanently delete a user's own post (soft delete).","parameters":[{"name":"postId","description":"The unique identifier of the post to be deleted. This must match an existing record in communitybbs_post.id. The user must be the author (communitybbs_member_id must match the authenticated member id).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/posts/{postId}","method":"delete"},{"specification":"Update a user’s own post. This operation updates the title or body of a post authored by the authenticated member. Modifies the communitybbs_post table by updating the title, body, and updated_at fields. The operation is permitted only if the authenticated member is the original author of the post, as identified by the communitybbs_member_id field. The schema enforces the requirement that the title must be between 5 and 120 characters and body between 10 and 10,000 characters. This supports the business requirement that users can edit their own content.","authorizationType":null,"description":"This operation allows a member to edit the title or body of a post they authored. When processing, the system validates that the authenticated member_id matches the communitybbs_member_id of the post being edited. The operation updates the title and/or body fields in the communitybbs_post table with the new values, ensuring they meet the length constraints (5-120 characters for title, 10-10,000 for body). The updated_at field is automatically set to the current timestamp. Only the title and body can be updated — the author, community, and creation timestamps are immutable. The display_name field, if present, is preserved from the original record and not updated to reflect the member's current display_name. Validation is applied via the requirement constraints in the prisma schema and not through separate validation layers. This enables users to correct typos or expand on their thoughts while maintaining content integrity. This modifiability is enabled by the schema's design where updated_at is present and writable, unlike created_at. The operation also triggers asynchronous index updates to communitybbs_search_post for search relevance.","summary":"Update the title or body of a user's own post.","parameters":[{"name":"postId","description":"The unique identifier of the post to be updated. Must match the communitybbs_post.id and be authored by the authenticated member.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body containing updated title and/or body content for the post.","typeName":"IPost.IUpdate"},"responseBody":{"description":"Response body containing the updated post information after successful update.","typeName":"IPost"},"authorizationRole":"member","name":"update","path":"/my/posts/{postId}","method":"put"},{"specification":"Create a new post in a community. This operation allows a member to publish a new post in any community, regardless of membership. It creates a record in the communitybbs_post table with the provided title, body, community_id, and member_id. The display_name is set to the member's current display_name from communitybbs_member table at time of creation. The operation supports markdown-free plain text only, as required by the business rules. The creation timestamp is set to the current time. All fields are validated against constraints in the schema.","authorizationType":null,"description":"This operation enables a member to create a new post in any sub-community. It inserts a new record into the communitybbs_post table with the following fields: communitybbs_community_id from the request, communitybbs_member_id from the authenticated user's session, a title (validated to be 5-120 characters), a body (validated to be 10-10,000 characters), and a display_name taken from the member's current profile. The created_at timestamp is automatically set to the current time, and updated_at is initially set to the same value. The deleted_at field is set to null, indicating an active post. The system enforces validation rules from the schema regarding input lengths and rejects any attempt to insert HTML or code into the body. The display_name is stored as text, not as a reference, ensuring the post's author display remains consistent even if the member later changes their profile display_name. This implementation matches the schema specification and business requirement that posting is allowed without prior community membership.","summary":"Create a new post in a specified community.","parameters":[],"requestBody":{"description":"Request body containing post details including community_id, title, body, and optional display_name.","typeName":"IPost.ICreate"},"responseBody":{"description":"Response body containing the created post data with its unique identifier.","typeName":"IPost"},"authorizationRole":"member","name":"create","path":"/posts","method":"post"},{"specification":"Delete a user’s own comment. This operation permanently removes a comment authored by the authenticated member. Uses the communitybbs_comment table where it updates the deleted_at field to mark the comment as deleted (soft delete). The presence of the deleted_at column in the Prisma schema confirms soft delete capability. Only the comment’s author (matching communitybbs_member_id to the authenticated member) can perform deletion.","authorizationType":null,"description":"This operation allows a member to delete a comment they authored. Upon execution, it performs a soft delete by updating the deleted_at field in the communitybbs_comment table to the current timestamp. This preserves the comment's data for audit and moderation purposes while hiding it from regular views. The system validates that the authenticated member's id matches the communitybbs_member_id of the desired comment. This assertion ensures no user can delete others' comments. The soft delete behavior is enabled by the presence of the deleted_at column in the communitybbs_comment table in the Prisma schema, which is configured as a nullable DateTime. This is consistent with the business requirement that users can delete only their own content. Associated votes for the comment are also logically removed via cascading relationships. This operation does not affect the search index although it will be updated asynchronously by the search service.","summary":"Permanently delete a user's own comment (soft delete).","parameters":[{"name":"commentId","description":"The unique identifier of the comment to be deleted. Must match an existing communitybbs_comment.id and the comment must have been authored by the authenticated member.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/my/comments/{commentId}","method":"delete"},{"specification":"Update a user’s own comment. This operation modifies the content of a comment authored by the authenticated member. Updates the communitybbs_comment table by modifying the content field and updating the updated_at timestamp. Only the comment's author is permitted to modify it, as enforced by matching the authenticated member's id with the comment's communitybbs_member_id.","authorizationType":null,"description":"This operation allows a member to edit the content of a comment they authored. The system verifies that the authenticated member's id matches the communitybbs_member_id in the specified comment record in the communitybbs_comment table. It then updates the content field with the new value, ensuring it is between 2 and 2,000 characters as per schema constraints. The updated_at timestamp is set to the current time. The parent and post associations remain unchanged. The display_name is preserved from the original record. This behavior is supported by the schema's structure, which includes a writable updated_at field and the ability to modify the content column. This supports requirements that members can correct typos or clarify their comments. The edit triggers an asynchronous update to the communitybbs_search_comment index to maintain search relevance.","summary":"Update the content of a user's own comment.","parameters":[{"name":"commentId","description":"The unique identifier of the comment to be updated. Must match an existing communitybbs_comment.id and the comment must have been authored by the authenticated member.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Request body containing the new comment content.","typeName":"IComment.IUpdate"},"responseBody":{"description":"Response body containing the updated comment content and metadata.","typeName":"IComment"},"authorizationRole":"member","name":"update","path":"/my/comments/{commentId}","method":"put"},{"specification":"Create a new comment on a post. This operation enables a member to reply to a post or another comment. It creates a record in the communitybbs_comment table with the provided content, referencing the target post and optionally a parent comment. The member_id is derived from the authenticated session. The display_name is taken from the member's profile at the time of creation. This operation requires an active authenticated session. The schema ensures content length validation and timestamp preservation.","authorizationType":null,"description":"This operation allows a member to post a new comment on any post, creating a record in the communitybbs_comment table. The comment is linked to a post via communitybbs_post_id and optionally to a parent comment via communitybbs_comment_id (for nested replies). The communitybbs_member_id is set from the authenticated member's id in the session. The content field is validated for length (2-2000 characters) against the schema constraints. The display_name is copied from the member's current profile (communitybbs_member.display_name) to ensure consistency even if the member later changes their display_name. The created_at timestamp is set to the current time, and updated_at is set to the same value. The deleted_at field is null, indicating an active comment. This implementation supports the business requirement that users can comment on posts without being members of the community. The post reference ensures the comment is immediately contextual within the correct post thread.","summary":"Create a new comment on a post or comment.","parameters":[],"requestBody":{"description":"Request body containing comment content, target post ID, and optional parent comment ID.","typeName":"IComment.ICreate"},"responseBody":{"description":"Response body containing the created comment data.","typeName":"IComment"},"authorizationRole":"member","name":"create","path":"/comments","method":"post"},{"specification":"Vote on a post or comment. This operation allows a member to cast an upvote or downvote on a post or a comment. Each member is authorized to vote only once per item. The operation checks the communitybbs_vote table to prevent duplicate votes and creates a new record in this table with the actor_id, target_id (either post_id or comment_id), and vote type. The vote operation supports real-time score calculation by aggregating votes from this table.","authorizationType":null,"description":"This operation enables an authenticated member to vote on any post or comment. The system creates an entry in the communitybbs_vote table by setting the actor_id to the authenticated member's id, and either post_id or comment_id to the target object's id, while ensuring exactly one target is provided (mutually exclusive). The type field is set to either 'upvote' or 'downvote'. The system enforces a constraint that no member can vote more than once on the same post or comment by checking the unique index on [actor_id, post_id] and [actor_id, comment_id]. If a user attempts to change their vote (e.g., from upvote to downvote), the system deletes their existing vote record and creates a new one with the updated type. If the user attempts to vote on their own content, the system prevents the action by checking the author_id fields of the target post or comment and returns an error message as required by business rules. This implementation aligns with the communitybbs_vote table’s design, which stores vote type and reference to the actor and target. Votes are used to compute the score fields in communitybbs_post and communitybbs_comment tables via postgresql aggregate views or application logic.","summary":"Cast an upvote or downvote on a post or comment.","parameters":[],"requestBody":{"description":"Request body specifying vote type ('upvote' or 'downvote') and target (either post_id or comment_id).","typeName":"IVote.ICreate"},"responseBody":{"description":"Response body confirming the vote was processed, with updated score for the target item.","typeName":"IVote"},"authorizationRole":"member","name":"create","path":"/votes","method":"post"},{"specification":"Join a community. This operation adds the authenticated member to a community’s membership list. It updates the communitybbs_community table’s member_count field and records the membership in the associations between member and community. The last_active_at timestamp of the community is updated to reflect activity. This enables the member to see the community’s posts in their home feed and appear in the Recent Communities list. The operation requires no additional data beyond community_id.","authorizationType":null,"description":"This operation allows an authenticated member to join a sub-community. It increments the member_count field in the corresponding record of the communitybbs_community table and creates a reference between the member and the community in a junction table (not shown in schema but implied by the last_active_at feature). The update directly affects the community's member_count used in search results and the Explore page. Concurrently, the last_active_at field of the community is updated to the current timestamp to affect its sorting in the 'Recent Communities' list. This change triggers real-time updates to the user’s home feed to include new posts from this community. The member’s own history of joined communities is tracked internally to support the Home feed filtering logic. This operation aligns with the presence of the member_count and last_active_at fields in the communitybbs_community table, which are denormalized for performance and updated by application logic on join / leave events. The join action is idempotent — attempting to join an already-joined community has no effect.","summary":"Join a sub-community to receive its posts in your home feed.","parameters":[{"name":"communityId","description":"The unique identifier of the community to join. Must match an existing communitybbs_community.id. The member must not already be a member of this community.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"create","path":"/communities/{communityId}/join","method":"post"},{"specification":"Leave a community. This operation removes the authenticated member from a community’s membership list. It decrements the member_count field in the communitybbs_community table and updates the last_active_at field to reflect reduced activity. This causes the member’s home feed to no longer include posts from this community. The operation requires no additional data beyond community_id.","authorizationType":null,"description":"This operation allows an authenticated member to leave a sub-community they previously joined. The system decrements the member_count field in the corresponding communitybbs_community record and updates its last_active_at field to the current timestamp to indicate activity change. This removal causes the Home feed to immediately stop displaying posts from this community. The member remains a registered user and can rejoin the community later. The system tracks joined communities internally to manage feed filtering — no explicit junction table is required by the schema. The behavior is consistent with the member_count and last_active_at fields in the communitybbs_community table, which represent denormalized state updated by application logic on join/leave actions. This operation is idempotent — attempting to leave a community already left has no effect. There is no deletion of user’s historic posts or comments. This aligns with the business requirement that users can leave any community at any time.","summary":"Leave a sub-community to stop receiving its posts in your home feed.","parameters":[{"name":"communityId","description":"The unique identifier of the community to leave. Must match an existing communitybbs_community.id. The member must currently be a member of this community.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"member","name":"erase","path":"/communities/{communityId}/leave","method":"delete"},{"specification":"Login operation for administrators to authenticate with email and password. This endpoint validates credentials and issues a new session token with a JWT. The authentication mechanism aligns with the system's session management paradigm using a cryptographically secure token stored in the session table. The administrator's identity is verified against the communitybbs_administrator table, using email and password_hash for credential validation. This operation is critical for administrative access and must not be accessible by guests or regular members.","authorizationType":"login","description":"This login endpoint allows administrators to authenticate using their registered email and password.\n\nThe system validates credentials by comparing the provided password against the BCrypt-hashed password_hash stored in the communitybbs_administrator table. Upon successful authentication, a new session is created with a unique token in the communitybbs_session table, which is then returned to the client as a JWT. The session is linked to the administrator's account via actor_id and has an expiration timestamp based on system configuration. The last_activity_at is updated to track active sessions and support grace period logic for seamless re-authentication without full login cycles.\n\nThis endpoint is designed exclusively for administrators as defined in the communitybbs_administrator model. Regular members or guests cannot use this endpoint due to the distinct separation of authentication tables. The email field is required, and the password_hash is never transmitted or stored in plaintext. The operation is stateless from the client's perspective with token-based authentication.\n\nSecurity considerations include enforcing rate limiting on failed attempts and requiring HTTPS to prevent credential interception. The administrator session is tracked in the session table, and expired or revoked tokens will trigger re-authentication prompts in the UI. This login mechanism is separate from member login and must not be conflated, preserving the role separation established by the schema.\n\nThis endpoint is the entry point for administrative access and is required before any other administrator-specific operations can be performed. It is a prerequisite for creating, editing, or deleting communities and managing users. The operation has no dependency on other endpoints; it is a standalone authentication mechanism.\n\nNo other authentication flows are allowed for administrators; this is the only login path.","summary":"Authenticate as an administrator using email and password","parameters":[{"name":"email","description":"The administrator's registered email address used for login. Must match the email field in the communitybbs_administrator table.","schema":{"type":"string","format":"email"}},{"name":"password","description":"The plain-text password provided by the administrator. This will be hashed and compared against the stored password_hash in the communitybbs_administrator table for authentication. No stored hash is transmitted.","schema":{"type":"string","minLength":8,"maxLength":128}}],"requestBody":null,"responseBody":{"description":"Returns a JWT token and user context upon successful administration login.","typeName":"ICommunitybbsAdministrator.IAuthorized"},"authorizationRole":"administrator","name":"signIn","path":"/auth/administrator/login","method":"post"},{"specification":"Registration endpoint for creating a new administrator account. This operation allows an existing superuser or system to create an administrative account for a new user with email, password, and display name. The new administrator record is inserted into the communitybbs_administrator table with password_hash generated via BCrypt. A corresponding session is created to establish initial authentication. This endpoint is restricted to system-level users or pre-authorized entities and is not available for public registration.","authorizationType":"join","description":"This join endpoint creates a new administrative account in the communitybbs_administrator table.\n\nThe system validates the request parameters: email must be unique and in a valid email format, password must meet complexity requirements (at least 8 characters), and display_name must be non-empty. The password is hashed using BCrypt before storage; the plaintext password is never persisted. The administrator record is inserted with a generated UUID for id and the current timestamp for created_at and updated_at fields.\n\nA corresponding session entry is created in the communitybbs_session table with a randomly generated cryptographically secure token, an expiration timestamp (typically 30 days), and links the session to the new administrator via actor_id. The is_valid flag is set to true, and last_activity_at is initialized to the current time. This enables immediate authentication after creation.\n\nThis endpoint is only available to system-level processes or superusers with privileged access. It is not exposed to regular members or guests. This separation ensures that administrative accounts are not freely creatable by end users, preserving the system's security model.\n\nAfter creation, the system returns a JWT token in the response that allows immediate use of administrator privileges. The session table records all activity for audit and revocation purposes. This operation is atomic and must succeed or fail as a unit.\n\nNo soft delete mechanism applies to this entity; new administrators are created and can only be deactivated through the delete operation or session revocation.","summary":"Register a new administrator account","parameters":[{"name":"email","description":"The email address of the new administrator. Must be unique and follow valid email format as enforced by the schema.","schema":{"type":"string","format":"email"}},{"name":"password","description":"The plaintext password for the new administrator. Must be at least 8 characters long and will be hashed using BCrypt before storage. Plaintext is discarded immediately after hashing.","schema":{"type":"string","minLength":8,"maxLength":128}},{"name":"displayName","description":"The display name to be used by the new administrator in moderation logs and UI. Must be non-empty and truncated to 32 characters if longer.","schema":{"type":"string","minLength":1,"maxLength":32}}],"requestBody":null,"responseBody":{"description":"Returns a JWT token and user context immediately upon successful administrator account creation.","typeName":"ICommunitybbsAdministrator.IAuthorized"},"authorizationRole":"administrator","name":"join","path":"/auth/administrator/join","method":"post"},{"specification":"Refreshes the administrator's active session token. This endpoint extends the validity of an existing session using a valid refresh token. Each refresh updates the expires_at and last_activity_at fields in the communitybbs_session table, giving the administrator uninterrupted access without requiring a full re-login. The endpoint ensures that only active and unrevoked tokens can be refreshed, and it blocks any attempts to refresh expired or deleted sessions.","authorizationType":"refresh","description":"This refresh endpoint allows administrators to renew their session token before expiration without requiring a full login.\n\nThe client submits a valid, non-expired session token via the Authorization header. The system looks up the token in the communitybbs_session table and verifies that: (1) the token matches exactly, (2) expires_at is in the future, (3) is_valid is true, and (4) deleted_at is null. If all validations pass, the system updates the expires_at field to extend the session by the configured grace period (typically 30 days) and updates last_activity_at to the current time. A new token may be generated for rotational security or the same token may be reused depending on system configuration.\n\nThis endpoint prevents token theft by rotating tokens in high-security mode or issuing new tokens upon refresh. Updated session data is written atomically to the database with a timestamp, and a new refresh token is returned in the response. The client must use the updated token for all future requests.\n\nThe last_activity_at field is used to implement grace period behavior: if a valid token is used within the last 5 minutes, it's considered active, allowing seamless continuation of work. This flow enables administrators to remain logged in across app sessions with minimal disruption. Revoked or deleted sessions are permanently rejected.\n\nNo other entity type (member or guest) can use this endpoint. This refresh mechanism is exclusive to administrator sessions, aligning with the communitybbs_administrator's distinct schema separation from the communitybbs_member.","summary":"Refresh the administrator's session token","parameters":[],"requestBody":null,"responseBody":{"description":"Returns a newly issued JWT token extending the administrator's session validity.","typeName":"ICommunitybbsAdministrator.IAuthorized"},"authorizationRole":"administrator","name":"refresh","path":"/auth/administrator/refresh","method":"post"},{"specification":"Creates a new sub-community with specified name, category, description, rules, and optional logo/banner. This operation requires full administrative privileges and bypasses user creation restrictions. The new community is inserted into the communitybbs_community table with the provided metadata, and a session log is created for audit purposes. The name must be unique, alphanumeric, with hyphens or underscores, 3–32 characters, and is case-insensitive. The operation is atomic and will fail if any field violates the schema constraints.","authorizationType":null,"description":"This endpoint allows administrators to create new sub-communities using the communitybbs_community table.\n\nThe request provides fields: name (required), category (required), description (optional), rules (optional array of strings), logo (optional URL), banner (optional URL). The name is validated: must be 3–32 characters, contain only alphanumeric characters, hyphens (-), or underscores (_), and must be unique across all existing communities. Case-insensitive uniqueness is enforced by the unique index on the name column. The category must be one of the predefined values from the predefined list: \"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\", or \"General\".\n\nThe field rules is stored as a null-allowed string, converted from a JSON array of strings. If provided, each rule is checked for length (<100 chars) and maximum count (10 rules). The logo and banner URLs are accepted as strings and validated for format but not checked for existence.\n\nUpon creation, the system assigns created_at and updated_at timestamps, sets member_count to 0, and last_active_at to the creation time.\nA trusting subscription to the community associated with a similar significant and coordinated action will create a community in the ! community and, under any explicit oui greater InetAddress condition may be required.","summary":"Create a new community (Admin only)","parameters":[{"name":"name","description":"The unique identifier for the community. Must be 3–32 characters long, contain only alphanumeric characters, hyphens (-), or underscores (_), and must not be duplicated.","schema":{"type":"string","minLength":3,"maxLength":32,"pattern":"^[a-z0-9_-]+$"}},{"name":"category","description":"The category to classify the community. Must be one of the predefined system categories.","schema":{"type":"string","enum":["Tech & Programming","Science","Movies & TV","Games","Sports","Lifestyle & Wellness","Study & Education","Art & Design","Business & Finance","News & Current Affairs","General"]}},{"name":"description","description":"A brief description of the community's purpose, up to 500 characters. Optional.","schema":{"type":"string","maxLength":500}},{"name":"rules","description":"An array of up to 10 community rules, each up to 100 characters. Stored as a JSON-encoded string.","schema":{"type":"string","maxLength":3000}},{"name":"logo","description":"URL to the community logo image. Must be a valid URL. Optional.","schema":{"type":"string","format":"uri","maxLength":80000}},{"name":"banner","description":"URL to the community banner image. Must be a valid URL. Optional.","schema":{"type":"string","format":"uri","maxLength":80000}}],"requestBody":null,"responseBody":{"description":"Returns the newly created community object with full metadata.","typeName":"ICommunitybbsCommunity"},"authorizationRole":"administrator","name":"create","path":"/admin/communities","method":"post"},{"specification":"Retrieves a single community by its name (URL identifier) for administrative view. This endpoint returns all metadata including rules, logo, banner, and deletion status. Unlike the public endpoint, this version includes soft-deleted communities and is intended for moderation tools. The response contains the complete record from the communitybbs_community table for audit or recovery purposes.","authorizationType":null,"description":"This endpoint retrieves a specific community by its name identifier for administrative review.\n\nThe system looks up the community in the communitybbs_community table using the name parameter (case-insensitive lookup). If the community exists, the full record is returned including id, description, category, logo, banner, rules, created_at, updated_at, deleted_at, member_count, and last_active_at. This endpoint returns soft-deleted records (where deleted_at is not null) unlike the public API, enabling administrators to view and potentially restore archived communities.\n\nThe response includes all fields as stored in the schema, including the rules array as a JSON string and the image URLs. No filtering is applied based on user access rights; administrators always see the complete state. This operation is read-only and does not affect any data.\n\nThis endpoint is used in moderation dashboards, recovery workflows, or compliance audits where visibility into historical or inactive communities is required. The name parameter is a required path variable that must match exactly with the unique index constraint on the name field in the community table.","summary":"Get full details of a community by name (Admin only)","parameters":[{"name":"name","description":"The unique name identifier of the community (e.g., 'ai', 'retro-gaming'). Case-insensitive, must match exactly.","schema":{"type":"string","minLength":3,"maxLength":32,"pattern":"^[a-z0-9_-]+$"}}],"requestBody":null,"responseBody":{"description":"Returns the complete community object including hidden or deleted fields.","typeName":"ICommunitybbsCommunity"},"authorizationRole":"administrator","name":"at","path":"/admin/communities/{name}","method":"get"},{"specification":"Updates metadata of an existing community including name, description, category, rules, logo, or banner. This operation requires administrative privileges and updates the communitybbs_community table. The system enforces uniqueness and format rules for modified fields. The name change triggers an update to all related search indexes (search_post, search_comment) to ensure consistency across search results.","authorizationType":null,"description":"This endpoint allows administrators to update the metadata of an existing community in the communitybbs_community table.\n\nFields that can be modified: name, category, description, rules, logo, banner. The name field can be changed, but must remain unique among all communities (case-insensitive). If the name changes, the system automatically updates all related search index entries in communitybbs_search_post and communitybbs_search_comment to reflect the new name, ensuring search consistency.\n\nThe category must be from the predefined list. The rules field, if updated, must be a JSON-encoded array of strings, each ≤100 characters with a maximum of 10 rules. The logo and banner URLs are updated as strings, but not validated for content or existence.\n\nThe updated_at timestamp is automatically set to the current time. The operation is atomic and will fail if the name violates the unique constraint or any text field exceeds its maximum length.\n\nThis workflow allows administrators to correct mistakes, reorganize categorization, update guidelines, or modernize branding. Changes are persisted immediately and reflected in all UIs that display the community. This endpoint does not affect membership status or posts within the community.","summary":"Update community metadata (Admin only)","parameters":[{"name":"name","description":"The current unique name identifier of the community to update.","schema":{"type":"string","minLength":3,"maxLength":32,"pattern":"^[a-z0-9_-]+$"}}],"requestBody":{"description":"Patch payload containing fields to update. Only specified fields are modified.","typeName":"ICommunitybbsCommunity.IUpdate"},"responseBody":{"description":"Returns the updated community object with new values.","typeName":"ICommunitybbsCommunity"},"authorizationRole":"administrator","name":"update","path":"/admin/communities/{name}","method":"put"},{"specification":"Soft-deletes a community by marking it as archived in the database. This action hides the community from all public and member-facing views but preserves all associated posts, comments, and data for potential restoration. The deleted_at field is set to the current timestamp and is recorded in the system log. This operation is reversible by setting deleted_at to null.","authorizationType":null,"description":"This endpoint soft-deletes a community, archiving it from public view without permanent data destruction.\n\nThe system locates the community by name in the communitybbs_community table and sets the deleted_at field to the current timestamp. This causes the community to be excluded from all public queries (Home feed, Explore page, Search results, etc.) but retains all related data: posts, comments, votes, and logs.\n\nThe operation triggers an update to the search index tables (communitybbs_search_community, communitybbs_search_post, communitybbs_search_comment) to ensure the content is hidden from search results. The member_count is preserved, and last_active_at is not updated.\n\nA log entry is created in the communitybbs_log table with action_type 'community_deleted', linking to the deleted community and the administrator who performed the action.\n\nThis operation is reversible. Setting deleted_at to null via an update operation will restore the community to full visibility. The community name remains reserved and cannot be reused until the community is restored.\n\nSoft-delete is preferred over hard-delete to preserve historical integrity, enable audit recovery, and comply with data retention policies.","summary":"Soft-delete a community (Admin only)","parameters":[{"name":"name","description":"The name identifier of the community to delete.","schema":{"type":"string","minLength":3,"maxLength":32,"pattern":"^[a-z0-9_-]+$"}}],"requestBody":null,"responseBody":{"description":"Returns the updated community object with deleted_at populated.","typeName":"ICommunitybbsCommunity"},"authorizationRole":"administrator","name":"erase","path":"/admin/communities/{name}","method":"delete"},{"specification":"Retrieves a paginated list of all communities for administrative review. This endpoint returns all communities, including soft-deleted ones, sorted by any field (name, created_at, member_count). Used for dashboard views and bulk moderation tasks. Supports full text search across name and description for fast filtering.","authorizationType":null,"description":"This endpoint returns a paginated list of all communities for administrative supervision and bulk management.\n\nThe system queries the communitybbs_community table with optional filters: search query (for full-text search on name and description), sort_by (name | created_at | member_count | last_active_at), sort_order (asc | desc), page (1-indexed), and limit (default 20, max 100). Results include all records, even those with deleted_at set, enabling administrators to view archived communities.\n\nThe pagination uses offset-based retrieval with query parameters. Search uses pg_trgm GIN indexes on name and description for efficient keyword matching. If a search term is provided, results are sorted by relevance (similarity score) then by created_at. Sorting by other fields ignores relevance.\n\nThe response includes a metadata object with total_count, page, limit, and has_more to enable client-side navigation. Each item in the data array is a full community object as defined in the schema.\n\nThis endpoint is critical for moderation dashboards, compliance reviews, and cleanup workflows where visibility of all communities, both active and archived, is necessary. It is the administrative equivalent of the public /c endpoint, but with no access restrictions.","summary":"List all communities with search and pagination (Admin only)","parameters":[{"name":"search","description":"Keyword for full-text search across community name and description. Optional.","schema":{"type":"string","minLength":2,"maxLength":100}},{"name":"sortBy","description":"Field to sort by: name, created_at, member_count, last_active_at. Default: name.","schema":{"type":"string","enum":["name","created_at","member_count","last_active_at"],"default":"name"}},{"name":"sortOrder","description":"Sort direction: asc or desc. Default: asc.","schema":{"type":"string","enum":["asc","desc"],"default":"asc"}},{"name":"page","description":"Page number for pagination. 1-indexed. Default: 1.","schema":{"type":"integer","minimum":1,"default":1}},{"name":"limit","description":"Number of results per page. Max 100. Default: 20.","schema":{"type":"integer","minimum":1,"maximum":100,"default":20}}],"requestBody":null,"responseBody":{"description":"Paginated response containing list of communities and metadata.","typeName":"IPageICommunitybbsCommunity"},"authorizationRole":"administrator","name":"index","path":"/admin/communities","method":"get"},{"specification":"Permanently deletes all data associated with a community. This is a destructive, irreversible operation that removes the community record and all related posts, comments, votes, and search indexes. Only available to highly privileged administrators after confirmation. Used only when data must be completely erased for legal or compliance reasons.","authorizationType":null,"description":"This endpoint performs a hard delete of a community and all its associated content, irreversibly purging data from the system.\n\nThe operation begins by locating the community by name in the communitybbs_community table. If found, the system then deletes all dependent records: all posts in communitybbs_post (via cascade), all comments in communitybbs_comment (via cascade), all votes in communitybbs_vote, all search entries in communitybbs_search_post, communitybbs_search_comment, and communitybbs_search_community.\n\nAll deletions are performed atomically using database transactions to ensure integrity. The community record itself is deleted from the communitybbs_community table.\n\nA log entry is created in the communitybbs_log table with action_type 'community_permanently_deleted', including the administrator ID and timestamp. This action cannot be undone and data recovery is impossible.\n\nThis endpoint is only accessible to a select few super-administrators after multiple confirmation steps. It is not exposed in UIs and is intended only for emergency legal compliance, data breaches, or CCPA/GDPR deletion requests where full erasure is mandated.\n\nUse this only when soft-delete is insufficient and legal obligations require complete data destruction.","summary":"Permanently delete a community and all its data (Admin only)","parameters":[{"name":"name","description":"The name identifier of the community to permanently delete.","schema":{"type":"string","minLength":3,"maxLength":32,"pattern":"^[a-z0-9_-]+$"}}],"requestBody":null,"responseBody":{"description":"Confirms successful deletion with no response body.","typeName":"IResponseEmpty"},"authorizationRole":"administrator","name":"eraseAll","path":"/admin/communities/{name}/permanent-delete","method":"delete"},{"specification":"Withdraws an administrator's access by invalidating any active session and preventing future login. This does not delete the administrator record, but revokes access by setting is_valid to false in the session table and appending a deletion timestamp. This operation is used to temporarily suspend or permanently deactivate an admin account without deleting their audit trail.","authorizationType":null,"description":"This endpoint suspends an administrator’s access by invalidating their active sessions and blocking future authentication.\n\nThe system searches for all active sessions (where is_valid = true and deleted_at is null) associated with the administrator’s email in the communitybbs_session table. Each found session is updated: is_valid is set to false, and deleted_at is set to the current timestamp. This immediately terminates all active sessions without needing to revoke individual tokens.\n\nThe administrator record in communitybbs_administrator remains intact, preserving the user’s audit history, display_name, and email. This preserves accountability and enables future reactivation if needed.\n\nA log entry is created in the communitybbs_log table with action_type 'administrator_suspended', including the identity of the suspending administrator and the target administrator.\n\nThis operation does not delete the primary administrator record, so their email cannot be reused until explicitly freed. This ensures the suspension is reversible by resetting is_valid to true and generating new tokens. It is equivalent to disabling an account in enterprise systems, rather than deleting it.","summary":"Suspend administrator access by revoking all sessions (Admin only)","parameters":[{"name":"email","description":"The email address of the administrator to suspend.","schema":{"type":"string","format":"email"}}],"requestBody":null,"responseBody":{"description":"Returns the updated administrator record with confirmation of suspension.","typeName":"ICommunitybbsAdministrator"},"authorizationRole":"administrator","name":"suspend","path":"/admin/administrators/{email}/suspend","method":"put"},{"specification":"Restores suspended administrator access by re-enabling active sessions. This operation resets the is_valid flag to true and clears the deleted_at timestamp in the session table for all sessions associated with the target administrator. The administrator can then login using their existing credentials to regain access.","authorizationType":null,"description":"This endpoint reactivates a previously suspended administrator account by restoring valid sessions.\n\nThe system locates all entries in the communitybbs_session table where: (1) actor_id corresponds to the administrator with the provided email, and (2) deleted_at is set (meaning they were suspended). For each such session, is_valid is set to true and deleted_at is cleared (set to null).\n\nThe administrator record in communitybbs_administrator is not modified. No new credentials are issued; the administrator can log back in using their existing password and email.\n\nA log entry is created in the communitybbs_log table with action_type 'administrator_resumed', logging the administrator who performed the restoration and the target administrator.\n\nThis operation reverses the suspend operation and allows administrators to regain access without needing to be recreated. It is the preferred method over account deletion and recreation to preserve audit history and maintain data integrity.","summary":"Restore suspended administrator access (Admin only)","parameters":[{"name":"email","description":"The email address of the administrator to resume.","schema":{"type":"string","format":"email"}}],"requestBody":null,"responseBody":{"description":"Returns the updated administrator record with confirmation of access restoration.","typeName":"ICommunitybbsAdministrator"},"authorizationRole":"administrator","name":"resume","path":"/admin/administrators/{email}/resume","method":"put"},{"specification":"Removes an administrator account from the system permanently. This operation deletes the administrator record from the communitybbs_administrator table and all associated sessions from the communitybbs_session table. The email address is freed for reuse. This is an irreversible action that must be confirmed by two administrators.","authorizationType":null,"description":"This endpoint permanently deletes an administrator account from the system.\n\nThe system first verifies that the administration request is authorized through the authenticated administrator’s privileges, and requires dual-authorization confirmation to prevent unauthorized deletion.\n\nIt fetches the administrator record by email from the communitybbs_administrator table, then deletes all associated sessions from the communitybbs_session table (with CASCADE on admin_id). Finally, it deletes the administrator record itself from the communitybbs_administrator table.\n\nA permanent log entry is created in the communitybbs_log table with action_type 'administrator_deleted', recording the operator and the deleted administrator’s identity.\n\nThe email address is freed and may be reused. No data related to this administrator is retained in the active system. This deletion is completely irreversible.\n\nThis operation is reserved for extreme circumstances: administrator departure, security breaches, or legal requirement. It is always accompanied by an audit trail and fail-safes to prevent accidental removal.","summary":"Permanently delete an administrator account (Admin only)","parameters":[{"name":"email","description":"The email address of the administrator to delete permanently.","schema":{"type":"string","format":"email"}}],"requestBody":null,"responseBody":{"description":"Confirms successful deletion with no response body.","typeName":"IResponseEmpty"},"authorizationRole":"administrator","name":"eraseAdministrator","path":"/admin/administrators/{email}","method":"delete"},{"specification":"Retrieves detailed information about a specific member account. This endpoint exposes member details including email, join date, and last active session timestamp. Used for user moderation and review. Does not reveal password hash or internal session data. The member is identified by email or ID.","authorizationType":null,"description":"This endpoint allows administrators to view detailed information about a registered member account stored in the communitybbs_member table.\n\nThe system looks up the member either by email (provided in path) or by ID (if supported in future). It returns the following fields: id, email, display_name, created_at, updated_at. The password_hash is never returned. This information is used for moderation purposes such as reviewing account activity, verifying identity, or diagnosing reports.\n\nThe operation includes a timestamp of the member’s last active session by joining with the communitybbs_session table (most recent session where is_valid = true). This provides context on whether the member is active or dormant.\n\nNo post, comment, or vote history is included in the response to preserve privacy and limit data exposure. The endpoint is read-only and does not modify any data.\n\nThis endpoint supports only administrative access and is not available to regular members. This ensures that privacy is maintained while enabling moderation workflows.","summary":"View member account details (Admin only)","parameters":[{"name":"email","description":"The email address of the member to inspect.","schema":{"type":"string","format":"email"}}],"requestBody":null,"responseBody":{"description":"Returns comprehensive but privacy-safe details of the member account.","typeName":"ICommunitybbsMember"},"authorizationRole":"administrator","name":"atMember","path":"/admin/members/{email}","method":"get"},{"specification":"Bans a member from the platform, preventing all future logins and interactions. This operation revokes all active sessions and disallows re-authentication using the member's credentials. The member's posts and comments remain visible, but they cannot create new content or vote. This is a non-permanent reputation-based action.","authorizationType":null,"description":"This endpoint bans a member from the platform, effectively blocking their access while preserving content history.\n\nThe system identifies the member by their email, then locates all active sessions (where is_valid = true) in the communitybbs_session table, and permanently marks them as deleted by setting deleted_at to the current timestamp and is_valid to false.\n\nThe member's record in the communitybbs_member table is not deleted. Their email, username, and historical contributions remain intact. They are prevented from authenticating any further; login attempts will be denied.\n\nA log entry is created in the communitybbs_log table with action_type 'member_banned' and includes the moderator's ID and the reason (if provided). The ban is immutable and requires restoration via a separate endpoint.\n\nThis is a reputation action, not a deletion. Posts and comments created by the member remain visible to maintain context and allow community review. The ban does not affect post votes or comment threads.\n\nTo reinstate access, the administrator must use the restore membership endpoint.","summary":"Ban a member from the platform (Admin only)","parameters":[{"name":"email","description":"The email address of the member to ban.","schema":{"type":"string","format":"email"}}],"requestBody":null,"responseBody":{"description":"Returns the updated member record with ban status confirmed.","typeName":"ICommunitybbsMember"},"authorizationRole":"administrator","name":"ban","path":"/admin/members/{email}/ban","method":"put"},{"specification":"Restores a previously banned member's ability to log in and interact. This operation reactivates the member's account by allowing new session creation, but does not restore any previously deleted sessions. The member must login with existing credentials to resume activity.","authorizationType":null,"description":"This endpoint reinstates access for a previously banned member by allowing new session creation.\n\nThe system looks up the member by their email in the communitybbs_member table. It does not restore any old sessions; instead, it permits future sessions to be generated upon successful login. No existing deleted sessions are retrieved.\n\nThe member's data (email, display_name, created_at) remains unchanged. The ban status is considered resolved, and the member may attempt to log in again.\n\nIf the member attempts to log in, the authentication flow proceeds normally, and a new session is created. The previous inactive sessions remain deleted for audit purposes.\n\nA log entry is created in the communitybbs_log table with action_type 'member_unbanned', recording the administrator who performed the action and the member's identity.\n\nThis operation does not delete the ban history; it only re-enables the account. The track record of past violations remains intact for review and analytics.","summary":"Restore banned member access (Admin only)","parameters":[{"name":"email","description":"The email address of the member to unban.","schema":{"type":"string","format":"email"}}],"requestBody":null,"responseBody":{"description":"Returns the updated member record with ban status lifted.","typeName":"ICommunitybbsMember"},"authorizationRole":"administrator","name":"unban","path":"/admin/members/{email}/unban","method":"put"},{"specification":"Deletes a member's account completely, removing all their posts, comments, votes, and session history. This is an irreversible action that purges all user-generated content from the system. Used only for legal compliance, severe abuse, or data deletion requests.","authorizationType":null,"description":"This endpoint permanently deletes a member's account and all their contributions, removing their data entirely from the system.\n\nThe system identifies the member by email, then begins a cascading delete process: all sessions in communitybbs_session (where actor_id matches), all votes in communitybbs_vote (where actor_id matches), all comments in communitybbs_comment (where communitybbs_member_id matches), all posts in communitybbs_post (where communitybbs_member_id matches), and finally the member record itself in communitybbs_member.\n\nThe deletion is atomic, ensuring no orphaned data remains. A hard delete is performed — the data is completely removed from the database.\n\nA detailed log entry is created in the communitybbs_log table with action_type 'member_permanently_deleted', including the operator's identity and the email of the deleted member.\n\nThis operation is irreversible and the member's email may be reused. It is intended only for legal compliance (GDPR, CCPA), severe abuse that requires censorship, or formal user requests for complete removal. Use with extreme caution.","summary":"Permanently delete a member and all their content (Admin only)","parameters":[{"name":"email","description":"The email address of the member to delete permanently.","schema":{"type":"string","format":"email"}}],"requestBody":null,"responseBody":{"description":"Confirms successful deletion with no response body.","typeName":"IResponseEmpty"},"authorizationRole":"administrator","name":"eraseMember","path":"/admin/members/{email}","method":"delete"},{"specification":"This operation retrieves a paginated list of communities with advanced filtering, searching, and sorting capabilities. It operates on the communitybbs_community table from the Prisma schema and supports complex queries to find communities based on various criteria including name, description, category, and activity status. The operation is designed to power the Explore page and search functionality as defined in the requirements.","path":"/communitybbs/communities","method":"patch","summary":"Search and retrieve a filtered, paginated list of communities","description":"Retrieve a filtered and paginated list of communities from the system. This operation provides advanced search capabilities for finding communities based on multiple criteria including partial name matching, description keyword search, category filtering, and activity-based sorting.\n\nThe operation supports comprehensive pagination with configurable page sizes and multiple sort orders including 'Name Match' (default for community search) and 'Recently Created'. Communities can be sorted by name similarity to the search query, creation date, or popularity metrics derived from member count and last active timestamp.\n\nSecurity considerations include rate limiting for search operations and appropriate filtering of sensitive community information based on the requesting user's authorization level. Only users with appropriate permissions can access detailed community information, while basic community lists may be available to authenticated users.\n\nThis operation integrates with the communitybbs_community table as defined in the Prisma schema, incorporating all available community fields including name, description, category, logo, banner, rules, member_count, and last_active_at. The response includes community summary information optimized for list displays, with options to include additional details based on authorization level. The search functionality leverages the communitybbs_search_community table for optimized full-text performance across name and description fields.","parameters":[],"requestBody":{"description":"Search criteria and pagination parameters for community filtering","typeName":"ICommunitybbsCommunity.IRequest"},"responseBody":{"description":"Paginated list of community summary information matching search criteria","typeName":"IPageICommunitybbsCommunity.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"search"},{"specification":"This operation retrieves a single community by its unique identifier. It operates on the communitybbs_community table from the Prisma schema and provides comprehensive details about a specific community including its name, description, category, visual assets, rules, member count, and activity status. This endpoint powers the community home page display and ensures that community details are accessible via direct link.","path":"/communitybbs/communities/{communityId}","method":"get","summary":"Retrieve a specific community by its unique identifier","description":"Retrieve detailed information about a specific community identified by its unique UUID. This operation is used to display community details on the community home page when accessed via /c/[name] URL structure.\n\nThe system retrieves the community data from the communitybbs_community table, incorporating all relevant fields including name, description, category, logo, banner, rules, member_count, and last_active_at. The community name is stored in a case-sensitive format to preserve exact URL paths, but the system performs case-insensitive lookups in application logic to ensure consistent access.\n\nSecurity considerations include ensuring that private or deleted communities are not accessible to unauthorized users. The response includes full community metadata for authorized access, with special handling for communities that have been soft-deleted (where deleted_at is not null), which should return a 404 Not Found response.\n\nThis operation directly references the communitybbs_community table's fields as defined in the Prisma schema. The returned data includes the complete community description, rules array, and visual asset URLs. The member_count is provided as a denormalized field for performance optimization, but the actual membership count should be validated against the relationship to communitybbs_member via junction table logic in the service layer.\n\nRelated operations include the search operation on /communities for discovering communities and the update operation for administrative modifications. Error handling must account for invalid community identifiers and deleted communities with appropriate 404 responses.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified community","typeName":"ICommunitybbsCommunity"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"This operation creates a new community with the specified details. It operates on the communitybbs_community table from the Prisma schema and validates input against strict naming rules and unique constraints. This endpoint powers the community creation flow as defined in the requirements.","path":"/communitybbs/member/communities","method":"post","summary":"Create a new community","description":"Create a new community with the provided name, description, category, logo, banner, and rules configuration. This operation handles the community creation workflow as defined in the requirements, including validation of community name format and uniqueness.\n\nThe community name must adhere to the strict format rules: only alphanumeric characters, hyphens (-), and underscores (_) are permitted, with a length between 3 and 32 characters. The name must be unique across all existing communities, and the system performs a case-insensitive check to prevent duplicates with different casing.\n\nThe description field is limited to 500 characters as specified in the requirements. The category must be one of the predefined values: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. The rules field is stored as a JSON-encoded array of strings, each up to 100 characters, with a maximum of 10 rules permitted.\n\nThe logo and banner fields are optional URLs stored as text fields with maximum length of 80,000 characters to accommodate long URLs, but the system enforces size and format constraints at the application layer.\n\nWhen a community is successfully created, the system records the creation timestamp, initializes the member_count to 1 (the creator), and sets the last_active_at timestamp. The community is not associated with any member record at this level - that relationship is handled through a separate junction table (communitybbs_member_community) that is not exposed in this API.\n\nSecurity considerations require that only authenticated users (members) can create a community, which is handled by the authorizationRoles field (member) and validated through session authentication. The operation ensures that no community with the same name exists through a unique constraint on communitybbs_community.name.\n\nRelated operations include the PATCH /communities for searching communities and the PUT /communities/{communityId} for updating community details after creation. This operation does not create associated search index entries - that is handled by a background process that synchronizes with communitybbs_search_community.","parameters":[],"requestBody":{"description":"Creation data for a new community","typeName":"ICommunitybbsCommunity.ICreate"},"responseBody":{"description":"Details of the newly created community","typeName":"ICommunitybbsCommunity"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing community's details. It operates on the communitybbs_community table from the Prisma schema and allows modification of description, category, logo, banner, and rules for community creators. This endpoint powers the community editing functionality and enforces ownership validation.","path":"/communitybbs/member/communities/{communityId}","method":"put","summary":"Update a community's details","description":"Update an existing community's description, category, visual assets (logo and banner), or community rules. This operation enables community creators to modify their community's metadata after creation.\n\nThe operation validates that the authenticated user is the creator of the community (based on ownership) and only allows updates to specified fields: description, category, logo, banner, and rules. The community name is immutable after creation, as specified in the requirements - any attempt to modify the name will result in an error.\n\nField validation rules must be strictly enforced: description must not exceed 500 characters, category must be one of the predefined values, logo and banner URLs must be valid strings (up to 80,000 characters), and rules must be a JSON array containing up to 10 strings with a maximum of 100 characters each.\n\nThe updated_at timestamp is automatically updated to the current time when any change is accepted. The last_active_at timestamp is also updated to reflect the most recent activity, ensuring the community remains visible in the 'Recent Communities' list.\n\nSecurity considerations require the operation to authenticate the user's session and verify ownership before processing any updates. The system prevents unauthorized access by checking that the authenticated member's ID matches the creator's identity associated with the community.\n\nRelated operations include the POST /communities for community creation and the GET /communities/{communityId} for retrieving community details. This operation does not affect the member_count or the community name, which remain immutable after creation as per business requirements.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the community","typeName":"ICommunitybbsCommunity.IUpdate"},"responseBody":{"description":"Updated details of the community","typeName":"ICommunitybbsCommunity"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation permanently deletes a community from the platform. The community must not be soft-deleted already. This operation is only accessible to administrators and removes all associated posts, comments, votes, and search index entries. The deletion is hard (not soft) because the Prisma schema does not define a soft-delete column for the community entity other than deleted_at, but this field is maintained by system logic for tracking archival state, not soft deletion. This operation fully removes the community record and cleans up all dependent data to maintain referential integrity. This is a critical administrative function for content moderation and system cleanup.","path":"/communitybbs/administrator/communities/{communityId}","method":"delete","summary":"Permanently delete a community by ID","description":"Permanently delete a community and all its associated content from the platform. This operation is exclusively available to administrators and triggers a cascading deletion of all related data. When a community is deleted, all posts, comments, votes, and search index entries associated with the community are also removed from the database. This operation performs a hard delete, meaning the community record is permanently removed from the database and cannot be recovered. It is not a soft delete because, although the communitybbs_community model has a deleted_at field, this field is used for archival reporting and UI filtering only — the system does not preserve records after deletion; instead, log entries are maintained for audit purposes. This behavior is consistent with the requirement that administrators can delete communities and purge all associated data. The deletion is atomic and must succeed or fail entirely, ensuring no orphaned records remain. The system will also log the deletion event in the communitybbs_log table for audit trail purposes. This operation requires elevated permissions because it irreversibly removes user-generated content and metadata. Access is restricted to the administrator role with no fallback to other roles for security and compliance reasons.","parameters":[{"name":"communityId","description":"Unique identifier of the community to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves a paginated list of posts from a specific community, supporting advanced filtering, sorting, and pagination. It searches through active posts (not soft-deleted) in the specified community and returns results according to the requested sort order (Newest or Top). The request body contains parameters for sorting, pagination, and filtering, allowing complex queries without URL clutter. This operation provides efficient access to community content and supports full text search within the post title and body. The results are built from the communitybbs_post table, joined with the communitybbs_community table, and are optimized for performance using the community's post index. This is a critical operation for the home feed, community page, and global search functionality when restricted to a single community.","path":"/communitybbs/communities/{communityId}/posts","method":"patch","summary":"Search and retrieve paginated posts from a specific community","description":"Retrieve an ordered and paginated list of posts from a specific community, filtered by the provided search criteria. This operation supports advanced filtering using the request body, including sort order (Newest or Top), limit, offset, and text search. For the 'Newest' sort order, results are sorted by creation_time descending, and then by post_id descending for ties. For the 'Top' sort order, results are sorted by score (upvotes minus downvotes) descending, followed by creation_time descending, and finally by post_id descending. The operation only returns posts where deleted_at is null, ensuring archived posts are excluded. The results are constructed by querying the communitybbs_post table, using the communitybbs_community_id as the filter, and joined with the communitybbs_vote table to compute scores. The communitybbs_search_post table is not used here because this endpoint is community-specific and does not require full-text search across the whole platform — instead, it performs standard database queries optimized for range and index scans on the community-specific post set. Pagination is implemented via offset and limit, fetching exactly 20 posts per page as per requirements. This endpoint must be accessible to all authenticated users and reflects the user's joined community state — if the user has not joined the community, the results are still accessible (read-only), matching the public nature of community posts. No role restrictions are needed because posts within communities are publicly readable by design.","parameters":[{"name":"communityId","description":"Unique identifier of the community to retrieve posts from.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering posts within a community.","typeName":"ICommunitybbsPost.IRequest"},"responseBody":{"description":"Paginated list of posts from the specified community, including score, author, creation time, and comment count.","typeName":"IPageICommunitybbsPost"},"authorizationRoles":[],"name":"index","authorizationRole":null,"authorizationType":null},{"specification":"This operation retrieves the detailed information of a specific post identified by ID within a community. The post must be active (not soft-deleted). Returns the full post content including title, body, author, community, creation time, and calculated score (upvotes minus downvotes). This is a core read operation for displaying individual post detail pages and is read-only. The operation does not return comments — comment retrieval is handled by a separate endpoint. It ensures users see accurate, structured data for a post they are viewing, supporting the requirements for displaying post cards and detail pages.","path":"/communitybbs/communities/{communityId}/posts/{postId}","method":"get","summary":"Retrieve the full details of a specific post","description":"Retrieve the detailed information of a specific post, identified by its unique post ID within the context of its community. This operation returns the complete post object with all its fields: title, body, author display name (as captured at time of creation), creation timestamp, update timestamp, member count, and score (calculated as upvotes minus downvotes). The system verifies that the target post belongs to the specified community and that the post has not been soft-deleted (deleted_at is null). This operation does not return associated comments — those are available via a separate endpoint at /communities/{communityId}/posts/{postId}/comments. This endpoint is designed to support public viewability; any user — guest or authenticated — may access a post detail page. The query joins the communitybbs_post table with the communitybbs_community table to confirm relationship and with the communitybbs_vote table to compute the score using sum conditions. No user role restrictions are needed because access to post content is public by design, as specified in the requirements. The response is optimized for frontend rendering and includes all required metadata for rendering the post detail page without requiring additional API calls. This endpoint must maintain high performance because it is frequently accessed during user navigation.","parameters":[{"name":"communityId","description":"Unique identifier of the community containing the post.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the post, including title, body, author, community, creation time, and vote score.","typeName":"ICommunitybbsPost"},"authorizationRoles":[],"name":"at","authorizationRole":null,"authorizationType":null},{"specification":"This operation creates a new post within a specified community. The user must be authenticated as a member, and the post must adhere to content length rules (title: 5-120 characters, body: 10-10,000 characters). The post cannot contain scripts or HTML. The author's display name defaults to 'Anonymous' if not provided. This operation persists the post, updates the community's last_active_at timestamp, and increments post count. The post is instantly visible to all users viewing the community feed. This is not a system-generated event — it is a direct user-initiated action requiring explicit input.","path":"/communitybbs/member/communities/{communityId}/posts","method":"post","summary":"Create a new post in a specified community","description":"Create a new post in the specified community. This operation requires the user to be authenticated as a member and to submit a valid title and body. The title must be between 5 and 120 characters and the body between 10 and 10,000 characters, as per requirements. The body content must be plain text only, with no HTML, scripts, or code allowed — any attempt to include these will be rejected. The author's display name is captured at the time of submission and stored as part of the post for consistency, even if the member later changes their display name. If no display name is provided, the system defaults to 'Anonymous'. The new post is associated with the given community via the communityId path parameter and the authenticated member’s ID. Upon successful creation, the community's last_active_at timestamp is updated to the current time, and the post count is incremented internally. The post is immediately available in the community feed and is indexed in the search system. This operation does not require soft delete handling during submission because the post is created in active state only; soft deletion is a permissioned moderation action handled separately. The post is created as a direct user-initiated action, not a system-generated record, and must be trackable to the user who submitted it. This endpoint is protected — guests cannot create posts and will be redirected to login. Only the member role has permission to invoke this endpoint.","parameters":[{"name":"communityId","description":"Unique identifier of the community to which the post will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation data for a new post, including title, body, and optional display name.","typeName":"ICommunitybbsPost.ICreate"},"responseBody":{"description":"Created post object with id, title, body, author, created_at, and score.","typeName":"ICommunitybbsPost"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null},{"specification":"This operation soft-deletes a community by setting the deleted_at field to the current timestamp. The community is marked as archived and hidden from public views. All dependent data (posts, comments, votes, and search indices) are deleted cascadingly. The community record remains in the database for audit purposes with its metadata preserved. This is a hard cascading deletion of related content with soft archiving of the community entity, consistent with the schema design. This operation is only accessible to administrators and is used for content moderation and compliance. It is not a complete hard delete because the community entity is preserved for audit trail, but all user-facing content is permanently removed.","path":"/communities/{communityId}","method":"delete","summary":"Soft delete a community by ID","description":"Soft delete a community by setting the deleted_at field to the current timestamp. The community is marked as archived and hidden from public views. All dependent data (posts, comments, votes, and search indices) are deleted cascadingly. The community record remains in the database for audit purposes with its metadata preserved. This is a hard cascading deletion of related content with soft archiving of the community entity, consistent with the schema design. This operation is only accessible to administrators and is used for content moderation and compliance. It is not a complete hard delete because the community entity is preserved for audit trail, but all user-facing content is permanently removed. The deletion triggers a cascade that removes all communitybbs_post, communitybbs_search_post, communitybbs_search_comment, and communitybbs_log entries linked to this community. A log entry is created in communitybbs_log with action_type = 'community_deleted' to maintain auditability. This operation cannot be undone and must be used with caution. The community name is not made available for reuse to prevent impersonation. Access is restricted to the administrator role with no fallback to other roles for security and compliance reasons.","parameters":[{"name":"communityId","description":"Unique identifier of the community to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase"},{"specification":"This operation retrieves a paginated list of posts from a specific community, supporting advanced filtering, sorting, and pagination. It searches through active posts (not soft-deleted) in the specified community and returns results according to the requested sort order (Newest or Top). The request body contains parameters for sorting, pagination, and filtering, allowing complex queries without URL clutter. This operation provides efficient access to community content and supports full text search within the post title and body. The results are built from the communitybbs_post table, joined with the communitybbs_community table, and are optimized for performance using the community's post index. This is a critical operation for the home feed, community page, and global search functionality when restricted to a single community.","path":"/communities/{communityId}/posts","method":"patch","summary":"Search and retrieve paginated posts from a specific community","description":"Retrieve an ordered and paginated list of posts from a specific community, filtered by the provided search criteria. This operation supports advanced filtering using the request body, including sort order (Newest or Top), limit, offset, and text search. For the 'Newest' sort order, results are sorted by creation_time descending, and then by post_id descending for ties. For the 'Top' sort order, results are sorted by score (upvotes minus downvotes) descending, followed by creation_time descending, and finally by post_id descending. The operation only returns posts where deleted_at is null, ensuring archived posts are excluded. The results are constructed by querying the communitybbs_post table, using the communitybbs_community_id as the filter, and joined with the communitybbs_vote table to compute scores using sum conditions. The communitybbs_search_post table is not used here because this endpoint is community-specific and does not require full-text search across the whole platform — instead, it performs standard database queries optimized for range and index scans on the community-specific post set. Pagination is implemented via offset and limit, fetching exactly 20 posts per page as per requirements. This endpoint must be accessible to all authenticated users and reflects the user's joined community state — if the user has not joined the community, the results are still accessible (read-only), matching the public nature of community posts. No role restrictions are needed because posts within communities are publicly readable by design.","parameters":[{"name":"communityId","description":"Unique identifier of the community to retrieve posts from.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for filtering posts within a community. Sort must be one of 'Newest' or 'Top'. Default page is 1, limit is 20. Supports full-text search on title and body.","typeName":"ICommunitybbsPost.IRequest"},"responseBody":{"description":"Paginated list of posts from the specified community, including score, author, creation time, and comment count. Score is calculated as the sum of upvotes minus downvotes of each post.","typeName":"IPageICommunitybbsPost"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"This operation retrieves the detailed information of a specific post identified by ID within a community. The post must be active (not soft-deleted). Returns the full post content including title, body, author, community, creation time, and calculated score (upvotes minus downvotes). This is a core read operation for displaying individual post detail pages and is read-only. The operation does not return comments — comment retrieval is handled by a separate endpoint. It ensures users see accurate, structured data for a post they are viewing, supporting the requirements for displaying post cards and detail pages.","path":"/communities/{communityId}/posts/{postId}","method":"get","summary":"Retrieve the full details of a specific post","description":"Retrieve the detailed information of a specific post, identified by its unique post ID within the context of its community. This operation returns the complete post object with all its fields: title, body, author display name (as captured at time of creation), creation timestamp, update timestamp, and score (calculated as upvotes minus downvotes). The system verifies that the target post belongs to the specified community and that the post has not been soft-deleted (deleted_at is null). This operation does not return associated comments — those are available via a separate endpoint at /communities/{communityId}/posts/{postId}/comments. This endpoint is designed to support public viewability; any user — guest or authenticated — may access a post detail page. The query joins the communitybbs_post table with the communitybbs_community table to confirm relationship and with the communitybbs_vote table to compute the score using sum conditions. No user role restrictions are needed because access to post content is public by design, as specified in the requirements. The response is optimized for frontend rendering and includes all required metadata for rendering the post detail page without requiring additional API calls. This endpoint must maintain high performance because it is frequently accessed during user navigation.","parameters":[{"name":"communityId","description":"Unique identifier of the community containing the post.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the post to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the post, including title, body, author, community, creation time, and vote score. Score is calculated as the sum of upvotes minus downvotes from the communitybbs_vote table.","typeName":"ICommunitybbsPost.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"This operation creates a new post within a specified community. The user must be authenticated as a member, and the post must adhere to content length rules (title: 5-120 characters, body: 10-10,000 characters). The post cannot contain scripts or HTML. The author's display name defaults to 'Anonymous' if not provided. This operation persists the post, updates the community's last_active_at timestamp, and increments post count. The post is instantly visible to all users viewing the community feed. This is not a system-generated event — it is a direct user-initiated action requiring explicit input.","path":"/communities/{communityId}/posts","method":"post","summary":"Create a new post in a specified community","description":"Create a new post in the specified community. This operation requires the user to be authenticated as a member and to submit a valid title and body. The title must be between 5 and 120 characters and the body between 10 and 10,000 characters, as per requirements. The body content must be plain text only, with no HTML, scripts, or code allowed — any attempt to include these will be rejected. The author's display name is captured at the time of submission and stored as part of the post for consistency, even if the member later changes their display name. If no display name is provided, the system defaults to 'Anonymous'. The new post is associated with the given community via the communityId path parameter and the authenticated member's ID. Upon successful creation, the community's last_active_at timestamp is updated to the current time, and the post count is incremented internally. The post is immediately available in the community feed and is indexed in the search system. This operation does not require soft delete handling during submission because the post is created in active state only; soft deletion is a permissioned moderation action handled separately. The post is created as a direct user-initiated action, not a system-generated record, and must be trackable to the user who submitted it. This endpoint is protected — guests cannot create posts and will be redirected to login. Only the member role has permission to invoke this endpoint.","parameters":[{"name":"communityId","description":"Unique identifier of the community to which the post will be added.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Creation data for a new post, including title, body, and optional display name.","typeName":"ICommunitybbsPost.ICreate"},"responseBody":{"description":"Created post object with id, title, body, author, created_at, and score. Score is calculated as the sum of upvotes minus downvotes, initially zero.","typeName":"ICommunitybbsPost.ISummary"},"authorizationType":null,"authorizationRole":"user","name":"create"},{"specification":"This operation retrieves a specific comment by its unique identifier within a post in a community. It operates on the communitybbs_comment table from the Prisma schema. The comment is identified by its ID and must belong to a specific post within a specific community. This endpoint provides detailed comment information including content, author display name, creation timestamp, and parent-child relationships.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}/comments/{commentId}","method":"get","summary":"Retrieve a specific comment by ID within a post","description":"This operation retrieves a specific comment by its unique identifier within a post in a community. The comment is identified by its ID and must belong to a specific post within a specific community. This endpoint provides detailed comment information including content, author display name, creation timestamp, and parent-child relationships. This functionality enables users to link directly to individual comments for reference or sharing.\n\nSecurity considerations dictate that this operation requires authentication. Any authenticated user (member or administrator) can retrieve comments from communities they have access to. The system enforces that comments must belong to the specified post and community, with appropriate foreign key relations enforced at the database level. Guests cannot access these private resources.\n\nThis operation integrates with the communitybbs_comment table as defined in the Prisma schema, incorporating all available comment fields including content, display_name, created_at, updated_at, and the parent-child relationship through communitybbs_comment_id. The response includes the full comment data optimized for display in the UI, with relationships to the parent post and associated community.\n\nValidation rules ensure that the commentId, postId, and communityId form a valid relationship. If the comment does not exist, belong to the specified post, or belongs to a different community, a 404 response is returned. There are no rate limits on this endpoint to enable seamless user navigation, but the system enforces ownership and relationship integrity through the database schema.\n\nRelated API operations include retrieving all comments for a post (PATCH /communities/{communityId}/posts/{postId}/comments) and creating new comments (POST /communities/{communityId}/posts/{postId}/comments). This 'at' operation is typically used after searching or navigating to a specific comment within a thread.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full comment details including content, author information, and timestamps","typeName":"ICommunitybbsComment"},"authorizationRole":null,"authorizationType":null,"name":"at","authorizationRoles":["member"]},{"specification":"This operation retrieves all comments for a specific post within a community using advanced filtering and sorting capabilities. It operates on the communitybbs_comment table from the Prisma schema. Supports pagination, sorting by creation time, and filtering by comment parent-child relationships. This endpoint enables the UI to display threaded comment threads efficiently.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}/comments","method":"patch","summary":"Retrieve paginated comments for a specific post","description":"This operation retrieves all comments for a specific post within a community using advanced filtering and sorting capabilities. It operates on the communitybbs_comment table from the Prisma schema. Supports pagination, sorting by creation time, and filtering by comment parent-child relationships. This endpoint enables the UI to display threaded comment threads efficiently.\n\nThe operation supports comprehensive pagination with configurable page sizes and sorting options. Comments can be sorted by creation date in ascending or descending order. Parent-child relationships are preserved in the response structure to support nested comment threads. Only comments belonging to the specified post are returned, ensuring data integrity.\n\nSecurity considerations include rate limiting for search operations and appropriate filtering of sensitive comment information based on the requesting user's authorization level. Only users with appropriate permissions can access detailed comments, while basic comment lists may be available to authenticated users. The system enforces that comments must relate to the specified post and community, with foreign key constraints ensuring data consistency.\n\nThis operation integrates with the communitybbs_comment table as defined in the Prisma schema, incorporating all available comment fields and relationships. The response includes comment information optimized for list displays, with options to include additional thread context based on authorization level and request parameters. The operation returns exactly 20 comments per page as specified in the business requirements, with a 'Load more' button to retrieve additional pages.\n\nValidation rules ensure that the postId and communityId form a valid relationship. If the post does not exist or does not belong to the specified community, a 404 response is returned. There are no rate limits on this endpoint to enable seamless user navigation, but the system enforces ownership and relationship integrity through the database schema.\n\nRelated API operations include retrieving a specific comment by ID (GET /communities/{communityId}/posts/{postId}/comments/{commentId}) and creating new comments (POST /communities/{communityId}/posts/{postId}/comments). This 'index' operation is the primary method for loading comment threads in the UI.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search criteria and pagination parameters for comment filtering","typeName":"ICommunitybbsComment.IRequest"},"responseBody":{"description":"Paginated list of comments matching search criteria","typeName":"IPageICommunitybbsComment"},"authorizationRole":null,"authorizationType":null,"name":"index","authorizationRoles":["member"]},{"specification":"This operation updates an existing comment within a post in a community. It operates on the communitybbs_comment table from the Prisma schema. The comment can only be updated by its original author. Updates are subject to content length restrictions as defined in business requirements (2-2000 characters). This endpoint enables users to correct typos or improve comment content after submission.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}/comments/{commentId}","method":"put","summary":"Update an existing comment by ID","description":"This operation updates an existing comment within a post in a community. It operates on the communitybbs_comment table from the Prisma schema. The comment can only be updated by its original author. Updates are subject to content length restrictions as defined in business requirements (2-2000 characters). This endpoint enables users to correct typos or improve comment content after submission.\n\nSecurity considerations mandate that only the original author of a comment can modify it. The system enforces ownership verification through the communitybbs_member_id relationship. If a user attempts to update a comment they did not author, the system returns a forbidden response with the message 'You can edit or delete only items you authored.' This protection prevents unauthorized modification of others' content.\n\nThis operation integrates with the communitybbs_comment table as defined in the Prisma schema. The request payload includes the updated comment content and optional display name. The response returns the updated comment entity including its updated_at timestamp, which is automatically set by the service layer. The updated_at field ensures clients receive the latest update information for optimal UI consistency.\n\nValidation rules strictly enforce the content length requirement: comments must be at least 2 characters long and no more than 2,000 characters. If the content violates these constraints, the system returns a 400 Bad Request error with the message 'Comment must be between 2 and 2,000 characters.' The system also validates the comment exists, belongs to the specified post, and belongs to the specified community before processing the update.\n\nRelated API operations include retrieving a specific comment (GET /communities/{communityId}/posts/{postId}/comments/{commentId}), retrieving all comments (PATCH /communities/{communityId}/posts/{postId}/comments), and creating new comments (POST /communities/{communityId}/posts/{postId}/comments). This 'update' operation is the primary method for comment editing in the UI.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated comment content and display name","typeName":"ICommunitybbsComment.IUpdate"},"responseBody":{"description":"The updated comment entity with updated timestamps","typeName":"ICommunitybbsComment"},"authorizationRole":null,"authorizationType":null,"name":"update","authorizationRoles":["member"]},{"specification":"This operation permanently deletes a specific comment within a post in a community. It operates on the communitybbs_comment table from the Prisma schema. The comment can only be deleted by its original author or an administrator. This endpoint implements hard deletion as there is no deleted_at field in the schema, removing the comment completely from the database.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}/comments/{commentId}","method":"delete","summary":"Permanently delete a comment by ID","description":"This operation permanently deletes a specific comment within a post in a community. It operates on the communitybbs_comment table from the Prisma schema. The comment can only be deleted by its original author or an administrator. This endpoint implements hard deletion as there is no deleted_at field in the schema, removing the comment completely from the database.\n\nPer the Prisma schema, the communitybbs_comment table does not include a deleted_at field, indicating that deletion is permanent rather than soft deletion. When a comment is deleted, all associated data is removed from the database, including its relationships to votes and parent-child relationships. There is no recovery mechanism.\n\nSecurity considerations include strict ownership verification. Only the original author of a comment or an administrator can delete a comment. If an unauthorized user attempts deletion, the system returns a 403 Forbidden response with the message 'You can edit or delete only items you authored.' This ensures content integrity and prevents unauthorized removal of user content.\n\nThe system follows the business requirement that comments can be deleted by their authors, but cannot be deleted by other users without administrative privileges. The operation does not return any response body as per standard practice for DELETE operations, with success indicated by a 204 No Content response.\n\nRelated API operations include retrieving a specific comment (GET /communities/{communityId}/posts/{postId}/comments/{commentId}), updating a comment (PUT /communities/{communityId}/posts/{postId}/comments/{commentId}), and retrieving all comments (PATCH /communities/{communityId}/posts/{postId}/comments). This 'erase' operation is the primary method for comment removal in the UI.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":null,"authorizationType":null,"name":"erase","authorizationRoles":["member","administrator"]},{"specification":"This operation permanently deletes a specific comment within a post in a community. It operates on the communitybbs_comment table from the Prisma schema. The comment can only be deleted by its original author or an administrator. This endpoint implements hard deletion as there is no deleted_at field in the schema, removing the comment completely from the database.","path":"/communitybbs/administrator/communities/{communityId}/posts/{postId}/comments/{commentId}","method":"delete","summary":"Permanently delete a comment by ID","description":"This operation permanently deletes a specific comment within a post in a community. It operates on the communitybbs_comment table from the Prisma schema. The comment can only be deleted by its original author or an administrator. This endpoint implements hard deletion as there is no deleted_at field in the schema, removing the comment completely from the database.\n\nPer the Prisma schema, the communitybbs_comment table does not include a deleted_at field, indicating that deletion is permanent rather than soft deletion. When a comment is deleted, all associated data is removed from the database, including its relationships to votes and parent-child relationships. There is no recovery mechanism.\n\nSecurity considerations include strict ownership verification. Only the original author of a comment or an administrator can delete a comment. If an unauthorized user attempts deletion, the system returns a 403 Forbidden response with the message 'You can edit or delete only items you authored.' This ensures content integrity and prevents unauthorized removal of user content.\n\nThe system follows the business requirement that comments can be deleted by their authors, but cannot be deleted by other users without administrative privileges. The operation does not return any response body as per standard practice for DELETE operations, with success indicated by a 204 No Content response.\n\nRelated API operations include retrieving a specific comment (GET /communities/{communityId}/posts/{postId}/comments/{commentId}), updating a comment (PUT /communities/{communityId}/posts/{postId}/comments/{commentId}), and retrieving all comments (PATCH /communities/{communityId}/posts/{postId}/comments). This 'erase' operation is the primary method for comment removal in the UI.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","administrator"],"name":"erase","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation updates an existing post within a community. It operates on the communitybbs_post table from the Prisma schema. The post can only be updated by its original author. Updates are subject to content length restrictions as defined in business requirements (title: 5-120 characters, body: 10-10,000 characters). This endpoint enables users to correct content or improve posts after submission.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}","method":"put","summary":"Update an existing post by ID","description":"This operation updates an existing post within a community. It operates on the communitybbs_post table from the Prisma schema. The post can only be updated by its original author. Updates are subject to content length restrictions as defined in business requirements (title: 5-120 characters, body: 10-10,000 characters). This endpoint enables users to correct content or improve posts after submission.\n\nSecurity considerations mandate that only the original author of a post can modify it. The system enforces ownership verification through the communitybbs_member_id relationship. If a user attempts to update a post they did not author, the system returns a forbidden response with the message 'You can edit or delete only items you authored.' This protection prevents unauthorized modification of others' content.\n\nThis operation integrates with the communitybbs_post table as defined in the Prisma schema. The request payload includes the updated title and body content. The response returns the updated post entity including its updated_at timestamp, which is automatically set by the service layer. The updated_at field ensures clients receive the latest update information for optimal UI consistency.\n\nValidation rules strictly enforce the content length requirements: titles must be at least 5 characters long and no more than 120 characters; bodies must be at least 10 characters long and no more than 10,000 characters. The system also validates that the post exists, belongs to the specified community, and that the user is the author. If the content violates these constraints, the system returns a 400 Bad Request error with appropriate messages such as 'Title must be between 5 and 120 characters.' or 'Body must be between 10 and 10,000 characters.'\n\nRelated API operations include retrieving a specific post (GET /communities/{communityId}/posts/{postId}), creating new posts (POST /communities/{communityId}/posts), and deleting posts (DELETE /communities/{communityId}/posts/{postId}). This 'update' operation is the primary method for post editing in the UI.\n\nNote: The system does not include a deleted_at field in the communitybbs_post table, so there is no soft-delete capability. The edit operation directly modifies the post data without preservation of previous versions.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated post title and body content","typeName":"ICommunitybbsPost.IUpdate"},"responseBody":{"description":"The updated post entity with updated timestamps","typeName":"ICommunitybbsPost"},"authorizationRole":null,"authorizationType":null,"name":"update","authorizationRoles":["member"]},{"specification":"This operation permanently deletes a specific post within a community. It operates on the communitybbs_post table from the Prisma schema. The post can only be deleted by its original author or an administrator. This endpoint implements hard deletion as there is no deleted_at field in the schema, removing the post completely from the database along with all associated comments and votes.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}","method":"delete","summary":"Permanently delete a post by ID","description":"This operation permanently deletes a specific post within a community. It operates on the communitybbs_post table from the Prisma schema. The post can only be deleted by its original author or an administrator. This endpoint implements hard deletion as there is no deleted_at field in the schema, removing the post completely from the database along with all associated comments and votes.\n\nPer the Prisma schema, the communitybbs_post table does not include a deleted_at field, indicating that deletion is permanent rather than soft deletion. When a post is deleted, all associated data is removed from the database, including all related comments and votes. The deletion cascades automatically through the database foreign key constraints with ON DELETE CASCADE configured. There is no recovery mechanism.\n\nSecurity considerations include strict ownership verification. Only the original author of a post or an administrator can delete a post. If an unauthorized user attempts deletion, the system returns a 403 Forbidden response with the message 'You can edit or delete only items you authored.' This ensures content integrity and prevents unauthorized removal of user content.\n\nThe system follows the business requirement that posts can be deleted by their authors, but cannot be deleted by other users without administrative privileges. The operation does not return any response body as per standard practice for DELETE operations, with success indicated by a 204 No Content response.\n\nRelated API operations include retrieving a specific post (GET /communities/{communityId}/posts/{postId}), updating a post (PUT /communities/{communityId}/posts/{postId}), and retrieving all comments for a post (PATCH /communities/{communityId}/posts/{postId}/comments). This 'erase' operation is the primary method for post removal in the UI.\n\nNote: The communitybbs_post table in the schema has no soft-delete capability, so there is no deleted_at field. Deletion removes all associated data permanently.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":null,"authorizationType":null,"name":"erase","authorizationRoles":["member","administrator"]},{"specification":"This operation permanently deletes a specific post within a community. It operates on the communitybbs_post table from the Prisma schema. The post can only be deleted by its original author or an administrator. This endpoint implements hard deletion as there is no deleted_at field in the schema, removing the post completely from the database along with all associated comments and votes.","path":"/communitybbs/administrator/communities/{communityId}/posts/{postId}","method":"delete","summary":"Permanently delete a post by ID","description":"This operation permanently deletes a specific post within a community. It operates on the communitybbs_post table from the Prisma schema. The post can only be deleted by its original author or an administrator. This endpoint implements hard deletion as there is no deleted_at field in the schema, removing the post completely from the database along with all associated comments and votes.\n\nPer the Prisma schema, the communitybbs_post table does not include a deleted_at field, indicating that deletion is permanent rather than soft deletion. When a post is deleted, all associated data is removed from the database, including all related comments and votes. The deletion cascades automatically through the database foreign key constraints with ON DELETE CASCADE configured. There is no recovery mechanism.\n\nSecurity considerations include strict ownership verification. Only the original author of a post or an administrator can delete a post. If an unauthorized user attempts deletion, the system returns a 403 Forbidden response with the message 'You can edit or delete only items you authored.' This ensures content integrity and prevents unauthorized removal of user content.\n\nThe system follows the business requirement that posts can be deleted by their authors, but cannot be deleted by other users without administrative privileges. The operation does not return any response body as per standard practice for DELETE operations, with success indicated by a 204 No Content response.\n\nRelated API operations include retrieving a specific post (GET /communities/{communityId}/posts/{postId}), updating a post (PUT /communities/{communityId}/posts/{postId}), and retrieving all comments for a post (PATCH /communities/{communityId}/posts/{postId}/comments). This 'erase' operation is the primary method for post removal in the UI.\n\nNote: The communitybbs_post table in the schema has no soft-delete capability, so there is no deleted_at field. Deletion removes all associated data permanently.","parameters":[{"name":"communityId","description":"Unique identifier of the target community","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member","administrator"],"name":"erase","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation creates a new comment on a specific post within a community. The operation targets the communitybbs_comment table in the Prisma schema, which stores comment content, author information, and hierarchical relationships to parent comments. The comment is associated with a specific post identified by postId and is linked to the community through the communityId. The system requires the comment content to be between 2 and 2,000 characters as defined in the communitybbs_comment model, and the display_name field is optional but must not exceed 32 characters if provided. This operation supports nested comments by allowing the parent-comment relationship via the communitybbs_comment_id field, though this field is not exposed in the API path since the comment is being created directly under the post.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}/comments","method":"post","summary":"Create a new comment on a specific post","description":"This operation enables authenticated users to add comments to existing posts within a community. The comment is stored in the communitybbs_comment table and is associated with the specific post using the postId parameter and the community through the communityId parameter.\n\nThe comment content must adhere to the business rules defined in the schema: minimum 2 characters and maximum 2,000 characters. The author of the comment must be an authenticated member, and their display name may be provided, but if included, it must not exceed 32 characters. If no display name is provided, the system will use the authenticated member's display name from their profile.\n\nSecurity considerations require that only authenticated members can create comments; guest users are not permitted. This operation does not support creating top-level comments on communities directly, only comments nested under posts.\n\nThe operation integrates with the communitybbs_comment entity and its relationship to communitybbs_post, which has a foreign key relationship established between post_id and id. This ensures referential integrity so that comments cannot be created for non-existent posts.\n\nThis operation triggers system-generated logging events as defined in the communitybbs_log model, but there is no separate API to create or manage these logs - they are created automatically as a side effect of this operation. The comment's creation timestamp is automatically set by the system and cannot be overridden by the client.","parameters":[{"name":"communityId","description":"Unique identifier of the target community where the post resides","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post to which the comment is being added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new comment on a post","typeName":"ICommunitybbsComment.ICreate"},"responseBody":{"description":"The newly created comment object with system-generated fields like timestamp","typeName":"ICommunitybbsComment"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null},{"specification":"This operation allows an authenticated user to cast a vote (upvote or downvote) on a specific post within a community. The operation targets the communitybbs_vote table in the Prisma schema, which tracks user votes. The vote is associated with the post identified by postId and is linked to the community through communityId. Users can only vote on posts once: the schema enforces a unique constraint on the combination of actor_id and post_id, preventing duplicate votes. The vote type must be either 'upvote' or 'downvote', and the operation toggles the vote state if the user has voted previously. The vote does not affect the post's content but updates the score calculated from this table during retrieval.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}/votes","method":"post","summary":"Cast a vote on a post","description":"This operation enables authenticated members to upvote or downvote a post, contributing to the post's overall score which is displayed in UIs. The vote is stored in the communitybbs_vote table, which links each vote to an actor (authenticated user), a post (via post_id), and a type ('upvote' or 'downvote').\n\nThe system enforces several constraints: a user cannot vote on their own post, as specified in the business rule: \"You can't vote on your own posts/comments.\" This is validated by comparing the authenticated user's ID with the communitybbs_member_id of the post. If the user is the post author, the operation will be denied with a 403 error.\n\nThe user's vote state is toggleable: if the user has previously upvoted the post and clicks again, the vote is removed (reverted to 'none'). If the user has previously downvoted and clicks again, the vote is also removed. If the user switches from upvote to downvote or vice versa, the change is processed as an update.\n\nThe vote does not have a comment or additional context field; it is purely binary. The post score (upvotes - downvotes) is calculated dynamically at query time from this table, and no aggregated field exists in the post table itself, maintaining data normalization.\n\nThis operation does not require the communityId for the voting logic itself, but it is included in the path for context and consistency with the resource hierarchy, enabling proper authorization and validation checks against community ownership. The request body must contain the vote type as 'upvote' or 'downvote'.\n\nThe system automatically logs vote actions in the communitybbs_log table as a side effect, but manual API access to these logs is not provided, consistent with system-generated audit trail policy.","parameters":[{"name":"communityId","description":"Unique identifier of the target community containing the post","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post to be voted on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The type of vote to cast on the post: 'upvote' or 'downvote'","typeName":"ICommunitybbsVote.ICreate"},"responseBody":{"description":"The updated vote state and resulting post score","typeName":"ICommunitybbsVote"},"authorizationRoles":["member"],"name":"create","authorizationRole":"member","authorizationType":null},{"specification":"This operation creates a new comment on a specific post within a community. The operation targets the communitybbs_comment table in the Prisma schema, which stores comment content, author information, and hierarchical relationships to parent comments. The comment is associated with a specific post identified by postId and is linked to the community through the communityId. The system requires the comment content to be between 2 and 2,000 characters as defined in the communitybbs_comment model, and the display_name field is optional but must not exceed 32 characters if provided. This operation supports nested comments by allowing the parent-comment relationship via the communitybbs_comment_id field, though this field is not exposed in the API path since the comment is being created directly under the post.","path":"/communities/{communityId}/posts/{postId}/comments","method":"post","summary":"Create a new comment on a specific post","description":"This operation enables authenticated users to add comments to existing posts within a community. The comment is stored in the communitybbs_comment table and is associated with the specific post using the postId parameter and the community through the communityId parameter.\n\nThe comment content must adhere to the business rules defined in the schema: minimum 2 characters and maximum 2,000 characters. The author of the comment must be an authenticated member, and their display name may be provided, but if included, it must not exceed 32 characters. If no display name is provided, the system will use the authenticated member's display name from their profile.\n\nSecurity considerations require that only authenticated members can create comments; guest users are not permitted. This operation does not support creating top-level comments on communities directly, only comments nested under posts.\n\nThe operation integrates with the communitybbs_comment entity and its relationship to communitybbs_post, which has a foreign key relationship established between post_id and id. This ensures referential integrity so that comments cannot be created for non-existent posts.\n\nThis operation triggers system-generated logging events as defined in the communitybbs_log model, but there is no separate API to create or manage these logs - they are created automatically as a side effect of this operation. The comment's creation timestamp is automatically set by the system and cannot be overridden by the client.","parameters":[{"name":"communityId","description":"Unique identifier of the target community where the post resides","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post to which the comment is being added","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data required to create a new comment on a post","typeName":"ICommunitybbsComment.ICreate"},"responseBody":{"description":"The newly created comment object with system-generated fields like timestamp","typeName":"ICommunitybbsComment"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates an existing comment on a post within a community. The operation targets the communitybbs_comment table in the Prisma schema, which stores comment content, author information, and revision history. Only the comment's author (authenticated member) or an administrator can update a comment, as determined by ownership verification against the communitybbs_comment_id field in the schema. The update is performed by supplying new content and potentially updated display_name values, but the communityId and postId are derived from the existing comment record and cannot be changed. The update is subject to validation rules: comment content must be between 2 and 2,000 characters and display_name must not exceed 32 characters if provided.","path":"/communities/{communityId}/posts/{postId}/comments/{commentId}","method":"put","summary":"Update an existing comment","description":"This operation allows an authenticated user to modify the content of a comment they previously authored on a post. The comment is located by its unique commentId, and ownership is verified by comparing the authenticated user's ID with the communitybbs_member_id field in the communitybbs_comment table.\n\nThe update request must provide new content for the comment that adheres to the schema constraints: between 2 and 2,000 characters in length. The display_name field may be updated if desired, but it must not exceed 32 characters. The communityId and postId parameters in the path are for context and validation purposes but cannot be modified as they are fixed by the original comment record.\n\nIf the authenticated user is not the original author of the comment or an administrator, the operation will be denied with a 403 error. This implements the business logic rule that \"You can edit or delete only items you authored.\"\n\nThis operation automatically updates the updated_at timestamp in the communitybbs_comment table as defined in the Prisma schema, which is used to reflect comment revisions and support ordering in UI displays. The system also records an audit log entry in the communitybbs_log table as a side effect, but there is no direct API to manipulate these logs.\n\nThe comment's creation timestamp (created_at) remains immutable after comment creation according to schema design principles, ensuring historical accuracy and compliance with the requirements that specify no modification of creation times.","parameters":[{"name":"communityId","description":"Unique identifier of the target community containing the post and comment","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post containing the comment","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated content and optional display_name for the comment","typeName":"ICommunitybbsComment.IUpdate"},"responseBody":{"description":"The updated comment object with revised timestamp and content","typeName":"ICommunitybbsComment"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation soft-deletes a comment on a post within a community. The operation targets the communitybbs_comment table in the Prisma schema. This is a soft delete operation because the schema includes a deleted_at field. The comment record is preserved for audit purposes but is excluded from most user-facing queries. The commentId must match an existing comment owned by the authenticated user or moderated by an admin. The communityId and postId are included for context and validation but do not affect the deletion logic, which is based entirely on the commentId.","path":"/communities/{communityId}/posts/{postId}/comments/{commentId}","method":"delete","summary":"Soft delete a comment","description":"This operation marks a comment as deleted by setting the deleted_at timestamp to the current time. The comment record is preserved in the database for audit purposes but is excluded from normal queries and displays, as defined by the communitybbs_comment model which includes a deleted_at field.\n\nThe deletion is restricted to the comment's original author (authenticated member) or an administrator with elevated privileges. Ownership verification is performed by comparing the authenticated user's ID against the communitybbs_member_id field in the communitybbs_comment table. The operation will fail with a 403 error if the requester is not the author or an administrator.\n\nThis operation adheres strictly to the business rule: \"You can edit or delete only items you authored.\" unless the user has an administrator role.\n\nWhen a comment is soft-deleted, it remains in the database with its completed data, and any nested replies are also marked as deleted via the foreign key relationships. This preserves data integrity and enables potential recovery while hiding the content from users.\n\nThe system automatically logs this deletion event in the communitybbs_log table as a side effect (action_type: 'comment_deleted'), but there is no separate API endpoint to create or manage these logs.\n\nThis soft delete is intentional and consistent with the design of the communitybbs_comment entity, which includes a deleted_at field, and aligns with the system's philosophy of preserving data for compliance and audit purposes rather than permanent removal.","parameters":[{"name":"communityId","description":"Unique identifier of the target community containing the post and comment","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post containing the comment","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment to be soft-deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation allows an authenticated user to update their vote (upvote or downvote) on a specific post within a community. The operation targets the communitybbs_vote table in the Prisma schema, which tracks user votes. The vote is associated with the post identified by postId and is linked to the community through communityId. Users can only have one vote per post: the schema enforces a unique constraint on the combination of actor_id and post_id. The vote type must be either 'upvote' or 'downvote', and the operation toggles the vote state if the user has voted previously.","path":"/communities/{communityId}/posts/{postId}/votes","method":"patch","summary":"Update a vote on a post","description":"This operation enables authenticated members to update their vote on a post. If the user has not voted on the post, a new vote is created. If they have voted and the new vote matches their previous vote, the vote is removed (set to 'none'). If they switch from upvote to downvote, or vice versa, the previous vote is overwritten with the new one.\n\nThe system enforces that users cannot vote on their own post, as specified in the business rule: \"You can't vote on your own posts/comments.\" This is validated by comparing the authenticated user's ID with the communitybbs_member_id of the post. If the user is the post author, the operation will be denied with a 403 error.\n\nThe vote does not have a comment or additional context field; it is purely binary. The post score (upvotes - downvotes) is calculated dynamically at query time from this table, and no aggregated field exists in the post table itself, maintaining data normalization.\n\nThis operation does not require the communityId for the voting logic itself, but it is included in the path for context and consistency with the resource hierarchy, enabling proper authorization and validation checks against community ownership. The request body must contain the vote type as 'upvote' or 'downvote'.\n\nThe system automatically logs vote actions in the communitybbs_log table as a side effect, but manual API access to these logs is not provided, consistent with system-generated audit trail policy.","parameters":[{"name":"communityId","description":"Unique identifier of the target community containing the post","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post to be voted on","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The type of vote to update on the post: 'upvote' or 'downvote'","typeName":"ICommunitybbsVote.IUpdate"},"responseBody":{"description":"The updated vote state and resulting post score","typeName":"ICommunitybbsVote"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation creates a vote on a comment within a specific community post. It associates a user's upvote or downvote with a specific comment identified by its ID in the path. The vote is stored in the communitybbs_vote table, which tracks actor, comment reference, and vote type. This operation enables real-time upvoting and downvoting of comments, with the score being calculated from aggregated votes. The operation requires authentication as a member or administrator to ensure accountability and prevent abuse.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}/comments/{commentId}/votes","method":"post","summary":"Create a vote on a specific comment","description":"This operation allows an authenticated user to cast a vote on a specific comment within a community post. Votes are critical to the platform's engagement model, enabling users to express approval or disapproval of content. When a vote is created, it is recorded in the communitybbs_vote table with a reference to the comment's ID, the actor's ID (from communitybbs_member or communitybbs_administrator), and the vote type ('upvote' or 'downvote'). This operation does not support creating votes for anonymous guests, ensuring all votes are attributable to authenticated users.\n\nThe system enforces business rules: a user cannot vote on their own comment, and each user can have only one vote per comment. If a user attempts to vote on their own comment, the system returns an error. Additionally, the vote type must be either 'upvote' or 'downvote', and any other value is rejected.\n\nThis operation integrates with the communitybbs_comment table through the comment_id foreign key and with the actor tables (communitybbs_member, communitybbs_administrator) via the actor_id. The vote is recorded with a timestamp (created_at) and does not allow modification after creation. The score displayed for a comment is computed by summing upvotes minus downvotes from all associated records in this table.\n\nThis operation is used in conjunction with the DELETE operation on the same endpoint to allow users to change or revoke their votes. The operation does not return a response body, as the outcome is represented by the HTTP status code (201 Created on success).","parameters":[{"name":"communityId","description":"Unique identifier of the target community containing the post and comment.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post that contains the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment on which the vote is being cast.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"The vote data specifying the type of vote to create.","typeName":"ICommunitybbsVote.ICreate"},"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation removes a vote on a specific comment within a community post. It deletes a previously recorded vote from the communitybbs_vote table, effectively revoking a user's upvote or downvote. This operation is used when users want to retract their vote, allowing dynamic change in community sentiment as expressed through voting. The operation identifies the vote by the comment ID, post ID, and community ID in the path, and the actor's identity from the session.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}/comments/{commentId}/votes","method":"delete","summary":"Delete a vote on a specific comment","description":"This operation enables an authenticated user to remove their previously cast vote on a specific comment within a community post. The vote is identified by the comment_id in the path and the actor's identity from the authenticated session. When deleted, the record is permanently removed from the communitybbs_vote table, causing the comment's score (upvotes minus downvotes) to be recalculated without this vote.\n\nNo request body is required, as the system uses the path parameters (communityId, postId, commentId) to locate the vote and the user's authentication context (from session) to identify the actor. The system ensures that only the user who originally cast the vote can delete it, enforcing ownership through the actor_id foreign key relationship with communitybbs_member or communitybbs_administrator.\n\nThis operation supports the business requirement that users can change their mind about a vote: clicking 'upvote' after previously 'downvoting' will first delete the old vote and then create a new one. The operation returns a 204 No Content status on success, indicating successful deletion without returning a response body. This design ensures efficiency and aligns with stateless REST principles.\n\nThe system does not allow non-owning users to delete votes, enforcing that users cannot delete votes cast by others. This preserves the integrity and authenticity of community feedback.","parameters":[{"name":"communityId","description":"Unique identifier of the target community containing the post and comment.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post that contains the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment on which the vote is being deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation creates a vote on a specific community post. It allows an authenticated user to express approval or disapproval of a post by recording an upvote or downvote in the communitybbs_vote table. The vote is associated with the post using the post ID from the path and the authenticated user's actor ID. This operation is a core feature enabling community feedback mechanisms and content ranking.","path":"/communitybbs/member/communities/{communityId}/posts/{postId}/votes","method":"delete","summary":"Delete a vote on a specific post","description":"This operation allows an authenticated user to remove their previously cast vote on a specific post within a community. The vote is identified by the post_id in the path and the actor's identity from the authenticated session. When deleted, the vote record is permanently removed from the communitybbs_vote table, causing the post's score (upvotes minus downvotes) to be recomputed without this vote.\n\nNo request body is required, as the system uses the path parameters (communityId, postId) to locate the vote and the user's authentication context (from session) to identify the actor. The operation enforces that only the user who originally cast the vote can delete it, ensuring ownership through the actor_id foreign key relationship with communitybbs_member or communitybbs_administrator.\n\nThis operation supports the requirement that users can change their vote by first deleting their existing vote and then creating a new one. The system returns a 204 No Content status on successful deletion, indicating completion without returning a response body.\n\nThe system prevents users from deleting votes they did not cast and prevents guests from performing this action. The deletion is immediate and irreversible, as votes are stored as atomic, non-modifiable records in the database. This design ensures data integrity in the scoring system and aligns with the platform's requirement for authentic, accountable user feedback.","parameters":[{"name":"communityId","description":"Unique identifier of the target community containing the post.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the target post on which the vote is being deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","authorizationRole":"member","authorizationType":null},{"specification":"This operation performs a complex search across the platform's three main content types: posts, communities, and comments. Unlike simple GET queries, this operation uses a PATCH method with a request body to allow for advanced filtering, sorting, pagination, and search type selection. It queries denormalized search indexes (communitybbs_search_post, communitybbs_search_community, communitybbs_search_comment) for optimal performance while maintaining separation of concerns.","path":"/communitybbs/search","method":"patch","summary":"Search across posts, communities, and comments with advanced filters","description":"This operation enables advanced, multi-type search across the Community BBS platform, providing users with the ability to find relevant content by keyword in posts, communities, or comments. Unlike simple search endpoints, this operation uses the PATCH HTTP method to accommodate a rich request body, allowing for complex filtering criteria such as search type (post, community, comment), sort order, and pagination parameters.\n\nThe search is executed against three denormalized search index tables: communitybbs_search_post for posts, communitybbs_search_community for communities, and communitybbs_search_comment for comments. These indexes are maintained by the system through triggers on the main entity tables and are optimized for fast full-text search using PostgreSQL trigram operators on title, body, name, description, and content fields.\n\nThe request body specifies the search type ('posts', 'communities', or 'comments'), the search query string, the sort order (for posts: 'Newest' or 'Top'; for communities: 'Name Match' or 'Recently Created'; for comments: 'Newest' only), the page size (default 20), and the page offset. Responses are paginated with exactly 20 results per page.\n\nFor search results, different response shapes are returned based on the type:\n- For 'posts': returns IPageICommunitybbsPost.ISummary, with post title, community name, score, comment count, and excerpt\n- For 'communities': returns IPageICommunitybbsCommunity.ISummary, with community name, description, logo, member count, and join button state\n- For 'comments': returns IPageICommunitybbsComment.ISummary, with comment excerpt, author, creation time, parent post title, and community name\n\nThis operation respects the business requirement that search results default to 'Newest' for posts and comments and 'Name Match' for communities. The system prevents queries under 2 characters and returns an appropriate error. The operation supports session awareness, so the join status in community search results is automatically adjusted based on the authenticated user's membership.\n\nThis operation is the single entry point for all search functionality on the platform, unifying three previously separate search endpoints into one cohesive interface. It ensures consistent behavior, performance, and user experience across all content types.","parameters":[],"requestBody":{"description":"Search criteria including type, query, sort order, and pagination details. Must specify search type ('posts', 'communities', 'comments'), query string, and may include sort and pagination parameters.","typeName":"ICommunitybbsSearch.IRequest"},"responseBody":{"description":"Paginated search results containing either posts, communities, or comments based on the request type.","typeName":"IPageICommunitybbsPost.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"search"}],"components":{"authorization":[{"name":"guest","description":"Users who have not signed in. Can view all public content including posts and communities, but cannot post, comment, vote, join communities, or create new communities.","kind":"guest"},{"name":"member","description":"Authenticated users who can post, comment, vote, join or leave communities, and manage their own content. Cannot create new communities unless explicitly granted permission.","kind":"member"},{"name":"administrator","description":"System administrator who can create, edit, delete, and moderate communities, manage user accounts, view system analytics, and handle reports or abuse cases.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageICommunitybbsCommunity":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunitybbsCommunity"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunitybbsCommunity.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunitybbsCommunity.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunitybbsPost":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunitybbsPost"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunitybbsComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunitybbsComment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageICommunitybbsPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunitybbsPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ICommunitybbsMember.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address used for authentication and account recovery.\n\nThis field serves as the primary login credential for member accounts. It must be a valid email format and unique across all users in the communitybbs_member table as enforced by database constraints.\n\nThe system uses this email to send notifications, password reset links, and account verification messages. It is never displayed publicly and is stored securely with hashed encryption."},"display_name":{"type":"string","minLength":1,"maxLength":32,"description":"Display name for public presentation of the member.\n\nThis is the name that appears on posts, comments, and other public content. It must be between 1 and 32 characters and can include letters, numbers, hyphens, and underscores. If a display name is not provided, the system defaults to 'Anonymous' in user-facing interfaces.\n\nThe display name is stored directly in the member record but is never used for authentication or system logic. Users may change this name later through their profile settings, and the change is reflected in future posts and comments."}},"required":["email","display_name"],"description":"Registration request body for creating a new member account.\n\nThis schema defines the fields accepted for joining the platform as a member. It includes the minimum required information for identity creation: a valid email address and a display name for public representation.\n\nWhile no password is accepted in this request, the server enforces special password policies (minimum length, complexity) and generates a secure bcrypt hash internally. This design ensures sensitive credentials are never transmitted from client to server, following zero-trust security principles.\n\nThe registration process automatically creates a new session record and issues a JWT token upon successful creation, providing immediate access to member features without requiring an additional login step."},"ICommunitybbsMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated member.\n\nThis field represents the primary key of the member record in the communitybbs_member table. It is used to uniquely identify the user across all system operations, including content creation, voting, and community management. This ID is generated upon account creation and remains immutable throughout the user's lifecycle.\n\nThe identifier ensures proper association of all user-generated content with their account while maintaining privacy by not exposing personal information like email."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response containing JWT token for authenticated members.\n\nThis response structure is returned after successful login or registration of a member. It contains the minimal essential information needed for client-side session maintenance: the unique member ID and a secure authentication token.\n\nThis type deliberately omits any sensitive information like email, password_hash, or display_name to prevent credential leakage. Only the member ID is exposed for client-side identification, while all other details are retrieved on-demand via protected API endpoints.\n\nThe token provides secure access to all member-enabled features including posting, commenting, voting, and joining communities, following the principle of least privilege. This minimal design enhances security while maintaining usability."},"IMember.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The user's email address, used as primary identifier and login credential. Must be unique and valid email format, as validated by the unique constraint on communitybbs_member.email field.\n\nThis field is required during registration and must conform to standard email formatting rules. The system validates email format before accepting the registration request to prevent invalid entries."},"password":{"type":"string","minLength":8,"description":"The plaintext password the user wishes to set. This will be hashed by the system using BCrypt before storage in communitybbs_member.password_hash. Must meet complexity requirements, typically minimum length of 8 characters.\n\nThe password must be sufficiently complex to ensure account security. It will never be stored in plaintext - the system applies BCrypt hashing before persistence in the database. This field is required and must exceed 8 characters."},"display_name":{"type":"string","minLength":1,"maxLength":32,"description":"Optional preferred display name for the user. If not provided, system defaults to email prefix (the part before @). Truncated to 32 characters if longer. Stored in communitybbs_member.display_name field.\n\nThis field determines how the user's name appears in post and comment authorship. If not provided during registration, the system automatically generates a display name from the email address (local part before @). The maximum length is 32 characters as enforced by the schema and UI constraints."}},"required":["email","password"],"description":"Request body for member registration containing authentication credentials and optional display name.\n\nThis schema defines the data structure for user registration through the member join endpoint. It captures the essential information needed to create a new member account in the communitybbs_member table, including mandatory authentication credentials and an optional display preference. The system validates field length constraints and email format before creating the account."},"IMember.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address of the member, used as login identifier. Must match an existing record in communitybbs_member.email.\n\nThis field is used to identify the user account during authentication. The system checks against the unique email constraint in the communitybbs_member table to verify the existence of the account. The email must be exactly as registered to be accepted for login."},"password":{"type":"string","minLength":8,"description":"Plain-text password provided by user. Verified against stored password_hash in communitybbs_member using BCrypt algorithm.\n\nThe system compares this password with the BCrypt-hashed password stored in the database for the provided email. The password must match the one originally set during account creation. For security, the password is never stored in plaintext; only the hash is maintained in the database."}},"required":["email","password"],"description":"Request body for member login containing email and password for authentication.\n\nThis schema defines the authentication parameters used to verify a member's identity during login. The system validates the email against registered accounts and the password against the stored hashed value using BCrypt. This is the standard authentication mechanism for returning members to access their account."},"IMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"The refresh token used to obtain a new access token. This token is issued during authentication and is used for token refresh operations. It must be securely stored by the client and presented in subsequent refresh requests."}},"required":["refresh_token"],"description":"Request body for refreshing a member's authentication token.\n\nThis object contains the refresh token that will be validated by the system to issue a new access token. The refresh token is issued during the initial login or join operation and is used to extend session validity without requiring re-authentication with credentials.\n\nThe refresh token is cryptographically secure and bound to the user's session. It expires after a certain period and can only be used once before invalidation (unless the system supports reusable refresh tokens).\n\nThis request does not include the access token - it's a standalone refresh mechanism. The client must present this refresh token in the Authorization header on the /auth/member/refresh endpoint.\n\nThis type is used exclusively for POST /auth/member/refresh and ensures secure token lifecycle management without exposing credentials again."},"IPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":5,"maxLength":120,"description":"The updated title of the post. Must be between 5 and 120 characters.\n\nThis field is optional. If omitted, the title remains unchanged. If provided, it must meet the length requirements. The title is used for search indexing and display in feeds and lists.\n\nValidation prevents empty titles and titles longer than 120 characters.\n\nThis field corresponds to the title column in the communitybbs_post table and will be updated when this request is processed."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"The updated body content of the post. Must be between 10 and 10,000 characters.\n\nThis field is optional. If omitted, the body remains unchanged. If provided, it must meet the length requirements and contain only plain text (no HTML, scripts, or code allowed). The body is the main content of the post and is subject to full-text search indexing.\n\nThis field corresponds to the body column in the communitybbs_post table and will be updated when this request is processed.\n\nThe system ensures that no malicious content can be injected through this field, as it's sanitized on the server side before storage and display."}},"required":[],"description":"Request body for updating an existing post.\n\nThis object contains optional fields that can be modified by the post's author. Only the title and body can be updated; other fields such as communityId, author, and timestamps are immutable to preserve content integrity and audit trail.\n\nThe update operation is performed as a partial update: only fields provided in the request are modified. The server's updated_at field is automatically set to the current timestamp upon successful update.\n\nThis update type aligns with the communitybbs_post table's writable fields (title and body) and respects the business requirement that users can edit their own posts. The system enforces ownership verification before any change: the authenticated user must be the post's author, as determined by memberId.\n\nThis request type is used exclusively for PUT /communities/{communityId}/posts/{postId} and ensures that modifications are minimal and well-constrained, preventing unauthorized changes to critical metadata."},"IPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post.\n\nThis is a system-generated UUID assigned when the post is created. It serves as the primary key for the post in the database and is used to uniquely identify and reference the post in all API interactions, including updates, deletions, and comment nesting.\n\nThe post ID is immutable and never changes after creation. It is used in URLs and API paths to access the post (e.g., /communities/{communityId}/posts/{postId})."},"communityId":{"type":"string","format":"uuid","description":"The unique identifier of the community where the post was created.\n\nThis is a foreign key that links the post to its parent community. It is required and set at the time of post creation and cannot be changed afterward.\n\nThe community ID ensures that each post has a clear context and is associated with one and only one community, which determines the feed in which it appears for community members."},"author":{"type":"string","description":"The display name of the post's author, as it appeared at the time of posting.\n\nThis field is captured from the member's display_name when the post is created and stored as text rather than a reference. This ensures that even if the member later changes their profile display name, the post retains the original name it was posted under.\n\nIf the member did not specify a preferred display name upon posting, this field defaults to \"Anonymous\"."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"The title of the post.\n\nThis is a required field with a length constraint of 5 to 120 characters. It provides a brief summary of the post's content and is used to display in feeds, search results, and lists.\n\nThe title is indexed for full-text search and is used when users search for posts by keywords. It is truncated if longer than 120 characters upon submission."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"The main body content of the post.\n\nThis is a required field with a length constraint of 10 to 10,000 characters. It contains the detailed content of the post and must be plain text only (no HTML, scripts, or code allowed).\n\nThe body is used for full-text search and is displayed in post detail pages. It is truncated if longer than 10,000 characters upon submission."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the post was created.\n\nThis is a system-generated timestamp set exactly once at the time of post creation. It is immutable and used for sorting in \"Newest\" order and for audit purposes.\n\nThis field corresponds to the created_at column in the communitybbs_post table and is stored in UTC in ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when the post was last updated.\n\nThis field is automatically updated by the system whenever the post's title or body is modified through an update operation. It is set to the current timestamp during each update.\n\nThis field is used to identify recently modified posts and is displayed in UIs to indicate recency of edits."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"The timestamp when the post was soft-deleted, if applicable.\n\nIf this field is null, the post is active. If set to a timestamp, it means the post has been soft-deleted (archived) and is hidden from public views.\n\nThe system does not physically remove the post from the database when deleted; instead, it marks it as deleted by setting this field. This allows for audit trails and potential recovery.\n\nThis field corresponds to the deleted_at column in the communitybbs_post table and is used to filter out deleted posts from feeds and search results.\n\nNote: Some API endpoints perform hard deletion (removing the record entirely), but in this schema, soft deletion is preferred for data integrity."},{"type":"null"}],"description":"The timestamp when the post was soft-deleted, if applicable.\n\nIf this field is null, the post is active. If set to a timestamp, it means the post has been soft-deleted (archived) and is hidden from public views.\n\nThe system does not physically remove the post from the database when deleted; instead, it marks it as deleted by setting this field. This allows for audit trails and potential recovery.\n\nThis field corresponds to the deleted_at column in the communitybbs_post table and is used to filter out deleted posts from feeds and search results.\n\nNote: Some API endpoints perform hard deletion (removing the record entirely), but in this schema, soft deletion is preferred for data integrity."},"score":{"type":"integer","description":"The calculated score of the post, defined as the number of upvotes minus the number of downvotes.\n\nThis field is a computed value derived from the communitybbs_vote table. It represents community sentiment toward the post and is used for sorting in \"Top\" order.\n\nThe score is calculated dynamically at query time by summing all votes for the post. It is denormalized here for performance reasons."},"comment_count":{"type":"integer","description":"The total number of comments associated with this post.\n\nThis field is a denormalized count of all non-deleted comments linked to the post via the communitybbs_comment.post_id foreign key.\n\nIt is updated automatically whenever a comment is added or deleted and provides a quick indication of discussion volume without requiring a join to the comments table."}},"required":["id","communityId","author","title","body","created_at","score","comment_count"],"description":"Full representation of a post object returned by the system.\n\nThis schema defines the complete structure of a post as returned in responses to GET requests (e.g., /communities/{communityId}/posts/{postId}). It includes all data necessary for rendering a detailed post view, including the author information, content, metadata, and community context.\n\nThe schema strictly follows the communitybbs_post table structure and includes both directly stored fields (title, body, timestamps) and computed fields (score, comment_count) for efficient frontend rendering.\n\nAll fields are populated based on the data in the underlying database and conform to the business logic: the title and body have strict length constraints, timestamps are ISO 8601, and the score and comment_count reflect real-time community engagement.\n\nThis type is used for full post detail views and is distinct from summary representations used in feeds and search results, which include only essential fields for performance optimization."},"IPost.ICreate":{"type":"object","properties":{"communitybbs_community_id":{"type":"string","format":"uuid","description":"The unique identifier of the community in which the post is to be created.\n\nThis field is required and must reference a valid existing community. The authenticated user does not need to be a member of this community to create a post, as the system allows posting in any community regardless of membership.\n\nThis field is used to establish a foreign key relationship with the communitybbs_community table and determines where the post will appear in the platform's feeds.\n\nThis field corresponds to the communitybbs_community_id column in the communitybbs_post table and is mandatory for all post creation requests."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"The title of the new post.\n\nThis is a required field with a minimum length of 5 characters and a maximum length of 120 characters.\n\nThe title should be concise and informative, serving as a quick summary of the post's content. It will be displayed in feeds, search results, and community lists.\n\nThis field corresponds to the title column in the communitybbs_post table and is used for indexing and user readability."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"The body content of the new post.\n\nThis is a required field with a minimum length of 10 characters and a maximum length of 10,000 characters. The content must be plain text only — no HTML, JavaScript, or other scripting languages are allowed to prevent security vulnerabilities.\n\nThe body represents the main content of the post, where users express their thoughts, share information, or ask questions. It will be displayed in post detail pages and is subject to full-text search indexing.\n\nThis field corresponds to the body column in the communitybbs_post table and must comply with the security and formatting requirements to ensure platform integrity."},"display_name":{"oneOf":[{"type":"string","minLength":1,"maxLength":32,"description":"The display name to be shown as the author of this post.\n\nThis field is optional. If provided, it must be between 1 and 32 characters. It will override the member's default display name for this specific post.\n\nIf not provided, the system will use the authenticated member's current display_name from their profile.\n\nThis field is stored as plain text in the post record for consistency, so even if the member later changes their profile display name, the post will show the name that was valid at posting time.\n\nThis field corresponds to the display_name column in the communitybbs_post table and supports user customization without affecting their global profile."},{"type":"null"}],"description":"The display name to be shown as the author of this post.\n\nThis field is optional. If provided, it must be between 1 and 32 characters. It will override the member's default display name for this specific post.\n\nIf not provided, the system will use the authenticated member's current display_name from their profile.\n\nThis field is stored as plain text in the post record for consistency, so even if the member later changes their profile display name, the post will show the name that was valid at posting time.\n\nThis field corresponds to the display_name column in the communitybbs_post table and supports user customization without affecting their global profile."}},"required":["communitybbs_community_id","title","body"],"description":"Request body for creating a new post.\n\nThis object contains all necessary information for creating a new post in a specified community. The authenticated member must be logged in to perform this operation.\n\nThe communitybbs_community_id is required and anchors the post to a community context, which determines where the post appears in the system. The title and body are mandatory and must meet length constraints — these are core content fields.\n\nThe optional display_name allows the user to personalize the author attribution for this post without modifying their global profile. If omitted, the system defaults to the member's current display name.\n\nThis create type enforces all business validation rules before the post is stored, including content length and security checks. The system generates the id, created_at, and updated_at fields internally.\n\nThis request type is used exclusively for POST /communities/{communityId}/posts and ensures that all required data is provided in a structured and validated format before post creation.\n\nNote: No validation is performed on the existence of the community during the schema validation — this is handled by the service layer but is not part of this type specification."},"IComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the comment."},"postId":{"type":"string","format":"uuid","description":"The unique identifier of the post this comment belongs to.\n\nThis field links the comment to its parent post in the platform. The system enforces that every comment must be associated with exactly one post.\n\nThis reference ensures that comments are properly nested and displayed in the context of the post they're replying to."},"author":{"type":"string","description":"The display name of the comment's author as it appeared at the time of posting.\n\nThis captures the author's chosen name at the moment the comment was made. It remains unchanged even if the author later modifies their profile display name.\n\nIf the author did not specify a display name, this defaults to \"Anonymous\", ensuring every comment has a visible author attribution."},"parentId":{"oneOf":[{"type":"string","format":"uuid","description":"The unique identifier of the parent comment this is replying to, if applicable.\n\nThis field enables threaded replies where a comment can be nested beneath another comment.\n\nA null value indicates this is a top-level comment on the post.\n\nThis field allows the system to maintain and display hierarchical relationships in conversations."},{"type":"null"}],"description":"The unique identifier of the parent comment this is replying to, if applicable.\n\nThis field enables threaded replies where a comment can be nested beneath another comment.\n\nA null value indicates this is a top-level comment on the post.\n\nThis field allows the system to maintain and display hierarchical relationships in conversations."},"content":{"type":"string","description":"Text content of the comment. Must be between 2 and 2,000 characters according to business requirements.\n\nThe actual text content of the comment, limited to 2,000 characters to maintain readability.\n\nEmpty comments are not allowed and the system will reject submissions under 2 characters."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the comment was created.\n\nThis immutable timestamp indicates when the comment was first published to the post thread.\n\nIt is used for sorting in 'Newest' order and provides users with a sense of recency within the conversation."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when the comment was last updated.\n\nThis field is updated automatically whenever the comment's content is modified through an edit operation.\n\nIt is used to identify recently modified comments and is displayed in UIs to indicate recency of edits."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"The timestamp when the comment was soft-deleted, if applicable.\n\nIf this field has a value, the comment has been soft-deleted by a moderator or the author. It will be hidden from public views but retained in the database for audit purposes.\n\nIf null, the comment is active and visible."},{"type":"null"}],"description":"The timestamp when the comment was soft-deleted, if applicable.\n\nIf this field has a value, the comment has been soft-deleted by a moderator or the author. It will be hidden from public views but retained in the database for audit purposes.\n\nIf null, the comment is active and visible."}},"required":["id","postId","author","content","created_at"],"description":"Main entity representing comments on posts. Supports infinite nesting through parent-child relationships. Each comment belongs to a post and may optionally belong to another comment as a reply. Implements soft deletion for moderation.\n\nThis entity tracks all user comments on posts in the Community BBS platform. Each comment is tied to a specific post and an author. It supports threaded replies through the parentId reference, allowing for deep nesting. Comments have lifetime management through soft deletion (using deleted_at). Display name is captured at creation time to maintain consistency even if the user changes their profile name.\n\nComments are indexed in communitybbs_search_comment for full-text search efficiency. Integration with the voting system allows for upvotes and downvotes tracked in the communitybbs_vote table.\n\nSecurity: Only the author or an administrator can update or delete comments. Guests can view comments, but cannot interact with them."},"IComment.ICreate":{"type":"object","properties":{"communitybbs_post_id":{"type":"string","format":"uuid","description":"Reference to the post this comment belongs to. {@link communitybbs_post.id}.\n\nThe unique identifier of the post this comment is associated with. This is mandatory; a comment cannot exist without a parent post."},"communitybbs_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the parent comment this is replying to. {@link communitybbs_comment.id}.\n\nThe unique identifier of the parent comment this is replying to, used for threaded replies. Optional. If not provided, the comment is a top-level comment on the post."},{"type":"null"}],"description":"Reference to the parent comment this is replying to. {@link communitybbs_comment.id}.\n\nThe unique identifier of the parent comment this is replying to, used for threaded replies. Optional. If not provided, the comment is a top-level comment on the post."},"content":{"type":"string","description":"Text content of the comment. Must be between 2 and 2,000 characters according to business requirements. Truncated if longer.\n\nThe actual text content of the comment. Must be at least 2 characters long; any submission below this threshold will be rejected by the system."},"display_name":{"oneOf":[{"type":"string","description":"Display name of the author as shown on the comment. If not provided by user, defaults to 'Anonymous'. Truncated to 32 characters if longer. Not a reference to member profile - stored here for consistency even if member changes display name.\n\nThe display name used when showing this comment. If not provided, the system will use the member's default display name from their profile. If provided, it is truncated to 32 characters if it exceeds the limit."},{"type":"null"}],"description":"Display name of the author as shown on the comment. If not provided by user, defaults to 'Anonymous'. Truncated to 32 characters if longer. Not a reference to member profile - stored here for consistency even if member changes display name.\n\nThe display name used when showing this comment. If not provided, the system will use the member's default display name from their profile. If provided, it is truncated to 32 characters if it exceeds the limit."}},"required":["communitybbs_post_id","content"],"description":"Request body for creating a new comment. Represents the input payload when a user submits a comment.\n\nThis type is used specifically in POST /comments and POST /communities/{communityId}/posts/{postId}/comments endpoints. It captures the minimal content required to create a comment: the parent post and the text content. The parent comment ID is optional for threading. The display name is optional since it defaults to the member's profile name.\n\nFields that are non-editable such as id, created_at, updated_at, deleted_at, and the author's member ID are handled server-side and not included in this type to prevent client-side tampering.\n\nThis is always submitted by an authenticated member. Guest users cannot access this endpoint.\n\nAuthorization Rule: Only authenticated members can create comments."},"IComment.IUpdate":{"type":"object","properties":{"content":{"type":"string","description":"Text content of the comment. Must be between 2 and 2,000 characters according to business requirements. Truncated if longer.\n\nThe new text content for the comment. Must be at least 2 characters long. If empty or under limit, the server will return a 400 error."},"display_name":{"oneOf":[{"type":"string","description":"Display name of the author as shown on the comment. If not provided by user, defaults to 'Anonymous'. Truncated to 32 characters if longer. Not a reference to member profile - stored here for consistency even if member changes display name.\n\nUpdated display name for this comment. Optional. If provided, it must not exceed 32 characters. If omitted, the existing display name remains unchanged."},{"type":"null"}],"description":"Display name of the author as shown on the comment. If not provided by user, defaults to 'Anonymous'. Truncated to 32 characters if longer. Not a reference to member profile - stored here for consistency even if member changes display name.\n\nUpdated display name for this comment. Optional. If provided, it must not exceed 32 characters. If omitted, the existing display name remains unchanged."}},"required":[],"description":"Request body for updating an existing comment. Represents the payload when a user edits their own comment.\n\nThis type is used in PUT /comments/{commentId} and PUT /communities/{communityId}/posts/{postId}/comments/{commentId} endpoints. All fields are optional, meaning a user may update only the content, only the display_name, or both. If neither is provided, the request will be rejected as empty.\n\nThe server will validate that the comment exists and the requester is the original author (or an administrator). If the user attempts to edit a comment by another author, the server returns a 403 error.\n\nThe updated_at timestamp is controlled server-side and not exposed in this request type.\n\nAuthorization Rule: Only the original author of the comment or an administrator can update it."},"IVote.ICreate":{"type":"object","properties":{"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"The post this vote is associated with, if applicable. One and only one of post_id or comment_id must be non-null. {@link communitybbs_post.id}.\n\nThe unique identifier of the post being voted on. Allowed only if comment_id is null. Must reference an existing, active post. Cannot be used with comment_id in the same request."},{"type":"null"}],"description":"The post this vote is associated with, if applicable. One and only one of post_id or comment_id must be non-null. {@link communitybbs_post.id}.\n\nThe unique identifier of the post being voted on. Allowed only if comment_id is null. Must reference an existing, active post. Cannot be used with comment_id in the same request."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"The comment this vote is associated with, if applicable. One and only one of post_id or comment_id must be non-null. {@link communitybbs_comment.id}.\n\nThe unique identifier of the comment being voted on. Allowed only if post_id is null. Must reference an existing, active comment. Cannot be used with post_id in the same request."},{"type":"null"}],"description":"The comment this vote is associated with, if applicable. One and only one of post_id or comment_id must be non-null. {@link communitybbs_comment.id}.\n\nThe unique identifier of the comment being voted on. Allowed only if post_id is null. Must reference an existing, active comment. Cannot be used with post_id in the same request."},"type":{"oneOf":[{"const":"upvote","description":"The type of vote: 'upvote' or 'downvote'.\n\nSpecifies whether the user is casting an upvote (+1) or downvote (-1). The system treats these as mutually exclusive alternatives. If the user has already voted on this item, this request will update their vote (toggle), not create a duplicate."},{"const":"downvote","description":"The type of vote: 'upvote' or 'downvote'.\n\nSpecifies whether the user is casting an upvote (+1) or downvote (-1). The system treats these as mutually exclusive alternatives. If the user has already voted on this item, this request will update their vote (toggle), not create a duplicate."}],"description":"The type of vote: 'upvote' or 'downvote'.\n\nSpecifies whether the user is casting an upvote (+1) or downvote (-1). The system treats these as mutually exclusive alternatives. If the user has already voted on this item, this request will update their vote (toggle), not create a duplicate."}},"required":["type"],"description":"Request body for creating or updating a vote on a post or comment. Represents the input payload when a user casts, changes, or retracts a vote.\n\nThis type is used in POST /votes and POST /communities/{communityId}/posts/{postId}/votes endpoints to create a new vote. It is also used in PATCH /votes and PATCH /communities/{communityId}/posts/{postId}/votes to update an existing vote.\n\nExactly one of post_id or comment_id must be provided to identify the target. Both cannot be null or both non-null. The type field is mandatory and must be exactly 'upvote' or 'downvote'.\n\nThe system enforces that a user cannot vote on their own content. Before processing, the server checks the target's author_id (from post or comment) against the authenticated actor_id. If they match, the request is rejected with a 403 error.\n\nThe server creates a new record in communitybbs_vote if no previous vote exists. If a vote already exists, it will be updated (switched or deleted based on logic).\n\nAuthorization Rule: Only authenticated members or administrators can create or update votes."},"IVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the vote record.\n\nThis field is a UUID generated by the system upon vote creation. It uniquely identifies each vote entry in the communitybbs_vote table.\n\nThe value is automatically assigned by the database and should not be provided by clients."},"actor_id":{"type":"string","format":"uuid","description":"Identifier of the user who cast the vote.\n\nThis references either a member, administrator, or guest entity via its UUID id.\n\nMust correspond to an existing record in communitybbs_member, communitybbs_administrator, or communitybbs_guest.\n\nThis field establishes accountability and prevents duplicate voting by the same actor on the same target item."},"post_id":{"type":"string","format":"uuid","description":"Identifier of the post being voted on, if applicable.\n\nWhen present, this field references a specific post in the communitybbs_post table.\n\nExactly one of post_id or comment_id must be non-null. This field is null if the vote is on a comment.\n\nUsed to associate votes with posts for score calculation and retrieval."},"comment_id":{"type":"string","format":"uuid","description":"Identifier of the comment being voted on, if applicable.\n\nWhen present, this field references a specific comment in the communitybbs_comment table.\n\nExactly one of post_id or comment_id must be non-null. This field is null if the vote is on a post.\n\nUsed to associate votes with comments for score calculation and retrieval."},"type":{"oneOf":[{"const":"upvote","description":"The type of vote cast by the actor.\n\nMust be either 'upvote' or 'downvote'.\n\nThis value determines whether the vote contributes positively or negatively to the target item's score (upvotes - downvotes).\n\nA vote of 'upvote' adds +1 to the score, while 'downvote' adds -1.\n\nOnly two values are permitted, ensuring consistency in scoring logic."},{"const":"downvote","description":"The type of vote cast by the actor.\n\nMust be either 'upvote' or 'downvote'.\n\nThis value determines whether the vote contributes positively or negatively to the target item's score (upvotes - downvotes).\n\nA vote of 'upvote' adds +1 to the score, while 'downvote' adds -1.\n\nOnly two values are permitted, ensuring consistency in scoring logic."}],"description":"The type of vote cast by the actor.\n\nMust be either 'upvote' or 'downvote'.\n\nThis value determines whether the vote contributes positively or negatively to the target item's score (upvotes - downvotes).\n\nA vote of 'upvote' adds +1 to the score, while 'downvote' adds -1.\n\nOnly two values are permitted, ensuring consistency in scoring logic."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the vote was cast.\n\nThis is set automatically by the server at the moment the vote is created and never modified.\n\nFormat follows ISO 8601: YYYY-MM-DDTHH:mm:ss.SSSZ\n\nUsed for ordering votes chronologically and for audit trails."}},"required":["id","actor_id","type","created_at"],"description":"Represents a single vote cast by a user on either a post or a comment.\n\nThis entity tracks user feedback on community content and supports the platform's score-based ranking system.\n\nEach vote is uniquely identified by its id and associated with exactly one actor and one target (either a post or a comment, but not both).\n\nThe combination of actor_id and post_id (when targeting a post) or actor_id and comment_id (when targeting a comment) must be unique per record, as enforced by database constraints.\n\nVotes are used to compute the dynamic score displayed for each post and comment: score = SUM(upvotes) - SUM(downvotes).\n\nThis model does not store aggregated values; scores are computed in real-time using this table's data.\n\nThis design ensures data normalization, auditability, and support for vote changes (e.g., toggling from upvote to downvote)."},"ICommunitybbsAdministrator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated administrator.\n\nThe unique identifier for the administrator who successfully authenticated. This field identifies the administrator in subsequent operations."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response containing JWT token for administrators.\n\nThis response is returned after a successful administrator login. It includes the admin's unique identifier and an access token for subsequent authenticated administrative requests."},"ICommunitybbsCommunity":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the community.\n\nThis field is auto-generated by the database system and is used as the primary key for all operations related to the community."},"name":{"type":"string","minLength":3,"maxLength":32,"pattern":"^[a-z0-9_-]+$","description":"The unique, lowercase identifier for the community used in URLs (e.g. /c/ai). Must be between 3 and 32 characters and contain only alphanumeric characters, hyphens (-), or underscores (_). This field is used for global search and direct access. The uniqueness of this field is enforced by a unique index.\n\nThe name must be unique across all communities. It is case-insensitive for lookup purposes. Only alphanumeric characters, hyphens, and underscores are permitted.\n\nThis field is immutable after creation."},"description":{"type":"string","maxLength":500,"description":"A brief description of the community's purpose, up to 500 characters. Used for discovery and the community info panel. May be empty but cannot be longer than 500 characters.\n\nThis field provides context to users browsing communities. It is displayed on the community home page and search results.\n\nIf not provided, the description will be empty. The description supports plain text only and is not rendered as HTML."},"category":{"oneOf":[{"const":"Tech & Programming","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Science","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Movies & TV","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Games","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Sports","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Lifestyle & Wellness","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Study & Education","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Art & Design","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Business & Finance","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"News & Current Affairs","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"General","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."}],"description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},"logo":{"type":"string","format":"uri","maxLength":80000,"description":"The URL to the community's logo image (PNG, JPG, GIF). Optional. If empty, a default placeholder is used.\n\nThis field stores the URL reference to an image file hosted externally.\n\nThe URL must be valid and accessible. The system does not validate image content or format beyond ensuring it is a valid URL. The maximum length is 80,000 characters.\n\nIf this field is null or empty, a default system logo will be displayed."},"banner":{"type":"string","format":"uri","maxLength":80000,"description":"The URL to the community's banner image (PNG, JPG, GIF). Optional. If empty, a default placeholder is used.\n\nThis field stores the URL reference to an image file hosted externally.\n\nThe URL must be valid and accessible. The system does not validate image content or format beyond ensuring it is a valid URL. The maximum length is 80,000 characters.\n\nIf this field is null or empty, a default system banner will be displayed."},"rules":{"type":"string","maxLength":3000,"description":"An array of up to 10 community rules, each up to 100 characters long. Displayed as numbered list 1 through 5 in the community info panel.\n\nStored as JSON-encoded array in database. Used to enforce community guidelines. The requirement specifies direct array storage, so the field is stored as a string[] type in Prisma with appropriate string array mapping.\n\nThe rules are displayed on the community page as an ordered list. Only the first five rules are shown by default. The content must be stored as a JSON array of strings. Example: [\"No spam\", \"Be respectful\"]"},"created_at":{"type":"string","format":"date-time","description":"The timestamp when this community was created. Used for sorting in 'Recently Created' order and for audit trails. Never modified.\n\nThis field is automatically set by the system at the time of community creation. It cannot be modified after creation. The timestamp includes timezone information (timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp of the last modification to the community's metadata. This field is updated only when name, description, category, logo, banner, or rules are changed. Never set manually; updated by application logic.\n\nThis field reflects the most recent administrative change to the community's metadata. It does not update when members join or leave, or when posts/comments are created. The value is automatically maintained by the application."},"deleted_at":{"type":"string","format":"date-time","description":"The timestamp when this community was soft-deleted. If null, the community is active. If set, the community is considered archived and hidden from most UIs. Supports recovery. Required for soft delete capability as per business logic.\n\nThis field implements soft delete behavior. If set, the community is hidden from public views but data remains in the database for audit and potential restoration. A null value indicates an active community."},"member_count":{"type":"integer","minimum":0,"description":"The total number of users who have joined this community. Always derived from active relationships to communitybbs_member, but stored for performance and consistency in the explore page and community list.\n\nIncremented when a user joins, decremented when they leave. Since this value is critical to sorting and display and is referenced in early codebase in requirement documentation, it is stored as a denormalized field here, but it is NOT calculated here - it's kept in sync by application logic via member join/leave events.\n\nThis field provides a quick count for display purposes and is updated in real-time by application logic when users join/leave the community."},"last_active_at":{"type":"string","format":"date-time","description":"The timestamp of the most recent activity in this community, which can be any of: a post created, a comment posted, a vote cast, or a user joining. Used for ordering the 'Recent Communities' list in the sidebar and for determining community activity. Updated on any of these events. The field is stored here for performance and ensures consistence with client-side feeds.\n\nThis field captures the most recent activity in the community, regardless of the type of activity. It is used to rank communities in the 'Recent Communities' sidebar. The value is updated asynchronously when any relevant activity occurs."}},"required":["id","name","category","created_at","updated_at","member_count","last_active_at"],"description":"Core entity representing a sub-community on the platform. This model stores all metadata about a community including its name, description, category, visual assets, rules, and activity tracking. Communities are independent entities that users can create, join, search, and explore.\n\nThe name field is unique and serves as the community's identifier in URLs (e.g., /c/communityname). This table follows strict 3NF: all fields are atomic and depend solely on the primary key. No denormalization occurs here, as required by the requirements which specify direct storage of category, rules, and timestamps. Rules are stored as an array of strings as explicitly required by the business requirements.\n\nThis model is essential for implementing community discovery, search, and membership logic. It supports both public access and administrative management."},"ICommunitybbsCommunity.IUpdate":{"type":"object","properties":{"description":{"type":"string","maxLength":500,"description":"Updated description of the community's purpose and scope.\n\nThis field allows community creators to modify the brief summary that appears in the community info panel and search results. The description can be up to 500 characters long to provide sufficient context while remaining concise.\n\nThe system updates this field in the communitybbs_community table, and the change is immediately reflected to all users viewing the community page. If no description is provided in the request, the existing value is preserved."},"category":{"oneOf":[{"const":"Tech & Programming","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"Science","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"Movies & TV","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"Games","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"Sports","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"Lifestyle & Wellness","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"Study & Education","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"Art & Design","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"Business & Finance","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"News & Current Affairs","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},{"const":"General","description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."}],"description":"New category assignment for the community.\n\nThis field allows reclassification of the community to a different topic from the predefined list. It affects filtering on the Explore page and search results, helping users find relevant communities.\n\nCategory changes reflect the community's evolving purpose. The system validates that the new category is one of the predefined options to maintain data integrity. If omitted, the current category is preserved."},"logo":{"type":"string","maxLength":80000,"format":"uri","description":"URL of the new community logo image.\n\nThis field accepts a valid URL pointing to a logo image file (PNG, JPG, GIF). The URL can be up to 80,000 characters to accommodate long CDN paths but is typically much shorter.\n\nIf provided, it replaces the existing logo. If null or omitted, the logo is unchanged. The system does not validate the image's existence or format at the API level — this is handled by the file management service."},"banner":{"type":"string","maxLength":80000,"format":"uri","description":"URL of the new community banner image.\n\nThis field accepts a valid URL pointing to a banner image file (PNG, JPG, GIF). The URL can be up to 80,000 characters to accommodate long CDN paths but is typically much shorter.\n\nIf provided, it replaces the existing banner. If null or omitted, the banner remains unchanged. The system does not validate the image's existence or format at the API level — this is handled by the file management service."},"rules":{"type":"string","maxLength":3000,"description":"New community rules as a JSON-encoded array of strings.\n\nThis field allows community creators to update the rules governing conduct within the community. The rules are stored as a JSON-formatted array of strings, each ≤100 characters, with a maximum of 10 rules.\n\nEach rule is displayed as a numbered list (1-5) in the community info panel. Any rule exceeding two lines will be truncated with an ellipsis. The limit ensures rules remain readable without collapsing the UI."}},"required":[],"description":"Update parameters for modifying community metadata.\n\nThis schema defines the fields that can be updated by a community creator. Only non-identifier metadata fields are mutable after creation: description, category, logo, banner, and rules.\n\nThis type ensures that critical, immutable fields such as the community name and creation date cannot be changed, preserving the reproducibility and linking integrity of the community's identity and content history.\n\nAll update operations must be performed by the original creator of the community or an administrator. The system enforces ownership checks before applying any of these updates to ensure proper access control."},"IPage":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the result set.\n\nThis property contains information about page position, limits, and total records.\n\nIt allows clients to determine current position in the data set, understand available pages, and implement navigation controls.\n\nThe pagination object follows the standard pattern used throughout the system."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunitybbsCommunity.ISummary"},"description":"Array of community summary objects matching the search criteria.\n\nThis property contains the actual results of the search operation, formatted as simple summary objects.\n\nEach item represents a community with minimal information needed for display in lists: name, description, logo, join status, etc.\n\nThe size of this array is determined by the 'limit' parameter (default 20) and the number of matching results.\n\nThis structure enables efficient display of large result sets with minimal payload size."}},"required":["pagination","data"],"description":"Standard paginated result container for list-based API responses.\n\nThis schema follows exactly the fixed IPage<T> structure as required in the documentation.\n\nIt has two mandatory properties: pagination (with metadata) and data (the actual items).\n\nThe 'data' array property uses a $ref to ICommunitybbsCommunity.ISummary because the schema name after IPage is 'ICommunitybbsCommunity.ISummary', meaning it contains an array of community summary objects.\n\nThe pagination property contains metadata about the current page position, limit, total records, and number of pages.\n\nThe IPage<T> structure is used consistently across all paginated API endpoints in the system, ensuring predictable response formats for clients."},"IResponseEmpty":{"type":"object","properties":{},"required":[],"description":"An empty response body used for operations that return no content.\n\nThis schema is used for DELETE and other operations that succeed without returning any payload data.\n\nIt follows the OpenAPI standard for empty response objects and is used consistently across the API when no response body is required."},"ICommunitybbsAdministrator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the administrator account.\n\nThis UUID is generated by the system upon creation and serves as the primary key in the communitybbs_administrator table.\n\nIt is used to uniquely identify administrators across all system operations and records.\n\nThis field is immutable after creation."},"email":{"type":"string","format":"email","description":"The email address associated with the administrator account.\n\nThis serves as the primary login identifier for administrators and must be unique across the system.\n\nThis follows the same format requirements as member emails but is managed in a separate table to enforce role separation.\n\nThis field is persistent and required for authentication."},"display_name":{"type":"string","minLength":1,"maxLength":32,"description":"The human-readable display name used for administrators in the UI and audit logs.\n\nThis name is used in moderation logs, interface displays, and administrative communications.\n\nIt can be modified by the administrator but must be between 1 and 32 characters.\n\nIf not provided during account creation, it defaults to the username portion of the email address."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when this administrator account was created.\n\nThis field records the exact moment the account was created and is set by the system.\n\nThis value is immutable and used for audit trails, reporting, and determining account age.\n\nThe format follows ISO 8601 standard with timezone information."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when this administrator's profile was last modified.\n\nThis field is automatically updated whenever any administrator field changes (e.g., display_name).\n\nIt does not reflect activity or login events - only changes to the profile data itself.\n\nThe format follows ISO 8601 standard with timezone information."}},"required":["id","email","display_name","created_at","updated_at"],"description":"Represents an administrator user of the Community BBS platform with elevated privileges.\n\nThis schema defines the basic account information for system administrators who can perform moderation actions, manage communities, and oversee user accounts.\n\nAdministrators are distinct from regular members - they have authority to delete and create communities, ban users, and modify system settings, but have no access to user passwords.\n\nThere are no sensitive fields (like passwords) included in this response as per security requirements - authentication credentials are never exposed through API responses.\n\nThis schema provides the minimal necessary context for identifying administrators in audit logs and management interfaces."},"ICommunitybbsMember":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the member account.\n\nThis UUID is generated by the system upon account creation and serves as the primary key in the communitybbs_member table.\n\nIt is used to uniquely identify members across all system operations and records.\n\nThis field is immutable after creation."},"email":{"type":"string","format":"email","description":"The email address associated with the member account.\n\nThis serves as the primary login identifier for members and must be unique across the system.\n\nThis field is used to identify members during authentication and for communication purposes.\n\nThe email must follow standard email format requirements as enforced by the database schema."},"display_name":{"type":"string","minLength":1,"maxLength":32,"description":"The human-readable display name used for the member in the UI and for content attribution.\n\nThis name appears on posts, comments, and other user-generated content created by the member.\n\nIt defaults to the username portion of the email address if not provided during registration.\n\nThe field is limited to 32 characters to ensure consistent display across UI elements.\n\nThis display name is stored with each post or comment at creation time to maintain attribution even if the member later changes their profile display name."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when this member account was created.\n\nThis field records the exact moment the account was registered and is set by the system.\n\nThis value is immutable and used for audit trails, reporting, and determining account age.\n\nThe format follows ISO 8601 standard with timezone information."},"updated_at":{"type":"string","format":"date-time","description":"The timestamp when this member's profile was last modified.\n\nThis field is automatically updated whenever any member profile field changes (e.g., display_name property).\n\nIt does not reflect activity or login events - only changes to the profile data itself.\n\nThe format follows ISO 8601 standard with timezone information."}},"required":["id","email","display_name","created_at","updated_at"],"description":"Represents a registered member user of the Community BBS platform.\n\nThis schema defines the basic account information for authenticated users who can create posts, comments, vote, and join communities.\n\nMembers have more capabilities than guests but fewer than administrators. They can create and manage their own content but cannot moderate others' content or system settings.\n\nThis schema provides the minimal necessary context for identifying members in system responses and audit trails.\n\nNote that sensitive information like password_hash is never exposed in API responses as per security requirements. Only public profile fields are included."},"ICommunitybbsCommunity.IRequest":{"type":"object","properties":{"search":{"type":"string","minLength":2,"maxLength":100,"description":"Keyword for full-text search across community name and description.\n\nThis field enables searching communities by partial name or description matches using PostgreSQL trigram operators for efficient searching.\n\nMust be at least 2 characters long to prevent performance issues with short queries.\n\nSearch is case-insensitive and matches any part of the name or description.\n\nFor example, searching 'dev' would match 'web-dev' or 'developer'."},"sortBy":{"oneOf":[{"const":"name","description":"Field to sort the communities by.\n\nSpecifies the attribute used to order the results in the response.\n\nOptions include:\n- 'name': Sort alphabetically by community name\n- 'created_at': Sort by community creation date (oldest to newest)\n- 'member_count': Sort by number of members in the community\n- 'last_active_at': Sort by when activity last occurred in the community\n\nDefault is 'name' with ascending order as specified in requirements."},{"const":"created_at","description":"Field to sort the communities by.\n\nSpecifies the attribute used to order the results in the response.\n\nOptions include:\n- 'name': Sort alphabetically by community name\n- 'created_at': Sort by community creation date (oldest to newest)\n- 'member_count': Sort by number of members in the community\n- 'last_active_at': Sort by when activity last occurred in the community\n\nDefault is 'name' with ascending order as specified in requirements."},{"const":"member_count","description":"Field to sort the communities by.\n\nSpecifies the attribute used to order the results in the response.\n\nOptions include:\n- 'name': Sort alphabetically by community name\n- 'created_at': Sort by community creation date (oldest to newest)\n- 'member_count': Sort by number of members in the community\n- 'last_active_at': Sort by when activity last occurred in the community\n\nDefault is 'name' with ascending order as specified in requirements."},{"const":"last_active_at","description":"Field to sort the communities by.\n\nSpecifies the attribute used to order the results in the response.\n\nOptions include:\n- 'name': Sort alphabetically by community name\n- 'created_at': Sort by community creation date (oldest to newest)\n- 'member_count': Sort by number of members in the community\n- 'last_active_at': Sort by when activity last occurred in the community\n\nDefault is 'name' with ascending order as specified in requirements."}],"description":"Field to sort the communities by.\n\nSpecifies the attribute used to order the results in the response.\n\nOptions include:\n- 'name': Sort alphabetically by community name\n- 'created_at': Sort by community creation date (oldest to newest)\n- 'member_count': Sort by number of members in the community\n- 'last_active_at': Sort by when activity last occurred in the community\n\nDefault is 'name' with ascending order as specified in requirements."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction for the results.\n\nDetermines whether results are ordered in ascending (A-Z, oldest to newest) or descending (Z-A, newest to oldest) order.\n\nOptions are 'asc' for ascending and 'desc' for descending.\n\nDefault is 'asc' (alphabetical ascending)."},{"const":"desc","description":"Sort direction for the results.\n\nDetermines whether results are ordered in ascending (A-Z, oldest to newest) or descending (Z-A, newest to oldest) order.\n\nOptions are 'asc' for ascending and 'desc' for descending.\n\nDefault is 'asc' (alphabetical ascending)."}],"description":"Sort direction for the results.\n\nDetermines whether results are ordered in ascending (A-Z, oldest to newest) or descending (Z-A, newest to oldest) order.\n\nOptions are 'asc' for ascending and 'desc' for descending.\n\nDefault is 'asc' (alphabetical ascending)."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for pagination, 1-indexed.\n\nSpecifies which page of results to return, with each page containing up to 'limit' results.\n\nPage numbering starts at 1 (not 0) to match user expectations.\n\nMust be an integer with a minimum value of 1.\n\nDefault is 1, meaning the first page of results."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Number of communities per page in the response.\n\nControls how many communities appear on each page of results.\n\nMust be between 1 and 100 (inclusive) to prevent excessive payload sizes.\n\nDefault is 20 to balance loading speed and content density per page.\n\nIf a client requests more than 100, the system will cap it at 100 as specified in requirements."}},"required":[],"description":"Request parameters for searching and filtering communities in administrative views.\n\nThis schema defines the structured parameters accepted by the /admin/communities endpoint to filter and sort the list of communities.\n\nIt combines search capabilities, sorting preferences, and pagination controls into a single object to facilitate complex queries without URL clutter.\n\nThe search property supports full-text matching on both community name and description fields.\n\nThe sortBy and sortOrder properties allow flexible sorting by different attributes relevant to community management.\n\nThe page and limit properties enable efficient pagination for large datasets, following the requirement of 20 communities per page by default.\n\nThis request object ensures consistent search behavior across different administrative interfaces and supports all search and sort requirements specified in the documentation."},"ICommunitybbsCommunity.ICreate":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":32,"pattern":"^[a-z0-9_-]+$","description":"The unique, lowercase identifier for the community used in URLs (e.g. /c/ai). Must be between 3 and 32 characters and contain only alphanumeric characters, hyphens (-), or underscores (_). This field is used for global search and direct access. The uniqueness of this field is enforced by a unique index.\n\nThe name must be unique across all communities. It is case-insensitive for lookup purposes. Only alphanumeric characters, hyphens, and underscores are permitted.\n\nThis field is immutable after creation."},"category":{"oneOf":[{"const":"Tech & Programming","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Science","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Movies & TV","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Games","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Sports","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in theExplore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Lifestyle & Wellness","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Study & Education","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Art & Design","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"Business & Finance","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"News & Current Affairs","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},{"const":"General","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."}],"description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]\n\nUsed for filtering communities in the Explore page and search results. The category helps users discover communities of interest.\n\nThe category values are predefined and enforced by the system. New categories cannot be added by users. If unspecified, the system defaults to \"General\"."},"description":{"type":"string","maxLength":500,"description":"A brief description of the community's purpose, up to 500 characters. Used for discovery and the community info panel. May be empty but cannot be longer than 500 characters.\n\nThis field provides context to users browsing communities. It is displayed on the community home page and search results.\n\nIf not provided, the description will be empty. The description supports plain text only and is not rendered as HTML."},"rules":{"type":"string","maxLength":3000,"description":"An array of up to 10 community rules, each up to 100 characters long. Displayed as numbered list 1 through 5 in the community info panel.\n\nStored as JSON-encoded array in database. Used to enforce community guidelines. The requirement specifies direct array storage, so the field is stored as a string[] type in Prisma with appropriate string array mapping.\n\nThe rules are displayed on the community page as an ordered list. Only the first five rules are shown by default. The content must be stored as a JSON array of strings. Example: [\"No spam\", \"Be respectful\"]"},"logo":{"type":"string","format":"uri","maxLength":80000,"description":"The URL to the community's logo image (PNG, JPG, GIF). Optional. If empty, a default placeholder is used.\n\nThis field stores the URL reference to an image file hosted externally.\n\nThe URL must be valid and accessible. The system does not validate image content or format beyond ensuring it is a valid URL. The maximum length is 80,000 characters.\n\nIf this field is null or empty, a default system logo will be displayed."},"banner":{"type":"string","format":"uri","maxLength":80000,"description":"The URL to the community's banner image (PNG, JPG, GIF). Optional. If empty, a default placeholder is used.\n\nThis field stores the URL reference to an image file hosted externally.\n\nThe URL must be valid and accessible. The system does not validate image content or format beyond ensuring it is a valid URL. The maximum length is 80,000 characters.\n\nIf this field is null or empty, a default system banner will be displayed."}},"required":["name","category"],"description":"Request body for creating a new community.\n\nThis type is used specifically for community creation operations. It excludes system-generated fields (id, created_at, updated_at, member_count, last_active_at, deleted_at) that are managed by the system.\n\nFor creation, all fields except id and timestamps are required. The system validates the name format and uniqueness, and assigns default values where applicable. This object captures the initial state of a community before system processing.\n\nIt aligns with the communitybbs_community table in the Prisma schema and represents the data required from the client to create a new community."},"ICommunitybbsPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the post.\n\nThis field is auto-generated by the database system and is used as the primary key for all operations related to the post."},"communitybbs_community_id":{"type":"string","format":"uuid","description":"Reference to the community where this post was created. {@link communitybbs_community.id}.\n\nThis foreign key links the post to its parent community. The community must exist for the post to be created. It ensures all posts are contained within a valid community context.\n\nThis field is immutable and set at creation time. It cannot be changed after the post is created."},"communitybbs_member_id":{"type":"string","format":"uuid","description":"Reference to the member who authored this post. {@link communitybbs_member.id}.\n\nThis foreign key links the post to its author. The author must be a valid registered member to create a post. This field establishes ownership and enables access control for editing and deletion.\n\nThis field is immutable and set at creation time. It cannot be changed after the post is created."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Title of the post. Must be between 5 and 120 characters according to business requirements. Truncated if longer.\n\nThis field contains the brief title of the post, used for display in feeds, search, and as a headline.\n\nThe title must be at least 5 characters long and no longer than 120 characters. The system truncates titles exceeding the maximum length during creation or update.\n\nThis field is indexed for search performance and displayed as a clickable link on the community page."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Body content of the post. Must be between 10 and 10,000 characters according to business requirements. Contains plain text only with line breaks. No HTML or code allowed.\n\nThis field contains the full text content of the post. It accepts plain text with line breaks. No HTML, JavaScript, or other executable code is permitted for security reasons.\n\nThe body text is truncated during creation or update if it exceeds the 10,000-character limit. The minimum length ensures meaningful content is provided.\n\nThis field is used for display, full-text search, and comment context."},"display_name":{"type":"string","minLength":1,"maxLength":32,"description":"Display name of the author as shown on the post. If not provided by user, defaults to 'Anonymous'. Truncated to 32 characters if longer. Not a reference to member profile - stored here for consistency even if member changes display name.\n\nThis field stores the author's display name at the time of posting. It remains static even if the member later changes their display name in their profile. This ensures the post always reflects the author's identity as it was when posted.\n\nIf unspecified by the user during submission, the system defaults to 'Anonymous'. This field is not a reference to the member table; it is a direct copy of the display name."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the post was created. Always set at time of creation and never modified.\n\nThis field records the exact moment when the post was submitted to the system. It is set by the server and cannot be overridden by clients.\n\nThis timestamp is used for display (relative time), sorting (Newest/Top), and audit purposes. The timestamp includes timezone information (timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the post was last updated. Set on any edit operation.\n\nThis field is updated whenever the post's title or body is modified. It captures the most recent change made to the post content.\n\nThe updated_at timestamp does not change when votes or comments are added - it only reflects modifications to the post body or title. This allows users to see when the content was last revised."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp when the post was soft-deleted. Null if not deleted. Enforces soft-delete policy for content moderation.\n\nThis field implements soft delete behavior. If set, the post is hidden from public views but remains in the database for audit and potential restoration. A null value indicates the post is still active and visible.\n\nWhen a post is soft-deleted, the deleted_at timestamp is set to the current time. The post can be restored by setting this field to null (admin-only operation)."}},"required":["id","communitybbs_community_id","communitybbs_member_id","title","body","created_at"],"description":"Main entity representing user posts in communities. Each post belongs to a community and is authored by a member. Supports soft deletion for content moderation and preserves historical states through snapshots.\n\nThis model defines the structure of user-generated posts and links them to both their author and their parent community. It supports full text search, voting, and commenting.\n\nThe schema enforces strict constraints on all fields: title length (5-120 characters), body length (10-10,000 characters), and prohibits HTML/code. The table is indexed heavily for fast retrieval of posts by community, author, and search terms.\n\nThis entity is the cornerstone of user content on the platform. All other entities (votes, comments, searches) reference posts directly or indirectly."},"ICommunitybbsPost.ICreate":{"type":"object","properties":{"communitybbs_community_id":{"type":"string","format":"uuid","description":"Identifier of the community where the post will be created.\n\nThis field selects the target community for the new post. The user must have a valid session but does not need to be a member of the community to create a post. This design enables cross-community contribution and the \"Post in any community\" feature.\n\nThe system validates this ID against the communitybbs_community table to ensure the destination community exists and is active (i.e., has not been deleted). This field is required for all post creation requests."},"title":{"type":"string","minLength":5,"maxLength":120,"description":"Title of the new post, a concise summary of its content.\n\nThis field must be between 5 and 120 characters and serves as the headline of the post. It is displayed in feeds, search results, and post detail views, making it critical for attracting attention and enabling discoverability.\n\nThe system enforces character limits at the API level. Titles shorter than 5 characters or longer than 120 are rejected with an appropriate error message. This ensures UI consistency and prevents technical rendering issues."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Main content of the post, written in plain text.\n\nThis field contains the detailed body of the post, which can be up to 10,000 characters in length. It is restricted to plain text only — no HTML, code snippets, or scripts are permitted for security reasons.\n\nThe system validates the minimum length (10 characters) to ensure submissions have meaningful content. If the content is too short, the system rejects it with a clear message. This prevents spammy or empty posts."},"display_name":{"type":"string","minLength":1,"maxLength":32,"description":"Display name for the post author.\n\nThis optional field allows the user to override their profile display name for this specific post. It is truncated to 32 characters if longer and is stored in the post record at the time of creation for consistency.\n\nEven if the user changes their display name later, this value remains unchanged for historical accuracy. If not provided, the system defaults to 'Anonymous', following the requirement for anonymous posting capability."}},"required":["communitybbs_community_id","title","body"],"description":"Request body for creating a new post in a community.\n\nThis schema defines all fields accepted when a member creates a post within a community. It includes the target community, title, body content, and optional display name.\n\nThe request requires authentication, ensuring that only members can post content. The system does not accept requests from guests, and those attempting to post are redirected to login.\n\nThe submitted content is validated against strict character limits to ensure quality and prevent abuse. The display_name, if provided, is preserved for historical consistency with the user's profile; it does not update dynamically based on changes to the member's profile."},"ICommunitybbsPost.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for pagination, starting from 1.\n\nThis field specifies which page of results to return. If omitted, the default is 1. Page size is fixed at 20 items per page as per business requirements.\n\nThis enables clients to implement a 'Load more' feature by incrementing this number. It supports memory-safe pagination and prevents API endpoints from returning excessive data volumes."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Number of results per page.\n\nThis field defines how many posts to return per page. The maximum allowed value is 100 to prevent excessive database load. If omitted, defaults to 20.\n\nThe limit parameter is constrained to maintain performance and prevent abusive queries that could slow down the entire system."},"sort":{"oneOf":[{"const":"Newest","description":"Sort posts by creation time in descending order (newest first).\n\nThis is the default sort order for community feeds and search results. It follows the natural temporal sequence of post creation, ensuring users see the most recent content first.\n\nPosts with identical timestamps are sorted by their internal ID in descending order to ensure consistent ordering across multiple requests. This sorting aligns with user expectations in dynamic environments."},{"const":"Top","description":"Sort posts by reputation score (upvotes minus downvotes) in descending order.\n\nThis order prioritizes content that has received the most positive engagement from the community. It reflects community consensus on what content is most valuable, interesting, or impactful.\n\nWhen two posts have identical scores, the sort favors the post created more recently, and then by higher internal ID for tie-breaking. This ensures that new, well-received content rises even if it lacks time."}],"description":"Sort order for post results, determining ranking in feeds and search.\n\nThis field controls how posts are ordered in lists such as the Home feed, Community home page, or global search results. Accepted values are 'Newest' (default) and 'Top'.\n\nThe system enforces that only these two values are accepted. The choice of sort order is persisted in the client's local storage so it is remembered on subsequent visits and across pages."}},"required":[],"description":"Request parameters for searching and filtering posts by community.\n\nThis schema defines optional parameters that can be used together to refine results when retrieving posts from a community. It supports pagination and two sorting options: 'Newest' (default) and 'Top'.\n\nThis type enables clients to provide advanced filtering without requiring multiple dedicated endpoints. The parameters are combined to support full UX flexibility such as paging through 'Top' posts while filtering by search term in the service layer.\n\nThe structure increases backend simplicity by allowing all post retrieval requests to use the same unified schema, regardless of whether it's called from a home feed, community page, or search context."},"ICommunitybbsPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the post.\n\nThis field is the primary key in the communitybbs_post table, generated automatically as a UUID upon post creation. It uniquely identifies the post in all API interactions, internal links, and database relationships.\n\nThe post ID is not displayed in URLs or user interfaces where the post title is used for readability. Instead, it is used internally to link the post to its community, author, comments, and votes, maintaining data integrity across all services."},"communitybbs_community_id":{"type":"string","format":"uuid","description":"Identifier of the community where the post was created.\n\nThis field references the parent community in the communitybbs_community table and defines which community's feed will display this post. It ensures posts are grouped under their correct topic area and enables proper user targeting in feeds based on community membership.\n\nWhen a user joins a community, this relationship determines whether posts from that community appear in their home feed. The system verifies this relationship when serving post data to prevent cross-community contamination."},"title":{"type":"string","description":"Title of the post, displayed as the primary heading.\n\nThis is the user-submitted title of the post, which must be between 5 and 120 characters according to business rules. It serves as the headline for the post and is used in feeds, search results, and post detail views.\n\nThe title is truncated if it exceeds 120 characters during submission, and it is indexed for search performance. It is one of the primary fields used in community and global search operations to match user queries."},"display_name":{"type":"string","description":"Display name of the post's author as shown on the post.\n\nThis is the name displayed publicly in the UI instead of the real email-based identifier. It defaults to 'Anonymous' if the user did not provide one during authentication. This field is stored at post creation time so it remains consistent even if the user changes their profile display name later.\n\nThe display name is capped at 32 characters as required by business rules, ensuring uniform display in all UI contexts and preventing layout overflow in narrow containers."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the post was created.\n\nThis immutable field records the exact date and time when the user submitted the post. It is used for sorting posts in 'Newest' order and for chronological context in feeds.\n\nThe format follows ISO 8601 standard (e.g., '2025-09-12T09:14:50.108Z'), consistent with database and API standards. This timestamp determines the sequence of posts in all timeline views and cannot be modified after creation."},"comment_count":{"type":"integer","description":"Total number of comments on this post.\n\nThis field represents the count of active (not deleted) comments associated with the post. It is calculated via aggregate queries on the communitybbs_comment table and provides a quick metric for engagement.\n\nDisplaying this count helps users gauge community interest in the post before opening it to view comments. It is updated in real-time as comments are added or deleted, providing accurate feedback on conversation volume."},"score":{"type":"integer","description":"Net vote score of the post (upvotes minus downvotes).\n\nThis field represents the total reputation or popularity of the post as calculated by subtracting the number of downvotes from the number of upvotes. It is computed dynamically by summing the votes from the communitybbs_vote table.\n\nThe score is used to sort posts in 'Top' order and influences visibility in feeds and search results. It is recalculated on every vote action and serves as the primary metric for determining content prominence in the user experience."}},"required":["id","communitybbs_community_id","title","created_at","comment_count","score"],"description":"Summary representation of a post for list views and feeds.\n\nThis entity is used when displaying posts in paginated lists, such as the Home feed, Community Home page, or search results. It contains only the essential fields required for UI rendering: minimal metadata and engagement metrics, without the full post content or author details.\n\nThe purpose of this summary type is to minimize payload size, improve response times, and reduce bandwidth usage, especially when rendering thousands of posts in a scrollable feed.\n\nThis structure excludes the post body, author ID, and full creation metadata, as those are only needed when viewing the detailed post page. This separation maintains a clear distinction between list views and detail views."},"ICommunitybbsComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment.\n\nThis is the primary key used to uniquely identify this comment in the database. It's generated automatically upon creation and used in API paths (e.g., /comments/{id}) to reference individual comments.\n\nThe ID is a UUID to ensure global uniqueness across all instances of the system."},"communitybbs_post_id":{"type":"string","format":"uuid","description":"Identifier of the post this comment belongs to.\n\nThis foreign key links the comment to its parent post in the communitybbs_post table. Every comment must belong to exactly one post. This relationship ensures comments are contextually associated with the post they are replying to.\n\nWhen a post is deleted, its comments are also removed via cascading deletes in the database, maintaining referential integrity."},"communitybbs_member_id":{"type":"string","format":"uuid","description":"Identifier of the member who authored this comment.\n\nThis foreign key identifies the authenticated user who created the comment in the communitybbs_member table. It is critical for enforcing ownership rules and authorization, ensuring that only the original author can edit or delete a comment.\n\nThe system does not allow guests to post comments; all must be authored by authenticated members."},"communitybbs_comment_id":{"type":"string","format":"uuid","description":"Identifier of the parent comment if this is a reply.\n\nThis optional field enables nested, threaded commenting. If null, this comment is a top-level response to the post. If populated, it references another comment, creating a reply chain.\n\nThe field creates a self-referencing relationship, allowing infinite-depth comment threads while maintaining a clean database structure."},"content":{"type":"string","description":"Text content of the comment, limited to 2,000 characters.\n\nThis is the actual message posted by the user. It must be between 2 and 2,000 characters. Input is validated at submission time to ensure it complies with content requirements.\n\nThe content is plain text only — no HTML, scripts, or markdown is allowed. Truncation or rejection occurs if the limit is exceeded."},"display_name":{"type":"string","description":"Display name of the comment's author as shown on the comment.\n\nThis is the name displayed publicly in the UI in place of the email or user ID. It is captured from the member’s profile at the time of comment creation and stored here directly to ensure consistency even if the user changes their display name later.\n\nThe name is truncated to 32 characters if longer, per business requirements."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created.\n\nThis immutable field records the exact date and time when the comment was submitted. It is used for chronological sorting in comment threads and for determining age of comments in relative time displays (e.g., '5 minutes ago').\n\nThe format follows ISO 8601 (e.g., '2025-09-12T09:14:50.108Z'), consistent with application-wide standards."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this comment was last edited.\n\nThis field is set to the current time whenever a user edits their comment. It is not set during creation — only upon subsequent updates. This allows users to see when a comment was last modified.\n\nThe updated_at field does not affect the comment’s position in threads or its score; it is purely informational."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was soft-deleted.\n\nThis field is null while the comment is active. When set, it indicates the comment was removed by its author or an administrator, but the data is preserved for audit purposes.\n\nSoft deletion is used instead of hard deletion to maintain data integrity for moderation and compliance. Soft-deleted comments are excluded from most user-facing views."}},"required":["id","communitybbs_post_id","communitybbs_member_id","content","created_at"],"description":"Full representation of a single comment in the system.\n\nThis schema defines the complete structure of a comment as it exists in the database and is used when retrieving or returning a specific comment in its full detail. It includes all metadata, such as author identity, thread context, timestamps, and soft deletion state.\n\nThis type is used in detail views like comment pages and API responses when a comment is requested individually or when comment threads are loaded in full. It provides all data needed for UI rendering, moderation tools, and audit trails.\n\nThis schema does not include calculated fields like vote count, which can be derived by querying the communitybbs_vote table in the service layer."},"ICommunitybbsComment.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination, starting from 1.\n\nThis field specifies which page of results to return. If omitted, the default is 1. Page size is fixed at 20 items per page as per business requirements.\n\nUse of page number (rather than cursor) is intentional to simplify client-side navigation and enable direct page-to-page jumps in UIs like 'Load more' buttons."},"limit":{"type":"integer","description":"Number of results per page.\n\nThis field defines how many comments to return per page. The maximum allowed value is 100. If omitted, defaults to 20. This allows clients to request multiple pages with different sizes, although the UI typically uses a fixed 20-item limit.\n\nThe constraint prevents abusive queries that could overload database performance."},"sort":{"oneOf":[{"const":"created_at","description":"Sort order for comment results.\n\nThis specifies the sort direction for comment retrieval. Accepts 'created_at' for ascending (oldest first) or '-created_at' for descending (newest first).\n\nThe system defaults to descending order (newest first) for all comment displays, aligning with user expectation in threaded conversations.\n\nNote: Unlike some entities, comment sorting is limited to time-based only; no 'score' sorting is supported for comments."},{"const":"-created_at","description":"Sort order for comment results.\n\nThis specifies the sort direction for comment retrieval. Accepts 'created_at' for ascending (oldest first) or '-created_at' for descending (newest first).\n\nThe system defaults to descending order (newest first) for all comment displays, aligning with user expectation in threaded conversations.\n\nNote: Unlike some entities, comment sorting is limited to time-based only; no 'score' sorting is supported for comments."}],"description":"Sort order for comment results.\n\nThis specifies the sort direction for comment retrieval. Accepts 'created_at' for ascending (oldest first) or '-created_at' for descending (newest first).\n\nThe system defaults to descending order (newest first) for all comment displays, aligning with user expectation in threaded conversations.\n\nNote: Unlike some entities, comment sorting is limited to time-based only; no 'score' sorting is supported for comments."}},"required":[],"description":"Request parameters for retrieving a paginated and sorted list of comments.\n\nThis structure defines the input accepted when querying for multiple comments, such as on a post detail page or during search. It supports paging and time-based sorting but does not support text search or filter expressions — those are handled by a separate search index endpoint.\n\nThis type allows the client to control pagination and display order while maintaining server-side rate limiting and performance constraints. The limits enforce database safety and consistent user experience."},"ICommunitybbsComment.IUpdate":{"type":"object","properties":{"content":{"type":"string","minLength":2,"maxLength":2000,"description":"New text content for the comment.\n\nThis is the updated body of the comment. It must be between 2 and 2,000 characters. The system validates the length before applying the update.\n\nThis field is required; comments cannot be updated without providing new content. The system will reject updates that are empty or too short. The update overwrites the previous version, ensuring all changes are captured."},"display_name":{"type":"string","minLength":1,"maxLength":32,"description":"Updated display name for the comment author. Optional.\n\nThis optional field allows the author to change the display name shown on the comment. It must not exceed 32 characters. If provided, it updates the display name in this specific comment record. If omitted, the existing value is preserved.\n\nNote: This does not change the user's global display name in their profile — only the version saved with this comment. Updating the display name is allowed for history preservation, even though the underlying member could be changed this way."}},"required":["content"],"description":"Update payload for modifying an existing comment.\n\nThis schema defines the fields that can be updated after a comment has been created. Only the content and optionally the display_name can be modified by the original author. Other fields — such as post ID, parent ID, timestamps, and deletion flags — are immutable state controlled by the system.\n\nThis structure ensures that the only changes allowed to a comment are revisions to its content or the author's display name, consistent with the business requirement: 'users can update only their own content'.\n\nFields that are not included in this schema (e.g., post_id, member_id) cannot be changed through this endpoint, preserving data integrity."},"ICommunitybbsPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":5,"maxLength":120,"description":"New title for the post, updated to reflect changes in content.\n\nThis field allows the post author to revise the headline after creation. The title must still meet the 5-120 character limit. If omitted, the original title is preserved.\n\nThis update is stored as a new version in the post record and triggers an update to the communitybbs_search_post index for search relevance. The system validates length constraints before applying the change."},"body":{"type":"string","minLength":10,"maxLength":10000,"description":"Updated body content for the post.\n\nThis field allows the post author to revise the main content of their post after creation. The body must still meet the 10-10,000 character limit. If omitted, the original body is preserved.\n\nThis update is stored as a new version in the post record and triggers an update to the communitybbs_search_post index for search relevance. The system validates length constraints before applying the change.\n\nThe update does not modify the post's author, community, or creation time. Only the title and body can be modified, preserving the historical context of the original submission."}},"required":[],"description":"Update payload for modifying an existing post.\n\nThis schema defines the fields that can be updated after a post has been created. Only the title and body can be modified by the original author. The author identity, community association, and creation timestamp are immutable.\n\nThis design preserves the historical authenticity of the post while allowing users to correct mistakes, add clarifications, or improve their original message. This reflects the requirement that users can edit their own posts without altering the context or ownership.\n\nNo other fields can be changed, including display_name which remains fixed to the value at the time of creation to maintain narrative consistency over time."},"ICommunitybbsComment.ICreate":{"type":"object","properties":{"communitybbs_post_id":{"type":"string","format":"uuid","description":"Identifier of the post this comment is replying to.\n\nThis field links the comment to its parent post, establishing the context of the conversation. The comment must be associated with exactly one post as per database constraints.\n\nThis is a required field in all comment creation requests. The system validates its existence against the communitybbs_post table to ensure the target post is active (not deleted). The associated community is derived from this post, not specified directly in the request."},"content":{"type":"string","minLength":2,"maxLength":2000,"description":"Text content of the comment, written as a reply to the post.\n\nThis field contains the actual message posted by the user. It must be between 2 and 2,000 characters in length. Input is validated at submission time to ensure it complies with the requirements.\n\nThe content is plain text only — no HTML, scripts, or markdown is allowed. Truncation or rejection occurs if the limit is exceeded. This design prevents malicious code injection and ensures consistent rendering across all devices."},"display_name":{"type":"string","minLength":1,"maxLength":32,"description":"Display name for the comment author, overriding the profile name if provided.\n\nThis optional field allows the user to specify a different display name for this instance. It is truncated to 32 characters if longer and stored directly with the comment for consistency even if the member's profile name changes later.\n\nIf omitted, the system uses the member's current display name from their profile at the time of submission. This design ensures continuity in public appearances, preserving context for threaded discussions."}},"required":["communitybbs_post_id","content"],"description":"Request body for creating a new comment on a post.\n\nThis schema defines all fields accepted when a member creates a comment in response to a post. It includes the target post, content, and optional display name.\n\nThe request requires authentication, ensuring that only members can post comments. The system does not accept requests from guests, and those attempting to comment are redirected to login.\n\nThe submitted content is validated against strict character limits to ensure quality and prevent abuse. The display_name, if provided, is preserved for historical consistency with the comment context; it does not update dynamically based on changes to the member's profile."},"ICommunitybbsVote.ICreate":{"type":"object","properties":{"type":{"oneOf":[{"const":"upvote","description":"The type of vote being cast: either 'upvote' or 'downvote'.\n\nThis field specifies whether the user is expressing positive ('upvote') or negative ('downvote') feedback on the target content. The system accepts only these two values to maintain data integrity and avoid ambiguity.\n\nThe vote type determines whether the post or comment's score is incremented or decremented. All vote actions are logged with this value for audit trail and anti-manipulation analysis."},{"const":"downvote","description":"The type of vote being cast: either 'upvote' or 'downvote'.\n\nThis field specifies whether the user is expressing positive ('upvote') or negative ('downvote') feedback on the target content. The system accepts only these two values to maintain data integrity and avoid ambiguity.\n\nThe vote type determines whether the post or comment's score is incremented or decremented. All vote actions are logged with this value for audit trail and anti-manipulation analysis."}],"description":"The type of vote being cast: either 'upvote' or 'downvote'.\n\nThis field specifies whether the user is expressing positive ('upvote') or negative ('downvote') feedback on the target content. The system accepts only these two values to maintain data integrity and avoid ambiguity.\n\nThe vote type determines whether the post or comment's score is incremented or decremented. All vote actions are logged with this value for audit trail and anti-manipulation analysis."}},"required":["type"],"description":"Request payload for casting a new vote on a post or comment.\n\nThis schema defines the only required information for recording a vote: the type of vote ('upvote' or 'downvote'). The target (post or comment) is specified through the URL path, not in the body.\n\nThis design enforces the single responsibility of a vote action — to change the vote sentiment — while external parameters (which post/comment) are handled by route structure. This separation improves API clarity and reduces potential for client misconfiguration.\n\nThe system enforces that each user can vote only once on a given item, and that they cannot vote on their own content. Duplicate votes are treated as vote removals (toggle behavior), in accordance with product requirements."},"ICommunitybbsVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier assigned to this vote record.\n\nThis UUID is automatically generated by the database upon insertion and serves as the primary key for the communitybbs_vote table.\n\nIt is used for internal reference and audit log correlation but is not exposed to external clients for direct manipulation.\n\nThis field appears in response bodies to confirm vote creation or update."},"actor_id":{"type":"string","format":"uuid","description":"The unique identifier of the actor (member, administrator, or guest) who cast the vote.\n\nThis references either communitybbs_member.id, communitybbs_administrator.id, or communitybbs_guest.id.\n\nIt ensures accountability and prevents anonymous voting by linking the vote to a specific entity.\n\nThis field is set automatically at insert time from the authenticated session and is not included in request bodies."},"post_id":{"type":"string","format":"uuid","description":"The unique identifier of the post that this vote applies to.\n\nThis is null if the vote is on a comment. Exactly one of post_id or comment_id must be non-null.\n\nThis field links the vote to the post record in the communitybbs_post table, allowing calculation of total post scores.\n\nThe system ensures referential integrity through a foreign key constraint."},"comment_id":{"type":"string","format":"uuid","description":"The unique identifier of the comment that this vote applies to.\n\nThis is null if the vote is on a post. Exactly one of post_id or comment_id must be non-null.\n\nThis field links the vote to the comment record in the communitybbs_comment table, enabling comment-specific scoring.\n\nReferential integrity is preserved via database foreign key."},"type":{"oneOf":[{"const":"upvote","description":"The type of the vote: either 'upvote' or 'downvote'.\n\nThis determines how the vote is counted in the score calculation:\n- 'upvote' adds +1 to the target's score.\n- 'downvote' adds -1 to the target's score.\n\nThis field is immutable after creation and cannot be modified.\n\nThe value is validated at insert time and only accepts predefined enum values."},{"const":"downvote","description":"The type of the vote: either 'upvote' or 'downvote'.\n\nThis determines how the vote is counted in the score calculation:\n- 'upvote' adds +1 to the target's score.\n- 'downvote' adds -1 to the target's score.\n\nThis field is immutable after creation and cannot be modified.\n\nThe value is validated at insert time and only accepts predefined enum values."}],"description":"The type of the vote: either 'upvote' or 'downvote'.\n\nThis determines how the vote is counted in the score calculation:\n- 'upvote' adds +1 to the target's score.\n- 'downvote' adds -1 to the target's score.\n\nThis field is immutable after creation and cannot be modified.\n\nThe value is validated at insert time and only accepts predefined enum values."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when this vote was created and recorded in the database.\n\nThis is set automatically by the system upon vote casting and never modified afterward.\n\nIt is used to determine the chronological context of votes and for audit trail purposes.\n\nThe value follows ISO 8601 format with full timezone precision."}},"required":["id","actor_id","type","created_at"],"description":"Response body representing a single vote record from the database.\n\nThis type encapsulates the full data stored in the communitybbs_vote table, including references to the voting actor, the voted item (post or comment), vote type, and creation timestamp.\n\nIt is returned in responses to vote creation or retrieval (e.g., after validating a vote). It is not used in request bodies — the ICommunitybbsVote.ICreate type is used for creating votes.\n\nThe response does not include the current score of the target item; scores are computed dynamically during item retrieval by summing all votes.\n\nThe post_id and comment_id are mutually exclusive: only one will be non-null for each vote, ensuring data consistency.\n\nThis schema ensures transparency and auditability of community interactions while maintaining privacy of actor identity in public-facing displays."},"ICommunitybbsVote.IUpdate":{"type":"object","properties":{"type":{"oneOf":[{"const":"upvote","description":"The new type of vote being cast: either 'upvote' or 'downvote'.\n\nThis field is used to update an existing vote to a different sentiment. If the existing vote was 'upvote', setting this to 'downvote' changes the vote type. Setting it to the same value removes the vote entirely (reverts to no vote).\n\nThe system accepts only 'upvote' or 'downvote' to ensure consistency. A value of 'none' is not permitted because all votes are required to have a defined sentiment, even if it's the removal of the previous vote."},{"const":"downvote","description":"The new type of vote being cast: either 'upvote' or 'downvote'.\n\nThis field is used to update an existing vote to a different sentiment. If the existing vote was 'upvote', setting this to 'downvote' changes the vote type. Setting it to the same value removes the vote entirely (reverts to no vote).\n\nThe system accepts only 'upvote' or 'downvote' to ensure consistency. A value of 'none' is not permitted because all votes are required to have a defined sentiment, even if it's the removal of the previous vote."}],"description":"The new type of vote being cast: either 'upvote' or 'downvote'.\n\nThis field is used to update an existing vote to a different sentiment. If the existing vote was 'upvote', setting this to 'downvote' changes the vote type. Setting it to the same value removes the vote entirely (reverts to no vote).\n\nThe system accepts only 'upvote' or 'downvote' to ensure consistency. A value of 'none' is not permitted because all votes are required to have a defined sentiment, even if it's the removal of the previous vote."}},"required":["type"],"description":"Update payment for changing an existing vote on a post or comment.\n\nThis schema defines the required change for modifying a previously cast vote. Only the vote type (upvote/downvote) can be changed, and no other fields are permitted.\n\nThis request is used when a user changes their mind about a vote — for example, switching from 'upvote' to 'downvote' or removing their vote by sending the same type they previously cast. This supports the 'toggle' behavior specified in the requirements.\n\nBy allowing only the type parameter, the system minimizes potential for malicious input and ensures that vote modification cannot interfere with the target reference or actor identity, which are determined by authentication context."},"ICommunitybbsSearch.IRequest":{"type":"object","properties":{"type":{"oneOf":[{"const":"posts","description":"The type of content to search across: posts, communities, or comments.\n\nThis field defines which index will be queried. It must be one of 'posts' (searches post titles and bodies), 'communities' (searches community names and descriptions), or 'comments' (searches comment content).\n\nThis design allows a single API endpoint to handle all search types with consistent parameters, reducing complexity on the server side and ensuring uniform search behavior across the platform."},{"const":"communities","description":"The type of content to search across: posts, communities, or comments.\n\nThis field defines which index will be queried. It must be one of 'posts' (searches post titles and bodies), 'communities' (searches community names and descriptions), or 'comments' (searches comment content).\n\nThis design allows a single API endpoint to handle all search types with consistent parameters, reducing complexity on the server side and ensuring uniform search behavior across the platform."},{"const":"comments","description":"The type of content to search across: posts, communities, or comments.\n\nThis field defines which index will be queried. It must be one of 'posts' (searches post titles and bodies), 'communities' (searches community names and descriptions), or 'comments' (searches comment content).\n\nThis design allows a single API endpoint to handle all search types with consistent parameters, reducing complexity on the server side and ensuring uniform search behavior across the platform."}],"description":"The type of content to search across: posts, communities, or comments.\n\nThis field defines which index will be queried. It must be one of 'posts' (searches post titles and bodies), 'communities' (searches community names and descriptions), or 'comments' (searches comment content).\n\nThis design allows a single API endpoint to handle all search types with consistent parameters, reducing complexity on the server side and ensuring uniform search behavior across the platform."},"query":{"type":"string","minLength":2,"description":"The search query string to match against content.\n\nThis field contains the full-text search term entered by the user. It must be at least 2 characters long to prevent noise in search results and to improve performance on large datasets.\n\nThe search matches substrings in the relevant fields: title/body for posts, name/description for communities, and content for comments. Every character in the query is used for matching, supporting partial word matching and typos."},"sort":{"oneOf":[{"const":"Newest","description":"Sort results by creation date in descending order (newest first).\n\nThis is the default sort for searches on posts and comments. It displays the most recently created content first, which is most relevant for discovery of current activity."},{"const":"Top","description":"Sort results by score (upvotes minus downvotes) in descending order.\n\nThis is the default sort for post searches. It prioritizes content with the highest community engagement, regardless of creation time.\n\nFor posts, this sorts by the net vote count. For comments, 'Top' is not supported - only 'Newest' is available, as comments do not have a primary score."},{"const":"Name Match","description":"Sort communities by similarity to the search query string.\n\nThis is the default sort for community searches. It uses textual matching algorithms to determine relevance of community names to the search query."},{"const":"Recently Created","description":"Sort communities by creation date in descending order (newest first).\n\nThis alternative sort for communities allows users to find new communities as they are created, regardless of how popular they are. This is helpful for early adopters and niche topic explorers."}],"description":"Sorting criteria for search results, varying by content type.\n\nThis field defines how search results are ordered. The available options depend on the 'type' parameter:\n- For 'posts': 'Newest' or 'Top'\n- For 'communities': 'Name Match' or 'Recently Created'\n- For 'comments': 'Newest' only\n\nThe system defaults to 'Newest' for posts and comments, and 'Name Match' for communities to align with user expectations and business requirements.\n\nOnly one sort option can be specified per request, ensuring deterministic and predictable result ordering."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for pagination, starting from 1.\n\nThis field specifies which page of results to return. If omitted, defaults to 1. Page size is fixed at 20 results per page as per business requirements.\n\nThis enables clients to implement a 'Load more' feature by incrementing this number. The pagination is cursor-based for consistency with embedded UI controls."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Number of search results per page.\n\nThis field defines how many results to return per page. The maximum allowed value is 100 to prevent excessive database load. If omitted, defaults to 20.\n\nThe limit parameter is constrained to ensure search performance remains optimal, even when many users are querying simultaneously. This soft cap prevents resource exhaustion and user experience degradation."}},"required":["type","query"],"description":"Request parameters for performing a global search across the platform.\n\nThis schema defines the structure for complex, multi-content searches in the Community BBS platform. It combines content type selection, full-text query, sorting preference, and pagination controls in a unified request body.\n\nThis design replaces three separate search endpoints with one flexible endpoint that adapts behavior based on the 'type' field. This reduces API surface complexity and ensures consistent behavior across all search use cases.\n\nThe system validates that the query is at least 2 characters and that the sort option is valid for the selected type. All search operations are performed against indexed tables (communitybbs_search_post, communitybbs_search_community, communitybbs_search_comment) to ensure high-performance response times."},"ICommunitybbsCommunity.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the community.\n\nThis field is the primary key in the communitybbs_community table, automatically generated as a UUID during community creation. It uniquely identifies the community for all API interactions, internal references, and data relationships.\n\nThe ID is used internally to link the community to its posts, comments, and votes, and to maintain referential integrity across the database. It is not used in URLs or user-facing interfaces, where the name field is preferred for readability."},"name":{"type":"string","description":"The unique identifier for the community used in URLs (e.g., /c/ai).\n\nThis field represents the community's human-readable name that appears in web addresses and search results. It must be unique across all communities, contain only alphanumeric characters, hyphens, or underscores, and be between 3 and 32 characters.\n\nThe name serves as the community's public identifier and is used in all social sharing, search engine indexing, and direct navigation. It was created when the community was initialized and is immutable after creation."},"description":{"type":"string","description":"Brief description of the community's topic and purpose.\n\nThis field contains a short summary (up to 500 characters) explaining the focus of the community. It appears in community list views and search results to help users understand whether the community matches their interests.\n\nThe description is optional, and when blank, the system displays a default message. It is displayed in the community info card on both the Explore page and the community's main landing page."},"category":{"oneOf":[{"const":"Tech & Programming","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"Science","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"Movies & TV","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"Games","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"Sports","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"Lifestyle & Wellness","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"Study & Education","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"Art & Design","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"Business & Finance","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"News & Current Affairs","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},{"const":"General","description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."}],"description":"The topic category assigned to the community from a predefined list.\n\nThis field categorizes the community into one of the system's predefined topics for structured discovery and filtering. These categories are maintained by platform administrators and selected during community creation.\n\nThe category determines the community's placement in the Explore page and search results. It helps users find related communities and ensures content is appropriately grouped for new users discovering the platform."},"member_count":{"type":"integer","description":"Total number of users who have joined this community.\n\nThis field reflects the current membership count of the community, calculated by the system based on active relationships between communitybbs_member and communitybbs_community.\n\nIt is stored as a denormalized field for performance since it's frequently accessed in list views and sorting. The count is incremented when users join and decremented when they leave, being kept in sync by application logic rather than database queries."},"last_active_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent activity within this community.\n\nThis field tracks the time of the most recent event in the community, including: post creation, comment posting, voting, or user joining. It is updated immediately after each such event.\n\nThis field is crucial for sorting communities in the 'Recent Communities' sidebar, ensuring active communities rise to the top. Its value is manually updated by the application in response to member actions, with no reliance on automated system processes."}},"required":["id","name","category","member_count","last_active_at"],"description":"Summary representation of a community for discovery and listing views.\n\nThis schema defines the minimal set of fields required to display a community in lists such as the Explore page, search results, or Recent Communities sidebar. It includes only essential metadata for user decision-making: the name, category, member count, and activity timestamp.\n\nBy excluding detailed information like description, rules, logo, banner, and creation date, this summary reduces network payload size and improves rendering performance when displaying large lists of communities.\n\nThis type should never be used in detail views of individual communities (such as /c/[name]) where the full ICommunitybbsCommunity schema is appropriate. This separation maintains clear boundaries between list and detail UI components, optimizing user experience and system efficiency."},"ICommunitybbsMember.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address of the member, used as login identifier. Must match an existing record in communitybbs_member.email.\n\nThis field is required for authenticating existing users. The system performs case-insensitive matching against the unique email index in the database. The email must be valid and correspond to an existing member account."},"password":{"type":"string","minLength":8,"description":"Plain-text password provided by user. Verified against stored password_hash in communitybbs_member using BCrypt algorithm.\n\nThe system compares this value with the stored password_hash using BCrypt hashing. This field is required for all login attempts and must match the encrypted value stored in the database. Passwords are never stored or transmitted in plaintext."}},"required":["email","password"],"description":"Request body for member login containing email and password for authentication.\n\nThis schema defines the data structure for authenticating an existing member through the login endpoint. It captures the minimal credentials required for session establishment: email and password. The system validates these against the communitybbs_member table and issues a new session upon successful verification."},"ICommunitybbsMember.IRefresh":{"type":"object","properties":{},"required":[],"description":"Request body for token refresh operation with refresh token in header.\n\nThis schema defines an empty request body since token refresh is performed using the Authorization header. The refresh token must be presented in the header as a Bearer token. This empty object structure indicates no request body is needed - the operation relies entirely on the token provided in the HTTP header."},"ICommunitybbsComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment.\n\nThis field is the primary key in the communitybbs_comment table, generated automatically as a UUID upon comment creation. It uniquely identifies the comment in all API interactions and database relationships.\n\nThe comment ID is used internally to link comments to their parent post and to their replies. It is not displayed in URLs or interfaces where teaser text and timestamps provide sufficient context."},"communitybbs_post_id":{"type":"string","format":"uuid","description":"Identifier of the post this comment belongs to.\n\nThis foreign key identifies the parent post that the comment is replying to. It ensures comments are always associated with a valid post and prevents orphaned comments in the system.\n\nThis relationship is used to locate all comments within a specific post, enabling the display of threaded conversations. A comment cannot exist without this post association, as enforced by database foreign key constraints."},"content":{"type":"string","description":"Content snippet of the comment, truncated to two lines for list display.\n\nThis field presents a condensed version of the comment text, limited to approximately two lines of display to fit neatly in lists and search results. If the full content exceeds this limit, an ellipsis (...) is appended.\n\nBy using a truncated version, this summary avoids overwhelming the UI with long comment content while still providing enough context for users to determine relevance in browsing scenarios."},"display_name":{"type":"string","description":"Display name of the comment's author as shown in list views.\n\nThis is the name that appears next to the comment in feeds, search results, and community pages. It is captured from the author's profile at the time of comment creation and stored here for consistency.\n\nThe name is limited to 32 characters to ensure consistent display width across all UI components. If the author's profile name was longer, it is truncated during comment creation to maintain this standard."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created.\n\nThis field records the exact date and time when the comment was submitted. It is used for chronological sorting in comment threads and for displaying relative time since posting (e.g., '5 minutes ago').\n\nThe format follows ISO 8601 standard (e.g., \"2025-09-12T09:14:50.108Z\"), consistent with the application's global time handling. This timestamp is immutable and helps anchor the comment's history."},"parent_id":{"type":"string","format":"uuid","description":"Unique identifier of the parent comment, if this is a reply.\n\nThis field indicates that this comment is a reply to another comment, rather than a top-level comment on the post. If null, this comment responds directly to the post. If populated, it references the parent comment's ID.\n\nThis enables nested, threaded discussions. In replies, users can contextually respond to specific parts of a conversation while keeping the thread organized. This field significantly enhances user experience by facilitating detailed, structured dialogue."}},"required":["id","communitybbs_post_id","content","created_at"],"description":"Summary representation of a comment for display in lists and search results.\n\nThis entity is used when displaying comments in paginated lists such as global search results or in compact UI components. It contains only the essential fields required for user decision-making: minimal metadata, shortened content, and context indicators.\n\nBy omitting full-length content, author ID, and edit timestamp, this summary reduces network payload size and improves rendering performance when displaying hundreds of comments in search results or trending modules.\n\nIn detail views (individual comment pages), the full ICommunitybbsComment schema is used instead. This separation ensures optimal performance across different interfaces with consistent information hierarchy."},"IPageICommunitybbsComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ICommunitybbsComment.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key.\n\nUnique identifier for the comment.\n\nThis field is auto-generated and immutable after creation."},"content":{"type":"string","description":"Text content of the comment. Must be between 2 and 2,000 characters according to business requirements. Truncated if longer.\n\nThe textual content of the comment. Shown in summaries as a short excerpt in search and list views."},"display_name":{"type":"string","description":"Display name of the author as shown on the comment. If not provided by user, defaults to 'Anonymous'. Truncated to 32 characters if longer. Not a reference to member profile - stored here for consistency even if member changes display name.\n\nThe display name used to attribute the comment. This is captured at creation time and does not change even if the member updates their profile."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created. Always set at time of creation and never modified.\n\nThe time this comment was submitted to the system. Used for sorting and time-based filtering."},"post_title":{"type":"string","description":"Title of the parent post.\n\nThe title of the post this comment belongs to. Included for context in search results and comment lists."},"community_name":{"type":"string","description":"Name of the community containing the post.\n\nThe name of the community that contains the parent post. Included for context in search results and comment lists."}},"required":["id","content","display_name","created_at","post_title","community_name"],"description":"Simplified representation of a comment for list views and search results.\n\nThis type is used in paginated responses IPageICommunitybbsComment for global search results under the Comments tab. It includes only essential fields for display in short snippets and avoids exposing parent-child relationships or detailed metadata.\n\nFields including parent_comment_id, updated_at, and deleted_at are intentionally omitted as they are not needed in summary contexts.\n\nThis type is consumed by IPageICommunitybbsComment to form the data array."},"IVote.IUpdate":{"type":"object","properties":{"type":{"oneOf":[{"const":"upvote","description":"The type of vote: 'upvote' or 'downvote'.\n\nSpecifies whether the user is casting an upvote (+1) or downvote (-1). The system treats these as mutually exclusive alternatives. If the user has already voted on this item, this request will update their vote (toggle), not create a duplicate."},{"const":"downvote","description":"The type of vote: 'upvote' or 'downvote'.\n\nSpecifies whether the user is casting an upvote (+1) or downvote (-1). The system treats these as mutually exclusive alternatives. If the user has already voted on this item, this request will update their vote (toggle), not create a duplicate."}],"description":"The type of vote: 'upvote' or 'downvote'.\n\nSpecifies whether the user is casting an upvote (+1) or downvote (-1). The system treats these as mutually exclusive alternatives. If the user has already voted on this item, this request will update their vote (toggle), not create a duplicate."}},"required":["type"],"description":"Request body for updating an existing vote on a post or comment. Represents the payload when a user changes their existing vote.\n\nThis type is used in PATCH /votes and PATCH /communities/{communityId}/posts/{postId}/votes endpoints. The request contains only the new vote type. The target (post_id or comment_id) is identified from the existing vote record using the authenticated user's session.\n\nThe vote must previously exist. If no previous vote is found, the request is rejected with a 404 error.\n\nThis is a modified version of IVote.ICreate - only the type field is required, as the target is known from context.\n\nAuthorization Rule: Only the original voter (or an administrator) can update a vote."},"IComment.IRequest":{"type":"object","properties":{"sortBy":{"oneOf":[{"const":"newest","description":"Sort order for comments.\n\n'Determines whether comments should be sorted by creation time in ascending or descending order. 'newest' sorts by most recent first, 'oldest' sorts by earliest first.'"},{"const":"oldest","description":"Sort order for comments.\n\n'Determines whether comments should be sorted by creation time in ascending or descending order. 'newest' sorts by most recent first, 'oldest' sorts by earliest first.'"}],"description":"Sort order for comments.\n\n'Determines whether comments should be sorted by creation time in ascending or descending order. 'newest' sorts by most recent first, 'oldest' sorts by earliest first.'"},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Number of comments to return per page.\n\nLimits the number of comments returned in a single response. Must be between 1 and 100. Default is 20 as specified in requirements."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for pagination.\n\nThe page number to retrieve, where each page contains up to 'limit' comments. 1-indexed."},"parentCommentId":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the parent comment for filtering nested replies.\n\nIf provided, only comments replying directly to this parent comment are returned. Used for hierarchical display of comment threads."},{"type":"null"}],"description":"Reference to the parent comment for filtering nested replies.\n\nIf provided, only comments replying directly to this parent comment are returned. Used for hierarchical display of comment threads."}},"required":[],"description":"Request parameters for listing comments on a post.\n\nUsed in the PATCH /communities/{communityId}/posts/{postId}/comments endpoint to filter, sort, and paginate comment results.\n\nThe parentCommentId field allows filtering of nested comments. All other fields are for pagination and sorting.\n\nThis type is designed to be IPage.IRequest compatible for consistent pagination."},"ICommunitybbsMember.IRequest":{"type":"object","properties":{"search":{"type":"string","minLength":2,"description":"Keyword for full-text search across member email or display_name.\n\nA search term used to find members by email address or display name. Must be at least 2 characters."},"sortBy":{"oneOf":[{"const":"email","description":"Field to sort members by.\n\nSorts the result list by email, display_name, or account creation date. Default is email."},{"const":"display_name","description":"Field to sort members by.\n\nSorts the result list by email, display_name, or account creation date. Default is email."},{"const":"created_at","description":"Field to sort members by.\n\nSorts the result list by email, display_name, or account creation date. Default is email."}],"description":"Field to sort members by.\n\nSorts the result list by email, display_name, or account creation date. Default is email."},"sortOrder":{"oneOf":[{"const":"asc","description":"Sort direction.\n\nEither 'asc' for ascending or 'desc' for descending order."},{"const":"desc","description":"Sort direction.\n\nEither 'asc' for ascending or 'desc' for descending order."}],"description":"Sort direction.\n\nEither 'asc' for ascending or 'desc' for descending order."},"limit":{"type":"integer","minimum":1,"maximum":50,"default":20,"description":"Number of members to return per page.\n\nLimits the number of members returned in a single response. Maximum is 50 for performance. Default is 20."},"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for pagination.\n\nThe page number to retrieve, where each page contains up to 'limit' members. 1-indexed."}},"required":[],"description":"Request parameters for listing members in administrative views.\n\nUsed in the GET /admin/members endpoint to filter, sort, and paginate the list of members for administrative review.\n\nThis type is designed to be IPage.IRequest compatible for consistent pagination."},"IPage.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"default":1,"description":"Page number for pagination, 1-indexed.\n\nThis optional field allows clients to request a specific page of results.\n\nIf omitted, the server defaults to page 1.\n\nMust be an integer with a minimum value of 1.\n\nRelevant to the 'Standard Type Definitions' section of the requirements."},"limit":{"type":"integer","minimum":1,"maximum":100,"default":20,"description":"Limitation of records per page.\n\nThis optional field allows clients to specify how many records to return per page.\n\nMust be between 1 and 100 (inclusive).\n\nDefault is 20 to match the business requirement.\n\nIf set, it overrides the server default.\n\nRelevant to the 'Standard Type Definitions' section of the requirements."}},"required":[],"description":"Page request data parameters for pagination.\n\nThis schema defines the optional parameters that can be passed to control pagination in list operations.\n\nIt is used in GET and PATCH endpoints that return paginated data.\n\nBoth page and limit are optional with defaults provided by the server.\n\nThis allows for simpler client requests while still supporting advanced pagination.\n\nThe field descriptions reference the standard IPage interface definitions in the requirements for consistency.\n\nThe parameters map directly to the pagination controls in the UI and align with the business requirement of 20 records per page."},"ECommunityCategory":{"oneOf":[{"const":"Tech & Programming","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"Science","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"Movies & TV","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"Games","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"Sports","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"Lifestyle & Wellness","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"Study & Education","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"Art & Design","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"Business & Finance","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"News & Current Affairs","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},{"const":"General","description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."}],"description":"Enumeration of allowed community categories.\n\nThese predefined values represent the only allowed categories for new communities and are used for filtering and sorting in the Explore page and search results.\n\nMust be one of these exact strings. Case-sensitive matching is not enforced; the system normalizes to these canonical forms."},"EVoteType":{"oneOf":[{"const":"upvote","description":"Enumeration of allowed vote types.\n\nRepresents the two possible values for user votes on posts and comments.\n\nMust be one of these exact strings. The system treats 'upvote' and 'downvote' as mutually exclusive alternatives."},{"const":"downvote","description":"Enumeration of allowed vote types.\n\nRepresents the two possible values for user votes on posts and comments.\n\nMust be one of these exact strings. The system treats 'upvote' and 'downvote' as mutually exclusive alternatives."}],"description":"Enumeration of allowed vote types.\n\nRepresents the two possible values for user votes on posts and comments.\n\nMust be one of these exact strings. The system treats 'upvote' and 'downvote' as mutually exclusive alternatives."},"ICommunitybbsAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated administrator.\n\nThis field references the primary key of the administrator record in the communitybbs_administrator table. It uniquely identifies the administrator across all administrative functions and audit logs.\n\nThis identifier ensures proper attribution of administrative actions like community deletion or member banning, enabling a complete audit trail while preserving privacy by not exposing sensitive personal information like email."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response containing JWT token for authenticated administrators.\n\nThis response is returned after successful login or registration of an administrator account. It contains only the essential information needed for secure administrative session management: the administrator's unique ID and a valid authentication token.\n\nThis type deliberately omits sensitive information such as email and password_hash to prevent credential leakage. Only the ID is exposed for client-side identification with all other administrative context being retrieved via protected administrative endpoints.\n\nThis minimal design enhances security by following the principle of least privilege while maintaining the operational capability for administrators to perform their duties without exposing system secrets."},"ICommunitybbsAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address used for administrative login and authentication.\n\nThis field serves as the primary identifier for administrative accounts in the communitybbs_administrator table. It must be valid, unique, and established through secure, manual provisioning.\n\nAdmin emails are never public and are used exclusively for authentication purposes. Unlike member accounts, administrative accounts are not self-registered but created manually by superusers or through secure provisioning workflows."},"display_name":{"type":"string","minLength":1,"maxLength":32,"description":"Display name for identifying administrators in moderation logs and UI.\n\nThis is the name that appears in admin logs, moderation actions, and administrative UI panels. It helps identify which administrator performed an action such as banning a user or deleting a community.\n\nThis display name is not shown to regular members and does not affect any user-facing interfaces. It is purely for internal administrative purposes and audit trail clarity.\n\nThe display name is limited to 32 characters to maintain consistency with other UI elements and prevent excessive log clutter."}},"required":["email","display_name"],"description":"Request body for creating a new administrative account.\n\nThis schema defines the fields accepted for creation of a system-level administrative account. It includes the email address of the administrator and a display name for internal identification purposes.\n\nNo password is accepted in this request because administrative accounts are created through secure, out-of-band channels with manually generated passwords. The actual password is set by privileged personnel via secure offline mechanisms and stored as an encrypted bcrypt hash in the database.\n\nThis design ensures that administrative credentials are never transmitted over the network and are established through secure, controlled processes to prevent unauthorized account creation."}}}}