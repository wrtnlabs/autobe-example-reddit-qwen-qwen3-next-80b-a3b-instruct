{"files":[{"filename":"schema-01-systematic.prisma","namespace":"Systematic","models":[{"name":"communitybbs_category","description":"Static lookup table defining business categories for communities. Used by other domains to classify communities into predefined topics for discovery and filtering. Not directly managed by regular users but maintained by system administrators. Each category is an immutable classification used for community grouping.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"The human-readable name of the category. Examples: \"Tech & Programming\", \"Science\", \"Games\". Must be unique and from the predefined list.","nullable":false},{"name":"description","type":"string","description":"A brief description explaining the scope of this category. Used in UI to provide context to users browsing communities.","nullable":true}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[],"ginIndexes":[]},{"name":"communitybbs_configuration","description":"Global system configuration settings for the Community BBS platform. Contains key-value pairs that control platform behavior, feature flags, and default parameters. Managed exclusively by administrators through system interface. Values are applied system-wide and affect all users. Example: disallow_new_community_creation, default_sort_order, search_result_limit.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"key","type":"string","description":"Unique configuration key identifier. Used programatically to locate settings. Examples: \"default_sort_order\", \"max_community_name_length\", \"enable_search\".","nullable":false},{"name":"value","type":"string","description":"The string value of the configuration setting. Can be boolean (\"true\"/\"false\"), integer (\"10\"), string (\"Newest\"), or JSON object (\"{\\\"enabled\\\":true}\").","nullable":false},{"name":"description","type":"string","description":"Human-readable description of what this configuration controls and its expected values. Used by administrators during management.","nullable":true}],"uniqueIndexes":[{"fieldNames":["key"],"unique":true}],"plainIndexes":[],"ginIndexes":[]}]},{"filename":"schema-02-actors.prisma","namespace":"Actors","models":[{"name":"communitybbs_guest","description":"Represents an unauthenticated user session. Each guest has a unique IP address and is tracked for anonymous interactions such as reading posts and comments. This entity is critical for identifying unauthenticated behavior and ensuring fair rate limiting. The system does not require authentication for guest access, so no credentials are stored. This model exists as a primary entity to accurately track anonymous usage patterns in user analytics and system monitoring.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"ip_address","type":"string","description":"The public IP address of the guest user. Used for rate limiting, abuse detection, and analytics. Not human-readable identifier.","nullable":false},{"name":"display_name","type":"string","description":"Default display name for unauthenticated users. May be null. When no display name is provided, system defaults to \"Anonymous\".","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when this guest session was first recorded.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this guest's IP address or display name was last updated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["ip_address"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]}],"ginIndexes":[{"fieldName":"display_name"}]},{"name":"communitybbs_member","description":"Represents an authenticated regular user who can create, edit, and vote on content. Members have login credentials and active sessions. They can join communities, post, comment, and vote. This is a primary entity with core identity and authorization state. It references a session for persistent authentication and is linked to all user-generated content through foreign keys in other tables. This model is essential for enforcing ownership and access control rules as defined in the requirements.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","description":"Unique email address used as the primary login identifier. Must be a valid email format and unique across all users.","nullable":false},{"name":"password_hash","type":"string","description":"BCrypt-hashed password for authentication. Never stored in plain text. Required for login functionality.","nullable":false},{"name":"display_name","type":"string","description":"User's chosen display name used in UI for comments and posts. Defaults to username if not set. Max 32 characters as per requirements.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this member account was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this member's profile was last modified (e.g., display name change).","nullable":false}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]}],"ginIndexes":[{"fieldName":"display_name"}]},{"name":"communitybbs_administrator","description":"Represents a system administrator with elevated privileges including content moderation, community management, and user bans. This role has direct access to administrative functions and overrides member permissions. Administrators are manually assigned and require explicit authentication. This entity is primary because administrators must be independently identifiable, auditable, and manageable through API endpoints for system maintenance, not derived from member roles.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"session_id","type":"uuid","description":"References the active session for this administrator. {@link communitybbs_session.id}.","relation":{"name":"session","targetModel":"communitybbs_session"},"unique":true,"nullable":false}],"plainFields":[{"name":"email","type":"string","description":"Unique email address used as the primary login identifier. Must be a valid email format and unique across all users.","nullable":false},{"name":"password_hash","type":"string","description":"BCrypt-hashed password for authentication. Never stored in plain text. Required for login functionality.","nullable":false},{"name":"display_name","type":"string","description":"Admin's display name used in moderation logs and UI. For clarity in audit trails.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this administrator account was created.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this administrator's profile was last modified.","nullable":false}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]},{"fieldNames":["session_id"]}],"ginIndexes":[{"fieldName":"display_name"}]}]},{"filename":"schema-03-communities.prisma","namespace":"Communities","models":[{"name":"communitybbs_community","description":"Core entity representing a sub-community on the platform. This model stores all metadata about a community including its name, description, category, visual assets, rules, and activity tracking. Communities are independent entities that users can create, join, search, and explore. The name field is unique and serves as the community's identifier in URLs (e.g., /c/communityname). This table follows strict 3NF: all fields are atomic and depend solely on the primary key. No denormalization occurs here, as required by the requirements which specify direct storage of category, rules, and timestamps. Rules are stored as an array of strings as explicitly required by the business requirements.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","description":"The unique, lowercase identifier for the community used in URLs (e.g. /c/ai). Must be between 3 and 32 characters and contain only alphanumeric characters, hyphens (-), or underscores (_). This field is used for global search and direct access. The uniqueness of this field is enforced by a unique index.","nullable":false},{"name":"description","type":"string","description":"A brief description of the community's purpose, up to 500 characters. Used for discovery and the community info panel. May be empty but cannot be longer than 500 characters.","nullable":true},{"name":"category","type":"string","description":"The topic category assigned to the community. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]. Used for filtering communities in the Explore page and search results.","nullable":false},{"name":"logo","type":"uri","description":"The URL to the community's logo image (PNG, JPG, GIF). Optional. If empty, a default placeholder is used.","nullable":true},{"name":"banner","type":"uri","description":"The URL to the community's banner image (PNG, JPG, GIF). Optional. If empty, a default placeholder is used.","nullable":true},{"name":"rules","type":"string","description":"An array of up to 10 community rules, each up to 100 characters long. Displayed as numbered list 1 through 5 in the community info panel. Stored as JSON-encoded array in database. Used to enforce community guidelines. The requirement specifies direct array storage, so the field is stored as a string[] type in Prisma with appropriate string array mapping.","nullable":true},{"name":"created_at","type":"datetime","description":"The timestamp when this community was created. Used for sorting in 'Recently Created' order and for audit trails. Never modified.","nullable":false},{"name":"updated_at","type":"datetime","description":"The timestamp of the last modification to the community's metadata. This field is updated only when name, description, category, logo, banner, or rules are changed. Never set manually; updated by application logic.","nullable":false},{"name":"deleted_at","type":"datetime","description":"The timestamp when this community was soft-deleted. If null, the community is active. If set, the community is considered archived and hidden from most UIs. Supports recovery. Required for soft delete capability as per business logic.","nullable":true},{"name":"member_count","type":"int","description":"The total number of users who have joined this community. Always derived from active relationships to communitybbs_member, but stored for performance and consistency in the explore page and community list. Incremented when a user joins, decremented when they leave. Since this value is critical to sorting and display and is referenced in early codebase in requirement documentation, it is stored as a denormalized field here, but it is NOT calculated here - it's kept in sync by application logic via member join/leave events.","nullable":false},{"name":"last_active_at","type":"datetime","description":"The timestamp of the most recent activity in this community, which can be any of: a post created, a comment posted, a vote cast, or a user joining. Used for ordering the 'Recent Communities' list in the sidebar and for determining community activity. Updated on any of these events. The field is stored here for performance and ensures consistence with client-side feeds.","nullable":false}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["category"]},{"fieldNames":["created_at"]},{"fieldNames":["last_active_at"]},{"fieldNames":["member_count"]}],"ginIndexes":[{"fieldName":"description"}]}]},{"filename":"schema-04-content.prisma","namespace":"Content","models":[{"name":"communitybbs_post","description":"Main entity representing user posts in communities. Each post belongs to a community and is authored by a member. Supports soft deletion for content moderation and preserves historical states through snapshots.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"communitybbs_community_id","type":"uuid","description":"Reference to the community where this post was created. {@link communitybbs_community.id}.","relation":{"name":"community","targetModel":"communitybbs_community"},"nullable":false,"unique":false},{"name":"communitybbs_member_id","type":"uuid","description":"Reference to the member who authored this post. {@link communitybbs_member.id}.","relation":{"name":"author","targetModel":"communitybbs_member"},"nullable":false,"unique":false}],"plainFields":[{"name":"title","type":"string","description":"Title of the post. Must be between 5 and 120 characters according to business requirements. Truncated if longer.","nullable":false},{"name":"body","type":"string","description":"Body content of the post. Must be between 10 and 10,000 characters according to business requirements. Contains plain text only with line breaks. No HTML or code allowed.","nullable":false},{"name":"display_name","type":"string","description":"Display name of the author as shown on the post. If not provided by user, defaults to 'Anonymous'. Truncated to 32 characters if longer. Not a reference to member profile - stored here for consistency even if member changes display name.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the post was created. Always set at time of creation and never modified.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the post was last updated. Set on any edit operation.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the post was soft-deleted. Null if not deleted. Enforces soft-delete policy for content moderation.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["communitybbs_community_id","created_at"]},{"fieldNames":["communitybbs_community_id","updated_at"]},{"fieldNames":["communitybbs_member_id","created_at"]},{"fieldNames":["deleted_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"body"}]},{"name":"communitybbs_comment","description":"Main entity representing comments on posts. Supports infinite nesting through parent-child relationships. Each comment belongs to a post and may optionally belong to another comment as a reply. Implements soft deletion for moderation.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"communitybbs_post_id","type":"uuid","description":"Reference to the post this comment belongs to. {@link communitybbs_post.id}.","relation":{"name":"post","targetModel":"communitybbs_post"},"nullable":false,"unique":false},{"name":"communitybbs_member_id","type":"uuid","description":"Reference to the member who authored this comment. {@link communitybbs_member.id}.","relation":{"name":"author","targetModel":"communitybbs_member"},"nullable":false,"unique":false},{"name":"communitybbs_comment_id","type":"uuid","description":"Reference to the parent comment this is replying to. {@link communitybbs_comment.id}. Used for threaded replies. Null for top-level comments.","relation":{"name":"parent","targetModel":"communitybbs_comment","mappingName":"recursive"},"nullable":true,"unique":false}],"plainFields":[{"name":"content","type":"string","description":"Text content of the comment. Must be between 2 and 2,000 characters according to business requirements. Truncated if longer.","nullable":false},{"name":"display_name","type":"string","description":"Display name of the author as shown on the comment. If not provided by user, defaults to 'Anonymous'. Truncated to 32 characters if longer. Not a reference to member profile - stored here for consistency even if member changes display name.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the comment was created. Always set at time of creation and never modified.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when the comment was last updated. Set on any edit operation.","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the comment was soft-deleted. Null if not deleted. Enforces soft-delete policy for content moderation.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["communitybbs_post_id","created_at"]},{"fieldNames":["communitybbs_post_id","updated_at"]},{"fieldNames":["communitybbs_member_id","created_at"]},{"fieldNames":["communitybbs_comment_id"]},{"fieldNames":["deleted_at"]}],"ginIndexes":[{"fieldName":"content"}]}]},{"filename":"schema-05-voting.prisma","namespace":"Voting","models":[{"name":"communitybbs_vote","description":"Tracks user votes (upvotes/downvotes) on posts and comments. Each vote is associated with an actor (member/administrator/guest) and exactly one target (either a post or a comment). This table enables real-time score calculation, prevents duplicate voting, and supports audit trails. This table does NOT store aggregated scores - scores are computed from this data. Used in conjunction with communitybbs_post and communitybbs_comment tables. Referential integrity ensured via foreign keys to existing tables: actor_id references communitybbs_member, communitybbs_administrator, or communitybbs_guest (all use uuid id), post_id references communitybbs_post.id, comment_id references communitybbs_comment.id. Application logic enforces that exactly one of post_id or comment_id must be non-null.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"actor_id","type":"uuid","description":"The actor who cast the vote. Links to either a member, administrator, or guest via id. {@link communitybbs_member.id} or {@link communitybbs_administrator.id} or {@link communitybbs_guest.id}.","relation":{"name":"actor","targetModel":"communitybbs_member"},"unique":false,"nullable":false},{"name":"post_id","type":"uuid","description":"The post this vote is associated with, if applicable. One and only one of post_id or comment_id must be non-null. {@link communitybbs_post.id}.","relation":{"name":"post","targetModel":"communitybbs_post"},"unique":false,"nullable":true},{"name":"comment_id","type":"uuid","description":"The comment this vote is associated with, if applicable. One and only one of post_id or comment_id must be non-null. {@link communitybbs_comment.id}.","relation":{"name":"comment","targetModel":"communitybbs_comment"},"unique":false,"nullable":true}],"plainFields":[{"name":"type","type":"string","description":"The type of vote: 'upvote' or 'downvote'.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when the vote was cast. Always set on creation and never updated.","nullable":false}],"uniqueIndexes":[{"fieldNames":["actor_id","post_id"],"unique":true},{"fieldNames":["actor_id","comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["actor_id"]},{"fieldNames":["post_id"]},{"fieldNames":["comment_id"]},{"fieldNames":["created_at"]}],"ginIndexes":[]}]},{"filename":"schema-06-search.prisma","namespace":"Search","models":[{"name":"communitybbs_search_post","description":"Search index for posts, enabling full-text search across titles and bodies. This table is optimized for fast keyword matching and does not store business data directly but references the original post for context. Used exclusively for search operations to maintain separation of concerns and optimize performance.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"communitybbs_post_id","type":"uuid","description":"References the original post in communitybbs_post model. {@link communitybbs_post.id}.","relation":{"name":"post","targetModel":"communitybbs_post"},"nullable":false,"unique":true},{"name":"communitybbs_community_id","type":"uuid","description":"References the community where the post belongs. {@link communitybbs_community.id}.","relation":{"name":"community","targetModel":"communitybbs_community"},"nullable":false,"unique":false}],"plainFields":[{"name":"title","type":"string","description":"The title of the original post for full-text search indexing. This is a denormalized copy for search efficiency.","nullable":false},{"name":"body","type":"string","description":"The body content of the original post for full-text search indexing. This is a denormalized copy for search efficiency.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp of when the post was created. Used for sorting search results by recency.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of when the post was last updated. Used to trigger re-indexing in search system.","nullable":false},{"name":"score","type":"int","description":"Popularity score calculated as upvotes minus downvotes from the original post. Used for 'Top' sort order in search results.","nullable":false}],"uniqueIndexes":[{"fieldNames":["communitybbs_post_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["score","created_at","id"]},{"fieldNames":["communitybbs_community_id","created_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"body"}]},{"name":"communitybbs_search_community","description":"Search index for communities, enabling full-text search across names and descriptions. This table is optimized for fast keyword matching and does not store business data directly but references the original community for context. Used exclusively for search operations to maintain separation of concerns and optimize performance.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"communitybbs_community_id","type":"uuid","description":"References the original community in communitybbs_community model. {@link communitybbs_community.id}.","relation":{"name":"community","targetModel":"communitybbs_community"},"nullable":false,"unique":true}],"plainFields":[{"name":"name","type":"string","description":"The name of the community for full-text search indexing. This is a denormalized copy for search efficiency.","nullable":false},{"name":"description","type":"string","description":"The description of the community for full-text search indexing. This is a denormalized copy for search efficiency.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp of when the community was created. Used for sorting search results by recency.","nullable":false}],"uniqueIndexes":[{"fieldNames":["communitybbs_community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"name"},{"fieldName":"description"}]},{"name":"communitybbs_search_comment","description":"Search index for comments, enabling full-text search across comment content. This table is optimized for fast keyword matching and does not store business data directly but references the original comment for context. Used exclusively for search operations to maintain separation of concerns and optimize performance.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"communitybbs_comment_id","type":"uuid","description":"References the original comment in communitybbs_comment model. {@link communitybbs_comment.id}.","relation":{"name":"comment","targetModel":"communitybbs_comment"},"nullable":false,"unique":true},{"name":"communitybbs_post_id","type":"uuid","description":"References the post this comment belongs to. {@link communitybbs_post.id}.","relation":{"name":"post","targetModel":"communitybbs_post"},"nullable":false,"unique":false},{"name":"communitybbs_community_id","type":"uuid","description":"References the community this comment belongs to. {@link communitybbs_community.id}.","relation":{"name":"community","targetModel":"communitybbs_community"},"nullable":false,"unique":false}],"plainFields":[{"name":"content","type":"string","description":"The content of the original comment for full-text search indexing. This is a denormalized copy for search efficiency.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp of when the comment was created. Used for sorting search results by recency.","nullable":false}],"uniqueIndexes":[{"fieldNames":["communitybbs_comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["communitybbs_post_id","created_at"]},{"fieldNames":["communitybbs_community_id","created_at"]}],"ginIndexes":[{"fieldName":"content"}]}]},{"filename":"schema-07-sessions.prisma","namespace":"Sessions","models":[{"name":"communitybbs_session","description":"Authentication session record tracking user login state, token validity, and activity. This table is essential for implementing secure login, session expiry, and seamless re-authentication flows. Each session is tied to a user actor (member, guest, or administrator) and must be validated for every protected request. Supports grace period logic and silent refresh attempts by tracking last activity time, enabling seamless restoration of context after temporary token invalidation without requiring full re-login. Associated with auth actors via actor_id.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"actor_id","type":"uuid","description":"Reference to the user actor (member, guest, or administrator) this session belongs to. {@link communitybbs_member.id} or {@link communitybbs_guest.id} or {@link communitybbs_administrator.id}.","relation":{"name":"actor","targetModel":"communitybbs_member"},"unique":false,"nullable":false}],"plainFields":[{"name":"token","type":"string","description":"Unique session token issued upon login. Used for authentication in API headers. Must be cryptographically secure and randomly generated.","nullable":false},{"name":"expires_at","type":"datetime","description":"Timestamp when this session expires. After this time, the session is invalid and must be refreshed or re-authenticated. Used to enforce session lifetime policies.","nullable":false},{"name":"last_activity_at","type":"datetime","description":"Timestamp of the last user interaction within this session (e.g., API call, page load). Used to implement grace periods and silent refresh logic; sessions are considered \"active\" if last_activity_at is within 5 minutes of current time.","nullable":false},{"name":"created_at","type":"datetime","description":"Timestamp when this session was created and issued.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp when this session was last updated (e.g., when last_activity_at was refreshed).","nullable":false},{"name":"deleted_at","type":"datetime","description":"Soft delete timestamp. When a session is revoked or expired but not physically deleted, this field is populated. Used for audit trails and recovery.","nullable":true},{"name":"is_valid","type":"boolean","description":"Current validity state of the session. True if session is active and not expired or revoked; false if expired, revoked, or deleted. Used for quick permission checks without parsing timestamps.","nullable":false}],"uniqueIndexes":[{"fieldNames":["token"],"unique":true}],"plainIndexes":[{"fieldNames":["expires_at"]},{"fieldNames":["actor_id"]},{"fieldNames":["last_activity_at"]},{"fieldNames":["is_valid"]}],"ginIndexes":[]}]},{"filename":"schema-08-logging.prisma","namespace":"Logging","models":[{"name":"communitybbs_log","description":"System log entries for auditing critical events such as community creation, user joins/leaves, and system error conditions. Captures action type, actor, target entity, timestamp, and contextual details for debugging and compliance purposes.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"actor_id","type":"uuid","description":"Reference to the user who performed the action. {@link communitybbs_member.id} or {@link communitybbs_administrator.id}.","relation":{"name":"actor","targetModel":"communitybbs_member"},"nullable":true,"unique":false},{"name":"target_id","type":"uuid","description":"Reference to the entity affected by the action. {@link communitybbs_community.id} for community actions, {@link communitybbs_post.id} for post actions, etc.","relation":{"name":"target","targetModel":"communitybbs_community"},"nullable":true,"unique":false}],"plainFields":[{"name":"action_type","type":"string","description":"The type of action logged. Examples: 'community_created', 'user_joined', 'user_left', 'post_deleted', 'system_error'.","nullable":false},{"name":"details","type":"string","description":"Additional contextual details about the action, such as error codes, failed values, or event parameters. May include JSON-formatted metadata.","nullable":true},{"name":"created_at","type":"datetime","description":"Timestamp when the log entry was created. Records the exact moment the event occurred.","nullable":false},{"name":"ip_address","type":"string","description":"The IP address from which the action was initiated. Useful for security investigations and geolocation analysis.","nullable":true}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["action_type"]},{"fieldNames":["created_at"]},{"fieldNames":["actor_id","created_at"]},{"fieldNames":["target_id","action_type","created_at"]}],"ginIndexes":[{"fieldName":"details"}]}]}]}