{"files":[{"filename":"schema-01-systematic.prisma","namespace":"Systematic","models":[{"name":"community_platform_user_roles","description":"Defines the role-based access control system for the community platform. Each role (guest, member, admin) represents a distinct permission profile that determines what actions a user can perform in the system. This table persists the immutable role definitions that govern platform behavior, such as who can create communities, post content, or moderate transactions. Referenced by user tables to enforce access control policies.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"role_name","type":"string","nullable":false,"description":"The precise role identifier that defines the permission set. Must be one of: 'guest', 'member', or 'admin'. This value is immutable and used to enforce access control rules throughout the system."},{"name":"description","type":"string","nullable":false,"description":"A human-readable description of the role's permissions and responsibilities within the platform. Clearly defines what actions users with this role can perform."}],"uniqueIndexes":[{"fieldNames":["role_name"],"unique":true}],"plainIndexes":[],"ginIndexes":[]}]},{"filename":"schema-02-actors.prisma","namespace":"Actors","models":[{"name":"community_platform_guest","description":"Guest account entity that represents unauthenticated users with read-only access to public content. This table enforces that all operations requiring authentication are blocked at the data layer, and no user-specific state is persisted. Used to prevent unauthorized access to write operations.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the guest session began. This field tracks access time for analytics but does not store persistent user state."},{"name":"ip_address","type":"string","nullable":true,"description":"IP address of the guest user. Used for analytics and spam detection. Not used for authentication."}],"uniqueIndexes":[],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["ip_address"]}],"ginIndexes":[]},{"name":"community_platform_member","description":"Member account entity that represents authenticated users with full participation rights including posting, commenting, voting, and joining communities. This table stores authentication credentials and user preferences. Member accounts own all content they create and can edit/delete only their own content.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"email","type":"string","nullable":false,"description":"User's email address used for authentication and communication. Must be unique across all members."},{"name":"password_hash","type":"string","nullable":false,"description":"Hashed password for authentication. Never stores plain text passwords. Required for member login according to authentication requirements."},{"name":"display_name","type":"string","nullable":true,"description":"Optional display name for posts and comments. If empty, system defaults to 'Anonymous'. Length constrained to 32 characters by business rules."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the member account was created. Used for user onboarding analytics and account age calculation."},{"name":"last_login_at","type":"datetime","nullable":true,"description":"Timestamp of the member's last successful login. Used to determine session validity and user activity status."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft delete timestamp. When set, the member account is considered deactivated but persisted for audit trail purposes. Required for soft delete capability per requirements."}],"uniqueIndexes":[{"fieldNames":["email"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["last_login_at"]},{"fieldNames":["deleted_at"]}],"ginIndexes":[{"fieldName":"display_name"}]},{"name":"community_platform_admin","description":"Admin account entity that represents privileged members with elevated permissions including moderation and content deletion. Admins inherit all member privileges and can override content ownership restrictions. This table ensures admin privileges are isolated and auditable, with admin role enforced server-side.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"member_id","type":"uuid","nullable":false,"unique":true,"relation":{"name":"member","targetModel":"community_platform_member"},"description":"Reference to the underlying member account. Admin is a privilege level granted to an existing member. {@link community_platform_member.id}."}],"plainFields":[{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when admin privileges were granted. Used for audit trail and privilege duration analysis."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft delete timestamp. When set, admin privileges are revoked but audit trail is preserved. Required for soft delete capability per requirements."}],"uniqueIndexes":[{"fieldNames":["member_id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["deleted_at"]}],"ginIndexes":[]}]},{"filename":"schema-03-communities.prisma","namespace":"Communities","models":[{"name":"community_platform_communities","description":"A sub-community on the platform where users gather around a specific topic. Communities have unique names, categories, and optional metadata like description, rules, logo, and banner. Member count is tracked in real-time. Communities are created by members and can be deleted by admins or creators. All community data is immutable except for description, logo, banner, and rules (by creator).","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[],"plainFields":[{"name":"name","type":"string","nullable":false,"description":"Unique alphanumeric identifier for the community. May contain hyphens (-) and underscores (_). Must be 5 to 64 characters long. Immutable after creation."},{"name":"category","type":"string","nullable":false,"description":"The predefined category this community belongs to. Must be one of: [\"Tech & Programming\", \"Science\", \"Movies & TV\", \"Games\", \"Sports\", \"Lifestyle & Wellness\", \"Study & Education\", \"Art & Design\", \"Business & Finance\", \"News & Current Affairs\"]."},{"name":"description","type":"string","nullable":true,"description":"Optional summary text with a maximum length of 500 characters. Describes the community's purpose and rules."},{"name":"rules","type":"string","nullable":true,"description":"Optional community rules in plain text format. Each rule is one line. Up to 20 rules allowed. Only the top 5 are displayed on UI."},{"name":"logo_url","type":"uri","nullable":true,"description":"URL to the community's logo image. Supports PNG, JPG, SVG formats. Optional. Defaults to placeholder if not provided."},{"name":"banner_url","type":"uri","nullable":true,"description":"URL to the community's banner image. Supports PNG, JPG formats. Optional. Defaults to placeholder if not provided."},{"name":"member_count","type":"int","nullable":false,"description":"Current number of users who have joined this community. Updated in real-time when users join or leave. Displayed as \"1k\" for ≥1000, \"1m\" for ≥1000000."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when this community was created. Used for sorting in \"Recently Created\" search and internal audit tracking."}],"uniqueIndexes":[{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["category"]},{"fieldNames":["created_at"]}],"ginIndexes":[{"fieldName":"description"}]}]},{"filename":"schema-04-posts.prisma","namespace":"Posts","models":[{"name":"community_platform_posts","description":"Main content entities created by members within communities. Posts are text-only with title and body, linked to a community and author. Ownership is account-based: only the author can edit or delete. Cascading delete on community removal. Created_at and updated_at track lifecycle; deleted_at enables soft delete. Comment count and score are maintained in separate post_stats table; no denormalized counts here to ensure 3NF compliance.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","nullable":false,"relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"description":"Community to which this post belongs. {@link community_platform_communities.id}."},{"name":"author_id","type":"uuid","nullable":false,"relation":{"name":"author","targetModel":"community_platform_member"},"unique":false,"description":"Member who authored this post. {@link community_platform_member.id}."}],"plainFields":[{"name":"title","type":"string","nullable":false,"description":"Post title. Must be between 5 and 120 characters. Plain text only, no HTML or formatting."},{"name":"body","type":"string","nullable":false,"description":"Post body content. Must be between 10 and 10,000 characters. Plain text with \\n line breaks only, no scripts or executable content."},{"name":"author_display_name","type":"string","nullable":true,"description":"Optional display name for the author. If empty or null, system displays \"Anonymous\". Maximum 32 characters."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the post was created. Always set on creation."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp when the post was last updated. Updated on each edit."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft delete timestamp. If null, post is active. If set, post is deleted and hidden from feeds."}],"uniqueIndexes":[{"fieldNames":["community_id","id"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at","id"]},{"fieldNames":["author_id","created_at"]},{"fieldNames":["community_id","created_at"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"body"}]},{"name":"community_platform_comments","description":"Nested comments on posts or other comments. Each comment has a single parent (post or comment) and is authored by a member. Comments support unlimited nesting, ordered by creation time. Only the author can edit/delete. Soft delete supported via deleted_at. All content is plain text. Comment counts are stored in separate comment_stats table to maintain normalization. This is a primary entity because users require independent comment management: search by user, moderation workflows, cross-post visibility.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_id","type":"uuid","nullable":false,"relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"description":"Post that this comment belongs to. CASCADE DELETE when post is removed. {@link community_platform_posts.id}."},{"name":"author_id","type":"uuid","nullable":false,"relation":{"name":"author","targetModel":"community_platform_member"},"unique":false,"description":"Member who authored this comment. {@link community_platform_member.id}."},{"name":"parent_id","type":"uuid","nullable":true,"relation":{"name":"parent","targetModel":"community_platform_comments","mappingName":"recursive"},"unique":false,"description":"Parent comment this comment replies to. Self-referential relationship. If null, comment is top-level (directly under post). {@link community_platform_comments.id}."}],"plainFields":[{"name":"content","type":"string","nullable":false,"description":"Full text content of the comment. Must be between 2 and 2,000 characters. Plain text with \\n line breaks only. No HTML, code, or executable content permitted."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp when the comment was created. Always set on creation."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp when the comment was last updated. Updated on each edit."},{"name":"deleted_at","type":"datetime","nullable":true,"description":"Soft delete timestamp. If null, comment is active. If set, comment is deleted and hidden from views."}],"uniqueIndexes":[{"fieldNames":["post_id","id"],"unique":true},{"fieldNames":["parent_id","id"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id","created_at","id"]},{"fieldNames":["author_id","created_at"]},{"fieldNames":["parent_id","created_at"]},{"fieldNames":["created_at","id"]}],"ginIndexes":[{"fieldName":"content"}]}]},{"filename":"schema-05-votes.prisma","namespace":"Votes","models":[{"name":"community_platform_post_votes","description":"Tracks individual upvotes and downvotes by users on posts. Each record represents a single vote from a user on a specific post, enforcing uniqueness to ensure one vote per user per post. The vote state can be upvote, downvote, or none (implicitly tracked by the absence of a record). This empowers efficient score calculation (upvotes - downvotes) and prevents self-voting through foreign key constraints to community_platform_posts.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_post_id","type":"uuid","description":"The post that was voted on. {@link community_platform_posts.id}.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"community_platform_user_id","type":"uuid","description":"The user who cast this vote. {@link community_platform_member.id}.","relation":{"name":"user","targetModel":"community_platform_member"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"The timestamp when the vote was cast. Used for ordering and determining vote age.","nullable":false},{"name":"updated_at","type":"datetime","description":"The timestamp when the vote was last updated (e.g., changed from upvote to downvote).","nullable":false},{"name":"vote_state","type":"string","description":"The current state of the vote ('upvote' or 'downvote'). A record's existence implies a vote, and this field defines its direction. Implicitly, 'none' is represented by the absence of a record.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_post_id","community_platform_user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_post_id","created_at"]},{"fieldNames":["community_platform_user_id","created_at"]}],"ginIndexes":[]},{"name":"community_platform_comment_votes","description":"Tracks individual upvotes and downvotes by users on comments. Each record represents a single vote from a user on a specific comment, enforcing uniqueness to ensure one vote per user per comment. The vote state can be upvote, downvote, or none (implicitly tracked by the absence of a record). This empowers efficient score calculation (upvotes - downvotes) and prevents self-voting through foreign key constraints to community_platform_comments.","material":false,"stance":"primary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_comment_id","type":"uuid","description":"The comment that was voted on. {@link community_platform_comments.id}.","relation":{"name":"comment","targetModel":"community_platform_comments"},"unique":false,"nullable":false},{"name":"community_platform_user_id","type":"uuid","description":"The user who cast this vote. {@link community_platform_member.id}.","relation":{"name":"user","targetModel":"community_platform_member"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"The timestamp when the vote was cast. Used for ordering and determining vote age.","nullable":false},{"name":"updated_at","type":"datetime","description":"The timestamp when the vote was last updated (e.g., changed from upvote to downvote).","nullable":false},{"name":"vote_state","type":"string","description":"The current state of the vote ('upvote' or 'downvote'). A record's existence implies a vote, and this field defines its direction. Implicitly, 'none' is represented by the absence of a record.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_comment_id","community_platform_user_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_comment_id","created_at"]},{"fieldNames":["community_platform_user_id","created_at"]}],"ginIndexes":[]}]},{"filename":"schema-06-memberships.prisma","namespace":"Memberships","models":[{"name":"community_platform_user_communities","description":"Junction table tracking the dynamic relationship between users and communities. This table enables the 'Recent Communities' list functionality and content filtering for the home feed. Each record represents a user's membership status in a community and tracks when the user last interacted with that community (through join, post, comment, or vote). The record is soft-deleted when a user leaves a community, enabling rejoining and maintaining activity history. This is a supporting table managed exclusively through user actions on community pages, not independently.\n\nKey Business Rules:\n- Users can join and leave communities dynamically\n- The last_interaction_at field determines ordering in the 'Recent Communities' list\n- active status is tracked through deleted_at (not is_joined)\n- This table must support efficient queries for 'Recent Communities' list (top 5 by last_interaction_at)\n- This table supports home feed filtering by excluding posts from communities where deleted_at is not null\n- This table has no independent API endpoints - managed only through community join/leave actions in UI\n\n@link community_platform_users.id - The user who has established membership\n@link community_platform_communities.id - The community the user is associated with","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_user_id","type":"uuid","description":"The user who has established membership. {@link community_platform_member.id}.","relation":{"name":"user","targetModel":"community_platform_member"},"unique":false,"nullable":false},{"name":"community_platform_community_id","type":"uuid","description":"The community the user is associated with. {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"created_at","type":"datetime","description":"Timestamp when the membership relationship was established. This is immutable once set.","nullable":false},{"name":"updated_at","type":"datetime","description":"Timestamp of the last update to this membership record. Updated on any interaction (join, post, comment, vote).","nullable":false},{"name":"deleted_at","type":"datetime","description":"Timestamp when the user left the community. When null, the membership is active; when set, the membership is inactive. Used for soft deletion to maintain history and enable rejoining.","nullable":true},{"name":"last_interaction_at","type":"datetime","description":"Timestamp of the user's most recent activity within this community. This field is updated when the user joins, posts, comments, or votes. Used to sort and maintain the 'Recent Communities' list with the most recently active communities appearing first.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_user_id","community_platform_community_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_platform_user_id","last_interaction_at"]},{"fieldNames":["community_platform_community_id","last_interaction_at"]},{"fieldNames":["deleted_at"]}],"ginIndexes":[]}]},{"filename":"schema-07-search.prisma","namespace":"Search","models":[{"name":"community_platform_search_communities","description":"Materialized view for full-text search of community names and descriptions. This is a denormalized copy of community_platform_communities data, optimized for search performance. Only updated via system triggers when source communities are created, updated or deleted. Not directly modifiable by users.","material":true,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_id","type":"uuid","description":"Reference to the source community in community_platform_communities. {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":true,"nullable":false}],"plainFields":[{"name":"name","type":"string","nullable":false,"description":"The unique name of the community (e.g., 'ai' or 'gaming'), used for exact and fuzzy search matching."},{"name":"description","type":"string","nullable":true,"description":"The optional description of the community, included in full-text search to match user queries about community topics."},{"name":"category","type":"string","nullable":false,"description":"The category designation of the community from the predefined list (e.g., 'Tech & Programming', 'Science'). Used for category-based filtering in search."},{"name":"member_count","type":"int","nullable":false,"description":"The current count of members in this community (1k, 10k, 1m abbreviated). Used for popularity ranking in search results."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp of when this search view entry was created or last updated from the source community."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of when this search view entry was last updated from the source community."}],"uniqueIndexes":[{"fieldNames":["community_id"],"unique":true},{"fieldNames":["name"],"unique":true}],"plainIndexes":[{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]},{"fieldNames":["category"]},{"fieldNames":["member_count"]}],"ginIndexes":[{"fieldName":"description"}]},{"name":"community_platform_search_posts","description":"Materialized view for full-text search of post titles and bodies. This is a denormalized copy of community_platform_posts data, optimized for search performance. Only updated via system triggers when source posts are created, updated or deleted. Not directly modifiable by users.","material":true,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"post_id","type":"uuid","description":"Reference to the source post in community_platform_posts. {@link community_platform_posts.id}.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":true,"nullable":false},{"name":"community_id","type":"uuid","description":"Reference to the community where this post was created (community_platform_communities). {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"title","type":"string","nullable":false,"description":"The title of the post (5-120 characters), used for exact and fuzzy search matching."},{"name":"body","type":"string","nullable":false,"description":"The main content of the post (10-10,000 characters), included in full-text search to match user queries about post content."},{"name":"author_name","type":"string","nullable":false,"description":"The display name of the author (or 'Anonymous' if not set), used to search for content by author."},{"name":"score","type":"int","nullable":false,"description":"The calculated score of the post (upvotes - downvotes), used for Top sort ranking in search results."},{"name":"comment_count","type":"int","nullable":false,"description":"The number of comments on this post, used for popularity ranking in search results."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp of when this search view entry was created or last updated from the source post."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of when this search view entry was last updated from the source post."}],"uniqueIndexes":[{"fieldNames":["post_id"],"unique":true}],"plainIndexes":[{"fieldNames":["community_id"]},{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]},{"fieldNames":["score"]},{"fieldNames":["comment_count"]}],"ginIndexes":[{"fieldName":"title"},{"fieldName":"body"},{"fieldName":"author_name"}]},{"name":"community_platform_search_comments","description":"Materialized view for full-text search of comment content. This is a denormalized copy of community_platform_comments data, optimized for search performance. Only updated via system triggers when source comments are created, updated or deleted. Not directly modifiable by users.","material":true,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"comment_id","type":"uuid","description":"Reference to the source comment in community_platform_comments. {@link community_platform_comments.id}.","relation":{"name":"comment","targetModel":"community_platform_comments"},"unique":true,"nullable":false},{"name":"post_id","type":"uuid","description":"Reference to the post this comment belongs to (community_platform_posts). {@link community_platform_posts.id}.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":false,"nullable":false},{"name":"community_id","type":"uuid","description":"Reference to the community where this comment was made (community_platform_communities). {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":false,"nullable":false}],"plainFields":[{"name":"content","type":"string","nullable":false,"description":"The text content of the comment (2-2,000 characters), used for full-text search matching."},{"name":"author_name","type":"string","nullable":false,"description":"The display name of the comment author (or 'Anonymous' if not set), used to search for comments by author."},{"name":"score","type":"int","nullable":false,"description":"The calculated score of the comment (upvotes - downvotes), used for ranking in search results."},{"name":"created_at","type":"datetime","nullable":false,"description":"Timestamp of when this search view entry was created or last updated from the source comment."},{"name":"updated_at","type":"datetime","nullable":false,"description":"Timestamp of when this search view entry was last updated from the source comment."}],"uniqueIndexes":[{"fieldNames":["comment_id"],"unique":true}],"plainIndexes":[{"fieldNames":["post_id"]},{"fieldNames":["community_id"]},{"fieldNames":["created_at"]},{"fieldNames":["updated_at"]},{"fieldNames":["score"]}],"ginIndexes":[{"fieldName":"content"},{"fieldName":"author_name"}]}]},{"filename":"schema-08-analytics.prisma","namespace":"Analytics","models":[{"name":"community_platform_community_stats","description":"Denormalized statistics counter for member count of communities. This table is updated atomically on every user join or leave action to avoid expensive COUNT queries on the community_platform_user_communities junction table during feed rendering. Used by the home page to display member counts as 1k, 10k, etc. This is a subsidiary table with denormalized data that supports high-frequency read operations.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_community_id","type":"uuid","description":"Reference to the community this statistic belongs to. {@link community_platform_communities.id}.","relation":{"name":"community","targetModel":"community_platform_communities"},"unique":true,"nullable":false}],"plainFields":[{"name":"member_count","type":"int","description":"The current number of members in this community. Updated atomically on every join/leave action. Never exceeds 10M and is formatted as 1k, 10k, 1m in UI.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_community_id"],"unique":true}],"plainIndexes":[],"ginIndexes":[]},{"name":"community_platform_post_stats","description":"Denormalized statistics counter for total score (upvotes minus downvotes) of posts. This table is updated atomically on every vote action (upvote/downvote/toggle) to avoid expensive COUNT queries on the community_platform_post_votes table during top-sorting of feeds and global latest sidebar. Used to calculate and display the score in posts without performing joins or aggregations at query time. This is a subsidiary table with denormalized data.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_post_id","type":"uuid","description":"Reference to the post this statistic belongs to. {@link community_platform_posts.id}.","relation":{"name":"post","targetModel":"community_platform_posts"},"unique":true,"nullable":false}],"plainFields":[{"name":"score","type":"int","description":"The total score of the post calculated as (upvotes - downvotes). Updated atomically on every vote event to optimize high-frequency sorting by \"Top\" in feeds and Global Latest sidebar.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_post_id"],"unique":true}],"plainIndexes":[],"ginIndexes":[]},{"name":"community_platform_comment_stats","description":"Denormalized statistics counter for total score (upvotes minus downvotes) of comments. This table is updated atomically on every vote action (upvote/downvote/toggle) to avoid expensive COUNT queries on the community_platform_comment_votes table during comment rendering. Used to calculate and display comment score efficiently on post detail pages and search results. This is a subsidiary table with denormalized data.","material":false,"stance":"subsidiary","primaryField":{"name":"id","type":"uuid","description":"Primary Key."},"foreignFields":[{"name":"community_platform_comment_id","type":"uuid","description":"Reference to the comment this statistic belongs to. {@link community_platform_comments.id}.","relation":{"name":"comment","targetModel":"community_platform_comments"},"unique":true,"nullable":false}],"plainFields":[{"name":"score","type":"int","description":"The total score of the comment calculated as (upvotes - downvotes). Updated atomically on every vote event to optimize high-frequency display of comment scores in threaded discussions.","nullable":false}],"uniqueIndexes":[{"fieldNames":["community_platform_comment_id"],"unique":true}],"plainIndexes":[],"ginIndexes":[]}]}]}