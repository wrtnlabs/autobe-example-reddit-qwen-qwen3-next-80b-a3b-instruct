import { tags } from "typia";

import { ICommunitybbsCommunity } from "./ICommunitybbsCommunity";

/**
 * Standard paginated result container for list-based API responses.
 *
 * This schema follows exactly the fixed IPage<T> structure as required in the
 * documentation.
 *
 * It has two mandatory properties: pagination (with metadata) and data (the
 * actual items).
 *
 * The 'data' array property uses a $ref to ICommunitybbsCommunity.ISummary
 * because the schema name after IPage is 'ICommunitybbsCommunity.ISummary',
 * meaning it contains an array of community summary objects.
 *
 * The pagination property contains metadata about the current page position,
 * limit, total records, and number of pages.
 *
 * The IPage<T> structure is used consistently across all paginated API
 * endpoints in the system, ensuring predictable response formats for clients.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPage = {
  /**
   * Pagination metadata for the result set.
   *
   * This property contains information about page position, limits, and total
   * records.
   *
   * It allows clients to determine current position in the data set,
   * understand available pages, and implement navigation controls.
   *
   * The pagination object follows the standard pattern used throughout the
   * system.
   */
  pagination: IPage.IPagination;

  /**
   * Array of community summary objects matching the search criteria.
   *
   * This property contains the actual results of the search operation,
   * formatted as simple summary objects.
   *
   * Each item represents a community with minimal information needed for
   * display in lists: name, description, logo, join status, etc.
   *
   * The size of this array is determined by the 'limit' parameter (default
   * 20) and the number of matching results.
   *
   * This structure enables efficient display of large result sets with
   * minimal payload size.
   */
  data: ICommunitybbsCommunity.ISummary[];
};
export namespace IPage {
  /** Page information. */
  export type IPagination = {
    /** Current page number. */
    current: number & tags.Type<"int32"> & tags.Minimum<0>;

    /** Limitation of records per a page. */
    limit: number & tags.Type<"int32"> & tags.Minimum<0>;

    /** Total records in the database. */
    records: number & tags.Type<"int32"> & tags.Minimum<0>;

    /**
     * Total pages.
     *
     * Equal to {@link records} / {@link limit} with ceiling.
     */
    pages: number & tags.Type<"int32"> & tags.Minimum<0>;
  };

  /**
   * Page request data parameters for pagination.
   *
   * This schema defines the optional parameters that can be passed to control
   * pagination in list operations.
   *
   * It is used in GET and PATCH endpoints that return paginated data.
   *
   * Both page and limit are optional with defaults provided by the server.
   *
   * This allows for simpler client requests while still supporting advanced
   * pagination.
   *
   * The field descriptions reference the standard IPage interface definitions
   * in the requirements for consistency.
   *
   * The parameters map directly to the pagination controls in the UI and
   * align with the business requirement of 20 records per page.
   */
  export type IRequest = {
    /**
     * Page number for pagination, 1-indexed.
     *
     * This optional field allows clients to request a specific page of
     * results.
     *
     * If omitted, the server defaults to page 1.
     *
     * Must be an integer with a minimum value of 1.
     *
     * Relevant to the 'Standard Type Definitions' section of the
     * requirements.
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /**
     * Limitation of records per page.
     *
     * This optional field allows clients to specify how many records to
     * return per page.
     *
     * Must be between 1 and 100 (inclusive).
     *
     * Default is 20 to match the business requirement.
     *
     * If set, it overrides the server default.
     *
     * Relevant to the 'Standard Type Definitions' section of the
     * requirements.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;
  };
}
