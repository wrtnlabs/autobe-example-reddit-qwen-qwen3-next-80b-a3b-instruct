import { tags } from "typia";

/**
 * Detailed information for a comment from the search materialized view
 * (community_platform_search_comments).
 *
 * This schema represents the structure returned by the
 * /communityPlatform/search/comments/{commentId} endpoint and is optimized for
 * search result contextual display. It provides essential metadata and content
 * for identifying and understanding a comment within its context.
 *
 * The data is sourced from a materialized view to ensure fast read performance
 * during search operations. This structure avoids complex database joins and
 * maintains high-speed access when resolving queries from the /s/comments tab.
 *
 * Unlike the full comment detail view on post detail pages, this response does
 * not include threading information (parent_id, replies) — only the direct
 * comment and its immediate context (parent post and community) are included.
 * This keeps the response lightweight for display in search result listings
 * while providing enough information for users to judge relevance and navigate
 * to the comment's full context.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSearchComment = {
  /**
   * Unique identifier of the comment in the search materialized view.
   *
   * This UUID is the primary key for the community_platform_search_comments
   * table and is guaranteed to match the corresponding comment's id in the
   * community_platform_comments table.
   *
   * This field is used internally by the backend to link search results
   * directly to the comment data in the source table. This enables consistent
   * data integrity and seamless navigation from search results to comment
   * detail views.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the source comment in the community_platform_comments table.
   *
   * This link maintains the relationship between the search view and the
   * underlying comment record that contains the full comment content, nested
   * reply structure, vote count, and user information.
   *
   * When the comment is updated, deleted, or created, system triggers
   * automatically synchronize this materialized view to reflect changes,
   * ensuring search results remain accurate without requiring manual
   * maintenance.
   */
  comment_id: string & tags.Format<"uuid">;

  /**
   * Reference to the parent post that this comment belongs to, from the
   * community_platform_posts table.
   *
   * This enables the search results to provide context by linking to the
   * parent post. When displaying a comment in search, users can easily
   * navigate to the full post and read the surrounding discussion.
   *
   * This field is essential for the comment search experience, allowing users
   * to understand where the comment fits in the larger conversation.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Reference to the community where this comment was made, from the
   * community_platform_communities table.
   *
   * This field provides the community context for the comment, allowing users
   * to identify which topic-specific community the comment belongs to.
   * Combined with the post_id, this fully identifies the hierarchical
   * location of the comment within the platform structure.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * The full text content of the comment, including line breaks, with a
   * length constraint of 2-2,000 characters.
   *
   * This field contains the complete comment text exactly as submitted by the
   * user, ensuring search results accurately match the content entered. The
   * content is plain text only — no HTML, code, or formatting is permitted.
   *
   * For search results, this field is typically truncated for display with an
   * ellipsis (e.g., "I really enjoyed this post about AI..."), but the full
   * content is available here for backend processing if needed.
   */
  content: string;

  /**
   * The display name of the comment author or "Anonymous" if not set.
   *
   * This field reflects the value from the author_display_name field in the
   * community_platform_member table. If the member did not provide a display
   * name, the system defaults to "Anonymous" as required by business rules.
   *
   * This allows users to find comments by specific authors without requiring
   * authentication or full user data disclosure in the search results.
   */
  author_name: string;

  /**
   * The calculated vote score of the comment, defined as (upvotes -
   * downvotes).
   *
   * This value is maintained in the community_platform_comment_stats
   * denormalized table and updated atomically on every vote action
   * (upvote/downvote/toggle). The score reflects the community's collective
   * assessment of the comment's value.
   *
   * This field is used to determine comment popularity and is used in the
   * "Top" sort ordering of search results, though for comments, the business
   * rules require Newest (creation time)排序 only.
   */
  score: number & tags.Type<"int32">;

  /**
   * The timestamp when the comment was originally created, inherited from the
   * community_platform_comments table.
   *
   * This field is used for the "Newest" sort order in comment search results,
   * ensuring comments are ordered chronologically from most recent to
   * oldest.
   *
   * The format follows ISO 8601 datetime standard (e.g.,
   * '2025-10-01T16:40:28.932Z') to ensure consistent parsing across systems
   * and for relative time calculation in the UI.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * The timestamp of when the comment's search index was last updated from
   * the source comment data.
   *
   * This field is maintained automatically by system triggers that refresh
   * the search view whenever a comment is created, edited, or deleted. It
   * does not track the comment's own editing history, which is stored in the
   * commented_at field of the source record.
   *
   * This allows the search index to remain current for accurate query results
   * without requiring manual re-indexing.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformSearchComment {
  /**
   * Request parameters for searching comments in the global search
   * functionality.
   *
   * This schema defines the structure of the request body for the
   * /communityPlatform/search/comments endpoint. It allows users to specify a
   * search term (q), along with optional pagination parameters (page and
   * limit) to control the results displayed.
   *
   * The pagination model implements the business requirement that search
   * results return 20 entries per page. The minimum query length of 2
   * characters is enforced at the API level.
   *
   * This enables the user to perform complex searches across all comments in
   * the platform, sorting strictly by Newest (creation timestamp descending)
   * as required.
   *
   * Note: Sorting for comments is hardcoded to "Newest" only. This schema
   * does not include a "sort" field because the business rules specify that
   * comment search is sorted by creation time and no other options are
   * supported.
   *
   * The schema may be extended in the future to support additional advanced
   * search capabilities, such as filtering by author or community, but it
   * will always remain minimal and focused.
   */
  export type IRequest = {
    /**
     * The search query term used to match against comment content.
     *
     * The query must be at least 2 characters long as per business rules;
     * shorter queries will be rejected by the API before execution. The
     * search matches symptomatically against the content field of comments
     * using PostgreSQL's pg_trgm extension for fuzzy text matching.
     *
     * This field enables users to find specific comments across the
     * platform by entering keywords or phrases present in the text.
     * Searches are case-insensitive and support substring matching (e.g.,
     * searching 'ai' will match comments containing 'AI', 'Machine Learning
     * AI', etc.).
     */
    q: string;

    /**
     * The page number for paginated results.
     *
     * Pagination is required because search results can span many pages. By
     * default, 20 results are returned per page as specified in the
     * requirements.
     *
     * This field is optional; if not provided, the system defaults to page
     * = 1. Always starts at 1, not 0.
     *
     * When a user clicks 'Load more' in the UI, this page number is
     * incremented to query the next set of results.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * The number of comments to return per page.
     *
     * Valid values are between 1 and 50, with 20 as the default as required
     * by the business rules for search results.
     *
     * This allows for flexible pagination control while maintaining
     * performance constraints. Values above 50 are rejected as they could
     * impose excessive load on the search system.
     *
     * This corresponds to the "20 results per page" requirement for search
     * results and ensures uniform user experience across the platform.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<50>)
      | undefined;
  };
}
