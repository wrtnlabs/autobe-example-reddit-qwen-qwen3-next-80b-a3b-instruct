import { tags } from "typia";

/**
 * Search criteria for finding member accounts, supporting advanced filtering
 * and pagination for administrative purposes.
 *
 * This request object is used in admin search operations to find members based
 * on various criteria including creation time, login activity, and search
 * terms.
 *
 * The structure enables comprehensive user management workflow by allowing
 * admins to filter active/inactive accounts, target users based on time
 * periods, and paginate results efficiently.
 *
 * All filter criteria are combined with AND logic - only members matching all
 * specified conditions are returned. This is optimized for performance on the
 * community_platform_member table.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformMemberIRequest = {
  /**
   * Text search query to filter member accounts by email, display name, or
   * other searchable fields. Must be at least 2 characters for meaningful
   * results.
   *
   * This search term is applied across relevant fields in the
   * community_platform_member table including email and display_name using
   * fuzzy matching to find partial matches.
   */
  search?: string | undefined;

  /**
   * Filter members created before this timestamp. Uses ISO 8601 format
   * (YYYY-MM-DDTHH:mm:ssZ).
   *
   * This enables finding older or newly registered users. For example, to
   * find users who joined after a specific date, set this to the cutoff
   * date.
   */
  createdBefore?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Filter members created after this timestamp. Uses ISO 8601 format
   * (YYYY-MM-DDTHH:mm:ssZ).
   *
   * This enables finding recently registered users. For example, to find
   * users who joined within the last week, set this to the date 7 days ago.
   */
  createdAfter?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Filter members whose last login was before this timestamp. Uses ISO 8601
   * format (YYYY-MM-DDTHH:mm:ssZ).
   *
   * This enables identifying inactive users who have not logged in since a
   * specific date, useful for engagement analysis or cleanup tasks.
   */
  lastLoginBefore?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Filter members whose last login was after this timestamp. Uses ISO 8601
   * format (YYYY-MM-DDTHH:mm:ssZ).
   *
   * This enables identifying recently active users, useful for engagement
   * analysis or targeted communications.
   */
  lastLoginAfter?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Filter members based on active status. When true, returns only members
   * with deleted_at = null. When false, returns only deactivated members.
   *
   * This value is determined by whether the user's account is marked as
   * deleted in the community_platform_member table.
   */
  isActive?: boolean | undefined;

  /**
   * Field to sort the results by. Must be one of: 'created_at',
   * 'last_login_at', or 'email'.
   *
   * This determines the ordering of the paginated results, with 'created_at'
   * being the default for new user analysis, 'last_login_at' for activity
   * analysis, and 'email' for alphabetical sorting.
   */
  sortBy?: "created_at" | "last_login_at" | "email" | undefined;

  /**
   * Sorting order for results. Must be either 'asc' (ascending) or 'desc'
   * (descending).
   *
   * This follows standard database sorting conventions where 'desc' shows
   * most recent or highest values first.
   */
  sortOrder?: "asc" | "desc" | undefined;

  /**
   * Page number for pagination, starting at 1. This determines which set of
   * results to return.
   *
   * Used with limit to enable pagination of the result set. The maximum page
   * limit is determined by the system's data size and performance
   * constraints.
   */
  page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

  /**
   * Number of results per page. Must be between 1 and 100, with a default of
   * 20.
   *
   * This controls the response size and performance characteristics. Higher
   * values fetch more data per request but increase latency and resource
   * usage.
   */
  limit?:
    | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
    | undefined;
};
