import { tags } from "typia";

/**
 * Represents a single vote cast by a user on either a post or a comment.
 *
 * This entity tracks user feedback on community content and supports the
 * platform's score-based ranking system.
 *
 * Each vote is uniquely identified by its id and associated with exactly one
 * actor and one target (either a post or a comment, but not both).
 *
 * The combination of actor_id and post_id (when targeting a post) or actor_id
 * and comment_id (when targeting a comment) must be unique per record, as
 * enforced by database constraints.
 *
 * Votes are used to compute the dynamic score displayed for each post and
 * comment: score = SUM(upvotes) - SUM(downvotes).
 *
 * This model does not store aggregated values; scores are computed in real-time
 * using this table's data.
 *
 * This design ensures data normalization, auditability, and support for vote
 * changes (e.g., toggling from upvote to downvote).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IVote = {
  /**
   * Unique identifier of the vote record.
   *
   * This field is a UUID generated by the system upon vote creation. It
   * uniquely identifies each vote entry in the communitybbs_vote table.
   *
   * The value is automatically assigned by the database and should not be
   * provided by clients.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the user who cast the vote.
   *
   * This references either a member, administrator, or guest entity via its
   * UUID id.
   *
   * Must correspond to an existing record in communitybbs_member,
   * communitybbs_administrator, or communitybbs_guest.
   *
   * This field establishes accountability and prevents duplicate voting by
   * the same actor on the same target item.
   */
  actor_id: string & tags.Format<"uuid">;

  /**
   * Identifier of the post being voted on, if applicable.
   *
   * When present, this field references a specific post in the
   * communitybbs_post table.
   *
   * Exactly one of post_id or comment_id must be non-null. This field is null
   * if the vote is on a comment.
   *
   * Used to associate votes with posts for score calculation and retrieval.
   */
  post_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Identifier of the comment being voted on, if applicable.
   *
   * When present, this field references a specific comment in the
   * communitybbs_comment table.
   *
   * Exactly one of post_id or comment_id must be non-null. This field is null
   * if the vote is on a post.
   *
   * Used to associate votes with comments for score calculation and
   * retrieval.
   */
  comment_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * The type of vote cast by the actor.
   *
   * Must be either 'upvote' or 'downvote'.
   *
   * This value determines whether the vote contributes positively or
   * negatively to the target item's score (upvotes - downvotes).
   *
   * A vote of 'upvote' adds +1 to the score, while 'downvote' adds -1.
   *
   * Only two values are permitted, ensuring consistency in scoring logic.
   */
  type: "upvote" | "downvote";

  /**
   * Timestamp when the vote was cast.
   *
   * This is set automatically by the server at the moment the vote is created
   * and never modified.
   *
   * Format follows ISO 8601: YYYY-MM-DDTHH:mm:ss.SSSZ
   *
   * Used for ordering votes chronologically and for audit trails.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IVote {
  /**
   * Request body for creating or updating a vote on a post or comment.
   * Represents the input payload when a user casts, changes, or retracts a
   * vote.
   *
   * This type is used in POST /votes and POST
   * /communities/{communityId}/posts/{postId}/votes endpoints to create a new
   * vote. It is also used in PATCH /votes and PATCH
   * /communities/{communityId}/posts/{postId}/votes to update an existing
   * vote.
   *
   * Exactly one of post_id or comment_id must be provided to identify the
   * target. Both cannot be null or both non-null. The type field is mandatory
   * and must be exactly 'upvote' or 'downvote'.
   *
   * The system enforces that a user cannot vote on their own content. Before
   * processing, the server checks the target's author_id (from post or
   * comment) against the authenticated actor_id. If they match, the request
   * is rejected with a 403 error.
   *
   * The server creates a new record in communitybbs_vote if no previous vote
   * exists. If a vote already exists, it will be updated (switched or deleted
   * based on logic).
   *
   * Authorization Rule: Only authenticated members or administrators can
   * create or update votes.
   */
  export type ICreate = {
    /**
     * The post this vote is associated with, if applicable. One and only
     * one of post_id or comment_id must be non-null.
     * {@link communitybbs_post.id}.
     *
     * The unique identifier of the post being voted on. Allowed only if
     * comment_id is null. Must reference an existing, active post. Cannot
     * be used with comment_id in the same request.
     */
    post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The comment this vote is associated with, if applicable. One and only
     * one of post_id or comment_id must be non-null.
     * {@link communitybbs_comment.id}.
     *
     * The unique identifier of the comment being voted on. Allowed only if
     * post_id is null. Must reference an existing, active comment. Cannot
     * be used with post_id in the same request.
     */
    comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The type of vote: 'upvote' or 'downvote'.
     *
     * Specifies whether the user is casting an upvote (+1) or downvote
     * (-1). The system treats these as mutually exclusive alternatives. If
     * the user has already voted on this item, this request will update
     * their vote (toggle), not create a duplicate.
     */
    type: "upvote" | "downvote";
  };

  /**
   * Request body for updating an existing vote on a post or comment.
   * Represents the payload when a user changes their existing vote.
   *
   * This type is used in PATCH /votes and PATCH
   * /communities/{communityId}/posts/{postId}/votes endpoints. The request
   * contains only the new vote type. The target (post_id or comment_id) is
   * identified from the existing vote record using the authenticated user's
   * session.
   *
   * The vote must previously exist. If no previous vote is found, the request
   * is rejected with a 404 error.
   *
   * This is a modified version of IVote.ICreate - only the type field is
   * required, as the target is known from context.
   *
   * Authorization Rule: Only the original voter (or an administrator) can
   * update a vote.
   */
  export type IUpdate = {
    /**
     * The type of vote: 'upvote' or 'downvote'.
     *
     * Specifies whether the user is casting an upvote (+1) or downvote
     * (-1). The system treats these as mutually exclusive alternatives. If
     * the user has already voted on this item, this request will update
     * their vote (toggle), not create a duplicate.
     */
    type: "upvote" | "downvote";
  };
}
