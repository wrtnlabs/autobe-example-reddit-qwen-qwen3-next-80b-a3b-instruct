import { tags } from "typia";

/**
 * Membership record representing a user's relationship with a community.
 *
 * This schema defines the data structure returned when accessing a user's
 * community membership through the system. It represents a record in the
 * community_platform_user_communities junction table that establishes the
 * relationship between a member and a community.
 *
 * The schema includes all essential fields from the underlying database table,
 * including timestamps for when membership was created and last updated, a soft
 * delete marker for when a user leaves a community, and a crucial
 * last_interaction_at field that tracks the user's most recent activity in the
 * community. This field is specifically designed to enable the 'Recent
 * Communities' feature by ordering communities based on activity.
 *
 * The schema follows the business requirement that membership is preserved
 * through soft deletion, allowing users to leave and rejoin communities without
 * losing history. It also supports the ability to track engagement patterns
 * across communities, enabling personalized feed content.
 *
 * Each field corresponds exactly to its respective column in the
 * community_platform_user_communities table, ensuring complete fidelity with
 * the database schema. The structure is simple and focused, containing only the
 * essential information needed to represent the membership relationship.
 *
 * This object is used in responses from endpoints that return membership
 * information, such as retrieving a user's recent communities or listing all
 * communities a user has joined. It provides the complete context needed to
 * implement the home feed filtering and recent communities UI components.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityPlatformUserCommunity = {
  /**
   * Unique identifier for the user-community membership record.
   *
   * This field represents the primary key in the
   * community_platform_user_communities database table. Each record in this
   * junction table has a unique UUID identifier that serves as a reference
   * point for system operations and audit logs.
   *
   * This ID is automatically generated by the system when a new membership
   * relationship is established and is used internally for all database
   * operations. It's not exposed to users in the UI but is necessary for
   * system integrity and potential administrative queries.
   *
   * The UUID format ensures global uniqueness and is used consistently across
   * all system records, following the design pattern in the underlying Prisma
   * schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the user who has membership in the community.
   *
   * This field links the membership record to a specific member in the
   * community_platform_member table. It represents the user who has joined
   * (or previously joined) the community and whose activity is tracked in
   * this membership relationship.
   *
   * This field is critical for enforcing the ownership rules in the system,
   * ensuring that only authenticated users can access their own membership
   * data. The user_id must correspond to a valid member account with no
   * deleted_at timestamp (active account).
   *
   * This relationship enables the system to determine which communities
   * belong to which users for the purpose of the Home feed and 'Recent
   * Communities' list functionality.
   */
  community_platform_user_id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the community the user has joined.
   *
   * This field links the membership record to a specific community in the
   * community_platform_communities table. It represents the community for
   * which this user has membership status.
   *
   * The community_id must correspond to an existing and active community in
   * the system (not deleted). This relationship enables the system to
   * determine which posts to include in a user's Home feed and to populate
   * the 'Recent Communities' sidebar.
   *
   * The system uses this field to join with other tables for data retrieval
   * and to enforce the business rule that users can only interact with
   * communities they have access to.
   */
  community_platform_community_id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the membership relationship was established.
   *
   * This field records when the user first joined the community. It's
   * immutable once set and represents the historical point of entry into the
   * community.
   *
   * This timestamp is used for audit trails and historical analysis of user
   * engagement patterns. It does not affect the display order in the 'Recent
   * Communities' list, which uses last_interaction_at instead, but it's
   * essential for understanding the timeline of user participation.
   *
   * This field directly maps to the created_at column in the
   * community_platform_user_communities database table.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this membership record was last updated.
   *
   * This field is automatically updated whenever there's any activity related
   * to the user in this communityâ€”whether the user joined, posted, commented,
   * or voted. It's also updated when the user leaves and rejoins the
   * community.
   *
   * This field works in conjunction with last_interaction_at to maintain data
   * integrity. While last_interaction_at is updated for all user activities
   * in the community, updated_at is a broader timestamp that reflects any
   * change to the membership record.
   *
   * This field is critical for determining when user activity occurred and
   * ensuring the 'Recent Communities' list remains accurate.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the user left the community, marking membership as
   * inactive.
   *
   * This field implements a soft delete pattern for community memberships.
   * When a user leaves a community, this field is set to the current
   * timestamp, indicating that the membership is no longer active, but the
   * record is preserved for audit purposes.
   *
   * A null value indicates an active membership, while any non-null value
   * indicates the user has left the community. This design allows users to
   * rejoin communities and maintains a complete history of community
   * interactions.
   *
   * This field follows the business rule that membership is managed through a
   * soft-delete mechanism rather than physical deletion, enabling data
   * persistence for analytics and compliance purposes.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Timestamp of the user's most recent activity within this community.
   *
   * This field is updated whenever the user engages with the community in any
   * way: joining, posting, commenting, or voting. It determines the ordering
   * of communities in the 'Recent Communities' sidebar, where the most
   * recently active communities appear first.
   *
   * Each time the user takes an action in the community (creating a post,
   * commenting on a post, or voting on a post or comment), this timestamp is
   * updated to reflect the most recent engagement. This ensures the 'Recent
   * Communities' list accurately represents the user's current interests and
   * activity patterns.
   *
   * This field directly supports the business requirement that the 'Recent
   * Communities' list displays communities ordered by most recent activity,
   * which is critical for personalized content discovery.
   */
  last_interaction_at: string & tags.Format<"date-time">;
};
