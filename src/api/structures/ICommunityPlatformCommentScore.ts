import { tags } from "typia";

/**
 * Denormalized statistics counter for total score (upvotes minus downvotes) of
 * comments. This table is updated atomically on every vote action
 * (upvote/downvote/toggle) to avoid expensive COUNT queries on the
 * community_platform_comment_votes table during comment rendering. Used to
 * calculate and display comment score efficiently on post detail pages and
 * search results. This is a subsidiary table with denormalized data.
 *
 * ### Description of `score` property:
 *
 * > The total score of the comment calculated as (upvotes - downvotes). Updated
 * > atomically on every vote event to optimize high-frequency display of comment
 * > scores in threaded discussions.
 *
 * > This field implements an atomic counter that maintains the net difference
 * > between upvotes and downvotes for each comment. It is updated with each vote
 * > toggle to ensure real-time accuracy in comment rankings, particularly
 * > important for the "Top" sort order in comment threads on post detail pages
 * > and in search results.
 *
 * > Implementing this as a denormalized counter instead of calculating it with
 * > JOIN and COUNT queries on the community_platform_comment_votes table provides
 * > orders-of-magnitude better performance for rendering comment threads. The
 * > atomic update ensures the score remains accurate even during high-concurrency
 * > voting scenarios, allowing for a smooth, responsive user experience with
 * > immediate feedback on vote changes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommentScore = {
  /**
   * The total score of the comment calculated as (upvotes - downvotes).
   * Updated atomically on every vote event to optimize high-frequency display
   * of comment scores in threaded discussions.
   */
  score: number & tags.Type<"int32">;
};
