import { tags } from "typia";

/**
 * Main entity representing user posts in communities. Each post belongs to a
 * community and is authored by a member. Supports soft deletion for content
 * moderation and preserves historical states through snapshots.
 *
 * This model defines the structure of user-generated posts and links them to
 * both their author and their parent community. It supports full text search,
 * voting, and commenting.
 *
 * The schema enforces strict constraints on all fields: title length (5-120
 * characters), body length (10-10,000 characters), and prohibits HTML/code. The
 * table is indexed heavily for fast retrieval of posts by community, author,
 * and search terms.
 *
 * This entity is the cornerstone of user content on the platform. All other
 * entities (votes, comments, searches) reference posts directly or indirectly.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunitybbsPost = {
  /**
   * Primary Key.
   *
   * Unique identifier for the post.
   *
   * This field is auto-generated by the database system and is used as the
   * primary key for all operations related to the post.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the community where this post was created.
   * {@link communitybbs_community.id}.
   *
   * This foreign key links the post to its parent community. The community
   * must exist for the post to be created. It ensures all posts are contained
   * within a valid community context.
   *
   * This field is immutable and set at creation time. It cannot be changed
   * after the post is created.
   */
  communitybbs_community_id: string & tags.Format<"uuid">;

  /**
   * Reference to the member who authored this post.
   * {@link communitybbs_member.id}.
   *
   * This foreign key links the post to its author. The author must be a valid
   * registered member to create a post. This field establishes ownership and
   * enables access control for editing and deletion.
   *
   * This field is immutable and set at creation time. It cannot be changed
   * after the post is created.
   */
  communitybbs_member_id: string & tags.Format<"uuid">;

  /**
   * Title of the post. Must be between 5 and 120 characters according to
   * business requirements. Truncated if longer.
   *
   * This field contains the brief title of the post, used for display in
   * feeds, search, and as a headline.
   *
   * The title must be at least 5 characters long and no longer than 120
   * characters. The system truncates titles exceeding the maximum length
   * during creation or update.
   *
   * This field is indexed for search performance and displayed as a clickable
   * link on the community page.
   */
  title: string & tags.MinLength<5> & tags.MaxLength<120>;

  /**
   * Body content of the post. Must be between 10 and 10,000 characters
   * according to business requirements. Contains plain text only with line
   * breaks. No HTML or code allowed.
   *
   * This field contains the full text content of the post. It accepts plain
   * text with line breaks. No HTML, JavaScript, or other executable code is
   * permitted for security reasons.
   *
   * The body text is truncated during creation or update if it exceeds the
   * 10,000-character limit. The minimum length ensures meaningful content is
   * provided.
   *
   * This field is used for display, full-text search, and comment context.
   */
  body: string & tags.MinLength<10> & tags.MaxLength<10000>;

  /**
   * Display name of the author as shown on the post. If not provided by user,
   * defaults to 'Anonymous'. Truncated to 32 characters if longer. Not a
   * reference to member profile - stored here for consistency even if member
   * changes display name.
   *
   * This field stores the author's display name at the time of posting. It
   * remains static even if the member later changes their display name in
   * their profile. This ensures the post always reflects the author's
   * identity as it was when posted.
   *
   * If unspecified by the user during submission, the system defaults to
   * 'Anonymous'. This field is not a reference to the member table; it is a
   * direct copy of the display name.
   */
  display_name?: (string & tags.MinLength<1> & tags.MaxLength<32>) | undefined;

  /**
   * Timestamp when the post was created. Always set at time of creation and
   * never modified.
   *
   * This field records the exact moment when the post was submitted to the
   * system. It is set by the server and cannot be overridden by clients.
   *
   * This timestamp is used for display (relative time), sorting (Newest/Top),
   * and audit purposes. The timestamp includes timezone information
   * (timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the post was last updated. Set on any edit operation.
   *
   * This field is updated whenever the post's title or body is modified. It
   * captures the most recent change made to the post content.
   *
   * The updated_at timestamp does not change when votes or comments are added
   * - it only reflects modifications to the post body or title. This allows
   * users to see when the content was last revised.
   */
  updated_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Timestamp when the post was soft-deleted. Null if not deleted. Enforces
   * soft-delete policy for content moderation.
   *
   * This field implements soft delete behavior. If set, the post is hidden
   * from public views but remains in the database for audit and potential
   * restoration. A null value indicates the post is still active and
   * visible.
   *
   * When a post is soft-deleted, the deleted_at timestamp is set to the
   * current time. The post can be restored by setting this field to null
   * (admin-only operation).
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace ICommunitybbsPost {
  /**
   * Request body for creating a new post in a community.
   *
   * This schema defines all fields accepted when a member creates a post
   * within a community. It includes the target community, title, body
   * content, and optional display name.
   *
   * The request requires authentication, ensuring that only members can post
   * content. The system does not accept requests from guests, and those
   * attempting to post are redirected to login.
   *
   * The submitted content is validated against strict character limits to
   * ensure quality and prevent abuse. The display_name, if provided, is
   * preserved for historical consistency with the user's profile; it does not
   * update dynamically based on changes to the member's profile.
   */
  export type ICreate = {
    /**
     * Identifier of the community where the post will be created.
     *
     * This field selects the target community for the new post. The user
     * must have a valid session but does not need to be a member of the
     * community to create a post. This design enables cross-community
     * contribution and the "Post in any community" feature.
     *
     * The system validates this ID against the communitybbs_community table
     * to ensure the destination community exists and is active (i.e., has
     * not been deleted). This field is required for all post creation
     * requests.
     */
    communitybbs_community_id: string & tags.Format<"uuid">;

    /**
     * Title of the new post, a concise summary of its content.
     *
     * This field must be between 5 and 120 characters and serves as the
     * headline of the post. It is displayed in feeds, search results, and
     * post detail views, making it critical for attracting attention and
     * enabling discoverability.
     *
     * The system enforces character limits at the API level. Titles shorter
     * than 5 characters or longer than 120 are rejected with an appropriate
     * error message. This ensures UI consistency and prevents technical
     * rendering issues.
     */
    title: string & tags.MinLength<5> & tags.MaxLength<120>;

    /**
     * Main content of the post, written in plain text.
     *
     * This field contains the detailed body of the post, which can be up to
     * 10,000 characters in length. It is restricted to plain text only â€” no
     * HTML, code snippets, or scripts are permitted for security reasons.
     *
     * The system validates the minimum length (10 characters) to ensure
     * submissions have meaningful content. If the content is too short, the
     * system rejects it with a clear message. This prevents spammy or empty
     * posts.
     */
    body: string & tags.MinLength<10> & tags.MaxLength<10000>;

    /**
     * Display name for the post author.
     *
     * This optional field allows the user to override their profile display
     * name for this specific post. It is truncated to 32 characters if
     * longer and is stored in the post record at the time of creation for
     * consistency.
     *
     * Even if the user changes their display name later, this value remains
     * unchanged for historical accuracy. If not provided, the system
     * defaults to 'Anonymous', following the requirement for anonymous
     * posting capability.
     */
    display_name?:
      | (string & tags.MinLength<1> & tags.MaxLength<32>)
      | undefined;
  };

  /**
   * Request parameters for searching and filtering posts by community.
   *
   * This schema defines optional parameters that can be used together to
   * refine results when retrieving posts from a community. It supports
   * pagination and two sorting options: 'Newest' (default) and 'Top'.
   *
   * This type enables clients to provide advanced filtering without requiring
   * multiple dedicated endpoints. The parameters are combined to support full
   * UX flexibility such as paging through 'Top' posts while filtering by
   * search term in the service layer.
   *
   * The structure increases backend simplicity by allowing all post retrieval
   * requests to use the same unified schema, regardless of whether it's
   * called from a home feed, community page, or search context.
   */
  export type IRequest = {
    /**
     * Page number for pagination, starting from 1.
     *
     * This field specifies which page of results to return. If omitted, the
     * default is 1. Page size is fixed at 20 items per page as per business
     * requirements.
     *
     * This enables clients to implement a 'Load more' feature by
     * incrementing this number. It supports memory-safe pagination and
     * prevents API endpoints from returning excessive data volumes.
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /**
     * Number of results per page.
     *
     * This field defines how many posts to return per page. The maximum
     * allowed value is 100 to prevent excessive database load. If omitted,
     * defaults to 20.
     *
     * The limit parameter is constrained to maintain performance and
     * prevent abusive queries that could slow down the entire system.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /**
     * Sort order for post results, determining ranking in feeds and search.
     *
     * This field controls how posts are ordered in lists such as the Home
     * feed, Community home page, or global search results. Accepted values
     * are 'Newest' (default) and 'Top'.
     *
     * The system enforces that only these two values are accepted. The
     * choice of sort order is persisted in the client's local storage so it
     * is remembered on subsequent visits and across pages.
     */
    sort?: "Newest" | "Top" | undefined;
  };

  /**
   * Summary representation of a post for list views and feeds.
   *
   * This entity is used when displaying posts in paginated lists, such as the
   * Home feed, Community Home page, or search results. It contains only the
   * essential fields required for UI rendering: minimal metadata and
   * engagement metrics, without the full post content or author details.
   *
   * The purpose of this summary type is to minimize payload size, improve
   * response times, and reduce bandwidth usage, especially when rendering
   * thousands of posts in a scrollable feed.
   *
   * This structure excludes the post body, author ID, and full creation
   * metadata, as those are only needed when viewing the detailed post page.
   * This separation maintains a clear distinction between list views and
   * detail views.
   */
  export type ISummary = {
    /**
     * Unique identifier of the post.
     *
     * This field is the primary key in the communitybbs_post table,
     * generated automatically as a UUID upon post creation. It uniquely
     * identifies the post in all API interactions, internal links, and
     * database relationships.
     *
     * The post ID is not displayed in URLs or user interfaces where the
     * post title is used for readability. Instead, it is used internally to
     * link the post to its community, author, comments, and votes,
     * maintaining data integrity across all services.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier of the community where the post was created.
     *
     * This field references the parent community in the
     * communitybbs_community table and defines which community's feed will
     * display this post. It ensures posts are grouped under their correct
     * topic area and enables proper user targeting in feeds based on
     * community membership.
     *
     * When a user joins a community, this relationship determines whether
     * posts from that community appear in their home feed. The system
     * verifies this relationship when serving post data to prevent
     * cross-community contamination.
     */
    communitybbs_community_id: string & tags.Format<"uuid">;

    /**
     * Title of the post, displayed as the primary heading.
     *
     * This is the user-submitted title of the post, which must be between 5
     * and 120 characters according to business rules. It serves as the
     * headline for the post and is used in feeds, search results, and post
     * detail views.
     *
     * The title is truncated if it exceeds 120 characters during
     * submission, and it is indexed for search performance. It is one of
     * the primary fields used in community and global search operations to
     * match user queries.
     */
    title: string;

    /**
     * Display name of the post's author as shown on the post.
     *
     * This is the name displayed publicly in the UI instead of the real
     * email-based identifier. It defaults to 'Anonymous' if the user did
     * not provide one during authentication. This field is stored at post
     * creation time so it remains consistent even if the user changes their
     * profile display name later.
     *
     * The display name is capped at 32 characters as required by business
     * rules, ensuring uniform display in all UI contexts and preventing
     * layout overflow in narrow containers.
     */
    display_name?: string | undefined;

    /**
     * Timestamp when the post was created.
     *
     * This immutable field records the exact date and time when the user
     * submitted the post. It is used for sorting posts in 'Newest' order
     * and for chronological context in feeds.
     *
     * The format follows ISO 8601 standard (e.g.,
     * '2025-09-12T09:14:50.108Z'), consistent with database and API
     * standards. This timestamp determines the sequence of posts in all
     * timeline views and cannot be modified after creation.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Total number of comments on this post.
     *
     * This field represents the count of active (not deleted) comments
     * associated with the post. It is calculated via aggregate queries on
     * the communitybbs_comment table and provides a quick metric for
     * engagement.
     *
     * Displaying this count helps users gauge community interest in the
     * post before opening it to view comments. It is updated in real-time
     * as comments are added or deleted, providing accurate feedback on
     * conversation volume.
     */
    comment_count: number & tags.Type<"int32">;

    /**
     * Net vote score of the post (upvotes minus downvotes).
     *
     * This field represents the total reputation or popularity of the post
     * as calculated by subtracting the number of downvotes from the number
     * of upvotes. It is computed dynamically by summing the votes from the
     * communitybbs_vote table.
     *
     * The score is used to sort posts in 'Top' order and influences
     * visibility in feeds and search results. It is recalculated on every
     * vote action and serves as the primary metric for determining content
     * prominence in the user experience.
     */
    score: number & tags.Type<"int32">;
  };

  /**
   * Update payload for modifying an existing post.
   *
   * This schema defines the fields that can be updated after a post has been
   * created. Only the title and body can be modified by the original author.
   * The author identity, community association, and creation timestamp are
   * immutable.
   *
   * This design preserves the historical authenticity of the post while
   * allowing users to correct mistakes, add clarifications, or improve their
   * original message. This reflects the requirement that users can edit their
   * own posts without altering the context or ownership.
   *
   * No other fields can be changed, including display_name which remains
   * fixed to the value at the time of creation to maintain narrative
   * consistency over time.
   */
  export type IUpdate = {
    /**
     * New title for the post, updated to reflect changes in content.
     *
     * This field allows the post author to revise the headline after
     * creation. The title must still meet the 5-120 character limit. If
     * omitted, the original title is preserved.
     *
     * This update is stored as a new version in the post record and
     * triggers an update to the communitybbs_search_post index for search
     * relevance. The system validates length constraints before applying
     * the change.
     */
    title?: (string & tags.MinLength<5> & tags.MaxLength<120>) | undefined;

    /**
     * Updated body content for the post.
     *
     * This field allows the post author to revise the main content of their
     * post after creation. The body must still meet the 10-10,000 character
     * limit. If omitted, the original body is preserved.
     *
     * This update is stored as a new version in the post record and
     * triggers an update to the communitybbs_search_post index for search
     * relevance. The system validates length constraints before applying
     * the change.
     *
     * The update does not modify the post's author, community, or creation
     * time. Only the title and body can be modified, preserving the
     * historical context of the original submission.
     */
    body?: (string & tags.MinLength<10> & tags.MaxLength<10000>) | undefined;
  };
}
