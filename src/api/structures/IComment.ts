import { tags } from "typia";

/**
 * Main entity representing comments on posts. Supports infinite nesting through
 * parent-child relationships. Each comment belongs to a post and may optionally
 * belong to another comment as a reply. Implements soft deletion for
 * moderation.
 *
 * This entity tracks all user comments on posts in the Community BBS platform.
 * Each comment is tied to a specific post and an author. It supports threaded
 * replies through the parentId reference, allowing for deep nesting. Comments
 * have lifetime management through soft deletion (using deleted_at). Display
 * name is captured at creation time to maintain consistency even if the user
 * changes their profile name.
 *
 * Comments are indexed in communitybbs_search_comment for full-text search
 * efficiency. Integration with the voting system allows for upvotes and
 * downvotes tracked in the communitybbs_vote table.
 *
 * Security: Only the author or an administrator can update or delete comments.
 * Guests can view comments, but cannot interact with them.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IComment = {
  /**
   * Primary Key.
   *
   * Unique identifier for the comment.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the post this comment belongs to.
   *
   * This field links the comment to its parent post in the platform. The
   * system enforces that every comment must be associated with exactly one
   * post.
   *
   * This reference ensures that comments are properly nested and displayed in
   * the context of the post they're replying to.
   */
  postId: string & tags.Format<"uuid">;

  /**
   * The display name of the comment's author as it appeared at the time of
   * posting.
   *
   * This captures the author's chosen name at the moment the comment was
   * made. It remains unchanged even if the author later modifies their
   * profile display name.
   *
   * If the author did not specify a display name, this defaults to
   * "Anonymous", ensuring every comment has a visible author attribution.
   */
  author: string;

  /**
   * The unique identifier of the parent comment this is replying to, if
   * applicable.
   *
   * This field enables threaded replies where a comment can be nested beneath
   * another comment.
   *
   * A null value indicates this is a top-level comment on the post.
   *
   * This field allows the system to maintain and display hierarchical
   * relationships in conversations.
   */
  parentId?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Text content of the comment. Must be between 2 and 2,000 characters
   * according to business requirements.
   *
   * The actual text content of the comment, limited to 2,000 characters to
   * maintain readability.
   *
   * Empty comments are not allowed and the system will reject submissions
   * under 2 characters.
   */
  content: string;

  /**
   * The timestamp when the comment was created.
   *
   * This immutable timestamp indicates when the comment was first published
   * to the post thread.
   *
   * It is used for sorting in 'Newest' order and provides users with a sense
   * of recency within the conversation.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * The timestamp when the comment was last updated.
   *
   * This field is updated automatically whenever the comment's content is
   * modified through an edit operation.
   *
   * It is used to identify recently modified comments and is displayed in UIs
   * to indicate recency of edits.
   */
  updated_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * The timestamp when the comment was soft-deleted, if applicable.
   *
   * If this field has a value, the comment has been soft-deleted by a
   * moderator or the author. It will be hidden from public views but retained
   * in the database for audit purposes.
   *
   * If null, the comment is active and visible.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IComment {
  /**
   * Request body for creating a new comment. Represents the input payload
   * when a user submits a comment.
   *
   * This type is used specifically in POST /comments and POST
   * /communities/{communityId}/posts/{postId}/comments endpoints. It captures
   * the minimal content required to create a comment: the parent post and the
   * text content. The parent comment ID is optional for threading. The
   * display name is optional since it defaults to the member's profile name.
   *
   * Fields that are non-editable such as id, created_at, updated_at,
   * deleted_at, and the author's member ID are handled server-side and not
   * included in this type to prevent client-side tampering.
   *
   * This is always submitted by an authenticated member. Guest users cannot
   * access this endpoint.
   *
   * Authorization Rule: Only authenticated members can create comments.
   */
  export type ICreate = {
    /**
     * Reference to the post this comment belongs to.
     * {@link communitybbs_post.id}.
     *
     * The unique identifier of the post this comment is associated with.
     * This is mandatory; a comment cannot exist without a parent post.
     */
    communitybbs_post_id: string & tags.Format<"uuid">;

    /**
     * Reference to the parent comment this is replying to.
     * {@link communitybbs_comment.id}.
     *
     * The unique identifier of the parent comment this is replying to, used
     * for threaded replies. Optional. If not provided, the comment is a
     * top-level comment on the post.
     */
    communitybbs_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Text content of the comment. Must be between 2 and 2,000 characters
     * according to business requirements. Truncated if longer.
     *
     * The actual text content of the comment. Must be at least 2 characters
     * long; any submission below this threshold will be rejected by the
     * system.
     */
    content: string;

    /**
     * Display name of the author as shown on the comment. If not provided
     * by user, defaults to 'Anonymous'. Truncated to 32 characters if
     * longer. Not a reference to member profile - stored here for
     * consistency even if member changes display name.
     *
     * The display name used when showing this comment. If not provided, the
     * system will use the member's default display name from their profile.
     * If provided, it is truncated to 32 characters if it exceeds the
     * limit.
     */
    display_name?: string | null | undefined;
  };

  /**
   * Request body for updating an existing comment. Represents the payload
   * when a user edits their own comment.
   *
   * This type is used in PUT /comments/{commentId} and PUT
   * /communities/{communityId}/posts/{postId}/comments/{commentId} endpoints.
   * All fields are optional, meaning a user may update only the content, only
   * the display_name, or both. If neither is provided, the request will be
   * rejected as empty.
   *
   * The server will validate that the comment exists and the requester is the
   * original author (or an administrator). If the user attempts to edit a
   * comment by another author, the server returns a 403 error.
   *
   * The updated_at timestamp is controlled server-side and not exposed in
   * this request type.
   *
   * Authorization Rule: Only the original author of the comment or an
   * administrator can update it.
   */
  export type IUpdate = {
    /**
     * Text content of the comment. Must be between 2 and 2,000 characters
     * according to business requirements. Truncated if longer.
     *
     * The new text content for the comment. Must be at least 2 characters
     * long. If empty or under limit, the server will return a 400 error.
     */
    content?: string | undefined;

    /**
     * Display name of the author as shown on the comment. If not provided
     * by user, defaults to 'Anonymous'. Truncated to 32 characters if
     * longer. Not a reference to member profile - stored here for
     * consistency even if member changes display name.
     *
     * Updated display name for this comment. Optional. If provided, it must
     * not exceed 32 characters. If omitted, the existing display name
     * remains unchanged.
     */
    display_name?: string | null | undefined;
  };

  /**
   * Simplified representation of a comment for list views and search results.
   *
   * This type is used in paginated responses IPageICommunitybbsComment for
   * global search results under the Comments tab. It includes only essential
   * fields for display in short snippets and avoids exposing parent-child
   * relationships or detailed metadata.
   *
   * Fields including parent_comment_id, updated_at, and deleted_at are
   * intentionally omitted as they are not needed in summary contexts.
   *
   * This type is consumed by IPageICommunitybbsComment to form the data
   * array.
   */
  export type ISummary = {
    /**
     * Primary Key.
     *
     * Unique identifier for the comment.
     *
     * This field is auto-generated and immutable after creation.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Text content of the comment. Must be between 2 and 2,000 characters
     * according to business requirements. Truncated if longer.
     *
     * The textual content of the comment. Shown in summaries as a short
     * excerpt in search and list views.
     */
    content: string;

    /**
     * Display name of the author as shown on the comment. If not provided
     * by user, defaults to 'Anonymous'. Truncated to 32 characters if
     * longer. Not a reference to member profile - stored here for
     * consistency even if member changes display name.
     *
     * The display name used to attribute the comment. This is captured at
     * creation time and does not change even if the member updates their
     * profile.
     */
    display_name: string;

    /**
     * Timestamp when the comment was created. Always set at time of
     * creation and never modified.
     *
     * The time this comment was submitted to the system. Used for sorting
     * and time-based filtering.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Title of the parent post.
     *
     * The title of the post this comment belongs to. Included for context
     * in search results and comment lists.
     */
    post_title: string;

    /**
     * Name of the community containing the post.
     *
     * The name of the community that contains the parent post. Included for
     * context in search results and comment lists.
     */
    community_name: string;
  };

  /**
   * Request parameters for listing comments on a post.
   *
   * Used in the PATCH /communities/{communityId}/posts/{postId}/comments
   * endpoint to filter, sort, and paginate comment results.
   *
   * The parentCommentId field allows filtering of nested comments. All other
   * fields are for pagination and sorting.
   *
   * This type is designed to be IPage.IRequest compatible for consistent
   * pagination.
   */
  export type IRequest = {
    /**
     * Sort order for comments.
     *
     * 'Determines whether comments should be sorted by creation time in
     * ascending or descending order. 'newest' sorts by most recent first,
     * 'oldest' sorts by earliest first.'
     */
    sortBy?: "newest" | "oldest" | undefined;

    /**
     * Number of comments to return per page.
     *
     * Limits the number of comments returned in a single response. Must be
     * between 1 and 100. Default is 20 as specified in requirements.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /**
     * Page number for pagination.
     *
     * The page number to retrieve, where each page contains up to 'limit'
     * comments. 1-indexed.
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /**
     * Reference to the parent comment for filtering nested replies.
     *
     * If provided, only comments replying directly to this parent comment
     * are returned. Used for hierarchical display of comment threads.
     */
    parentCommentId?: (string & tags.Format<"uuid">) | null | undefined;
  };
}
