import { tags } from "typia";

/**
 * Search request parameters for posts with filtering and sorting.
 *
 * This schema defines the structure of the request body for the
 * /communityPlatform/posts endpoint when using the PATCH method for advanced
 * search operations. It enables comprehensive filtering of posts by search
 * term, sort order, pagination, and various criteria.
 *
 * All parameters are designed to work with the community_platform_search_posts
 * materialized view for optimal search performance. The schema enforces
 * business requirements: 20 items per page, minimum 2-character search queries,
 * and the two defined sort methods ('newest' and 'top').
 *
 * The required parameters ensure consistent pagination and search functionality
 * across the platform, while optional parameters provide advanced filtering
 * capabilities for administrative and analytical use cases. This allows users
 * to discover content efficiently through title and body full-text search,
 * filtered by community, author, or time range.
 *
 * This schema supports the platform's core search functionality on the /s page,
 * enabling users to find posts across the entire system with responsive
 * performance, even at scale. It represents the complete set of parameters
 * needed to implement the search functionality as described in the business
 * requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityPlatformPostIRequest = {
  /**
   * Search term to find posts matching the query string.
   *
   * This parameter enables full-text search across post titles and bodies,
   * with a minimum of 2 characters to prevent noisy, low-quality searches.
   * The search is implemented using PostgreSQL's pg_trgm extension for fuzzy
   * matching, ensuring results are returned even with partial matches or
   * typos.
   *
   * The max length of 255 characters prevents excessively long queries that
   * could impact performance or be used for malicious purposes. This
   * parameter supports the platform's global search functionality and is the
   * primary mechanism for users to discover content across the entire
   * platform.
   *
   * When used for the /s/posts tab, this query matches against both title and
   * body fields in the community_platform_search_posts materialized view,
   * providing comprehensive search results. The system returns 20 results per
   * page, with a 'Load more' functionality for pagination.
   */
  query: string & tags.MinLength<2> & tags.MaxLength<255>;

  /**
   * Sorting method for the returned posts.
   *
   * This parameter determines how search results are ordered using two
   * predefined methods:
   *
   * - 'newest': Sorts by created_at field in descending order (most recent
   *   first), with ties broken by the post ID descending.
   * - 'top': Sorts by score (upvotes minus downvotes) in descending order, with
   *   ties broken by created_at descending and then by post ID descending.
   *
   * This directly implements the business requirements for the 'Newest' and
   * 'Top' sort options, aligning with the user experience defined in the home
   * feed and search interfaces. The sorting algorithms are cached and
   * optimized in the community_platform_search_posts materialized view for
   * performance.
   *
   * This parameter is essential for the search feature's core functionality,
   * allowing users to prioritize either recency or community-driven
   * popularity of posts.
   */
  sort: "newest" | "top";

  /**
   * Page number for pagination, starting from 1.
   *
   * This parameter implements paginated search results by dividing the
   * results into 20-item pages as required by the KPI. The page number must
   * be between 1 and 1000 to prevent excessively large result sets that could
   * impact performance.
   *
   * The system responds with 20 items per page, and when a user clicks 'Load
   * more', the page parameter increments by 1 to fetch the next set of
   * results. This design ensures consistent UI behavior across the platform
   * and prevents performance issues from returning massive results in a
   * single request.
   *
   * The page parameter works in conjunction with the limit parameter (which
   * is fixed at 20 for main feeds) to enable the infinite scroll pattern
   * described in the requirements.
   */
  page: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<1000>;

  /**
   * Number of items to return per page, fixed at 20 for main feeds.
   *
   * This parameter defines the pagination size for search results and is
   * absolutely fixed at 20 items per page, as specified in the requirements
   * for main feed pagination. While the schema allows values between 1 and
   * 100, the business requirement mandates exactly 20 items per page, so this
   * field is constrained to a constant value of 20.
   *
   * This ensures consistency in the user interface, where the number of posts
   * visible at once remains constant throughout the application experience.
   * The system ignores any client-side attempts to alter this value,
   * enforcing it server-side for UI predictability and performance
   * optimization.
   *
   * This limit value is specifically intended for the main posts feed,
   * including the home feed and explore feed where displaying more than 20
   * items would overwhelm users and degrade the browsing experience.
   */
  limit: 20;

  /**
   * Optional filter to restrict posts to a specific community.
   *
   * This optional parameter allows users to search posts within a single
   * community rather than across the entire platform. When included, the
   * search is constrained to the community identified by the provided UUID.
   *
   * This parameter is particularly relevant in the community-specific search
   * context, such as when a user is on a particular community page and
   * searches for content within that community. This narrows the result set
   * to a specific sub-community while identifying the corresponding community
   * in the database through the community_id field in the
   * community_platform_search_posts table.
   *
   * When omitted, the search covers all communities, providing platform-wide
   * results. The system uses this filter to efficiently query the
   * community_platform_search_posts materialized view with optimized
   * performance.
   */
  community_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional filter to search for posts by specific author display name.
   *
   * This parameter enables users to find posts created by a specific author,
   * specified by their display name (which becomes 'Anonymous' if not set).
   * The search queries the author_name field in the
   * community_platform_search_posts materialized view, which mirrors the
   * author_display_name field from community_platform_posts table.
   *
   * The length constraint of 32 characters matches the business rule for
   * author display names, which have a maximum length of 32 characters. This
   * parameter is particularly valuable in searches where users want to find
   * content from specific contributors to the platform.
   *
   * When used in conjunction with the query parameter, it allows for advanced
   * searches like finding posts by a specific author on a particular topic,
   * enabling precise content discovery.
   */
  author_name?:
    | (string & tags.MinLength<1> & tags.MaxLength<32>)
    | null
    | undefined;

  /**
   * Filter posts created after the specified timestamp.
   *
   * This optional parameter enables users to search for posts from a specific
   * time period forward. The value must be a valid ISO 8601 date-time string
   * representing the starting point for the search.
   *
   * This filter is particularly useful for exploring recent content,
   * reviewing activity during a specific period, or auditing platform
   * activity. It's applied on the created_at field in the
   * community_platform_search_posts materialized view for efficient range
   * queries.
   *
   * When used with created_before, this forms a time range filter. This
   * functionality supports advanced reports and administrative analytics
   * where users need to examine activity within specific date boundaries.
   */
  created_after?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Filter posts created before the specified timestamp.
   *
   * This optional parameter enables users to search for posts from a specific
   * time period backward. The value must be a valid ISO 8601 date-time string
   * representing the end point for the search.
   *
   * This filter is particularly useful for reviewing old content, comparing
   * time periods, or pagination of historical data. It's applied on the
   * created_at field in the community_platform_search_posts materialized
   * view.
   *
   * When used with created_after, this forms a complete time range filter.
   * This functionality supports advanced reporting capabilities and
   * administrative reviews of past activity on the platform.
   */
  created_before?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Minimum score threshold for returned posts.
   *
   * This optional parameter filters posts to include only those with a score
   * (upvotes minus downvotes) equal to or greater than the specified value.
   * The range allows for negative values, accommodating posts with many
   * downvotes.
   *
   * This parameter is particularly valuable when using top sort mode to
   * identify popular content. It enables users to exclusively see
   * high-quality or widely-approved content, filtering out less popular
   * posts. This matches the business requirement for the 'Top' sort option
   * which prioritizes content by community approval.
   *
   * The score is derived from the community_platform_post_stats denormalized
   * table and is indexed for efficient filtering.
   */
  min_score?:
    | (number &
        tags.Type<"int32"> &
        tags.Minimum<-100000> &
        tags.Maximum<100000>)
    | null
    | undefined;

  /**
   * Maximum score threshold for returned posts.
   *
   * This optional parameter filters posts to include only those with a score
   * (upvotes minus downvotes) equal to or less than the specified value. The
   * range allows for negative values, accommodating posts with many
   * downvotes.
   *
   * This parameter is useful for finding posts with limited community
   * engagement or for studying low-scoring content. When combined with
   * min_score, it creates a score range filter. This functionality supports
   * analytics, moderation, and custom feed experiences for users who want to
   * explore content beyond the most popular items.
   *
   * The score constraint uses the denormalized score from the
   * community_platform_post_stats table which is maintained in real-time by
   * atomic updates.
   */
  max_score?:
    | (number &
        tags.Type<"int32"> &
        tags.Minimum<-100000> &
        tags.Maximum<100000>)
    | null
    | undefined;

  /**
   * Filter to retrieve a specific post by its unique identifier.
   *
   * This optional parameter allows direct access to a single post using its
   * unique UUID identifier. When provided, the system ignores all other
   * search parameters and returns only the post matching the given id (if it
   * exists and is not deleted).
   *
   * This is primarily used for deep linking to specific posts from search
   * results or external sources. It acts as a shortcut to bypass the standard
   * search and filtering process while still validating the post's existence
   * and accessibility.
   *
   * The post_id must correspond to an existing record in the
   * community_platform_posts table that has not been marked as deleted
   * (deleted_at is null).
   */
  post_id?: (string & tags.Format<"uuid">) | null | undefined;
};
