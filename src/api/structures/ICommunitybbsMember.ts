import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents a registered member user of the Community BBS platform.
 *
 * This schema defines the basic account information for authenticated users who
 * can create posts, comments, vote, and join communities.
 *
 * Members have more capabilities than guests but fewer than administrators.
 * They can create and manage their own content but cannot moderate others'
 * content or system settings.
 *
 * This schema provides the minimal necessary context for identifying members in
 * system responses and audit trails.
 *
 * Note that sensitive information like password_hash is never exposed in API
 * responses as per security requirements. Only public profile fields are
 * included.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunitybbsMember = {
  /**
   * Unique identifier for the member account.
   *
   * This UUID is generated by the system upon account creation and serves as
   * the primary key in the communitybbs_member table.
   *
   * It is used to uniquely identify members across all system operations and
   * records.
   *
   * This field is immutable after creation.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The email address associated with the member account.
   *
   * This serves as the primary login identifier for members and must be
   * unique across the system.
   *
   * This field is used to identify members during authentication and for
   * communication purposes.
   *
   * The email must follow standard email format requirements as enforced by
   * the database schema.
   */
  email: string & tags.Format<"email">;

  /**
   * The human-readable display name used for the member in the UI and for
   * content attribution.
   *
   * This name appears on posts, comments, and other user-generated content
   * created by the member.
   *
   * It defaults to the username portion of the email address if not provided
   * during registration.
   *
   * The field is limited to 32 characters to ensure consistent display across
   * UI elements.
   *
   * This display name is stored with each post or comment at creation time to
   * maintain attribution even if the member later changes their profile
   * display name.
   */
  display_name: string & tags.MinLength<1> & tags.MaxLength<32>;

  /**
   * The timestamp when this member account was created.
   *
   * This field records the exact moment the account was registered and is set
   * by the system.
   *
   * This value is immutable and used for audit trails, reporting, and
   * determining account age.
   *
   * The format follows ISO 8601 standard with timezone information.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * The timestamp when this member's profile was last modified.
   *
   * This field is automatically updated whenever any member profile field
   * changes (e.g., display_name property).
   *
   * It does not reflect activity or login events - only changes to the
   * profile data itself.
   *
   * The format follows ISO 8601 standard with timezone information.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ICommunitybbsMember {
  /**
   * Registration request body for creating a new member account.
   *
   * This schema defines the fields accepted for joining the platform as a
   * member. It includes the minimum required information for identity
   * creation: a valid email address and a display name for public
   * representation.
   *
   * While no password is accepted in this request, the server enforces
   * special password policies (minimum length, complexity) and generates a
   * secure bcrypt hash internally. This design ensures sensitive credentials
   * are never transmitted from client to server, following zero-trust
   * security principles.
   *
   * The registration process automatically creates a new session record and
   * issues a JWT token upon successful creation, providing immediate access
   * to member features without requiring an additional login step.
   */
  export type ICreate = {
    /**
     * Email address used for authentication and account recovery.
     *
     * This field serves as the primary login credential for member
     * accounts. It must be a valid email format and unique across all users
     * in the communitybbs_member table as enforced by database
     * constraints.
     *
     * The system uses this email to send notifications, password reset
     * links, and account verification messages. It is never displayed
     * publicly and is stored securely with hashed encryption.
     */
    email: string & tags.Format<"email">;

    /**
     * Display name for public presentation of the member.
     *
     * This is the name that appears on posts, comments, and other public
     * content. It must be between 1 and 32 characters and can include
     * letters, numbers, hyphens, and underscores. If a display name is not
     * provided, the system defaults to 'Anonymous' in user-facing
     * interfaces.
     *
     * The display name is stored directly in the member record but is never
     * used for authentication or system logic. Users may change this name
     * later through their profile settings, and the change is reflected in
     * future posts and comments.
     */
    display_name: string & tags.MinLength<1> & tags.MaxLength<32>;
  };

  /**
   * Authorization response containing JWT token for authenticated members.
   *
   * This response structure is returned after successful login or
   * registration of a member. It contains the minimal essential information
   * needed for client-side session maintenance: the unique member ID and a
   * secure authentication token.
   *
   * This type deliberately omits any sensitive information like email,
   * password_hash, or display_name to prevent credential leakage. Only the
   * member ID is exposed for client-side identification, while all other
   * details are retrieved on-demand via protected API endpoints.
   *
   * The token provides secure access to all member-enabled features including
   * posting, commenting, voting, and joining communities, following the
   * principle of least privilege. This minimal design enhances security while
   * maintaining usability.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated member.
     *
     * This field represents the primary key of the member record in the
     * communitybbs_member table. It is used to uniquely identify the user
     * across all system operations, including content creation, voting, and
     * community management. This ID is generated upon account creation and
     * remains immutable throughout the user's lifecycle.
     *
     * The identifier ensures proper association of all user-generated
     * content with their account while maintaining privacy by not exposing
     * personal information like email.
     */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request body for member login containing email and password for
   * authentication.
   *
   * This schema defines the data structure for authenticating an existing
   * member through the login endpoint. It captures the minimal credentials
   * required for session establishment: email and password. The system
   * validates these against the communitybbs_member table and issues a new
   * session upon successful verification.
   */
  export type ILogin = {
    /**
     * Registered email address of the member, used as login identifier.
     * Must match an existing record in communitybbs_member.email.
     *
     * This field is required for authenticating existing users. The system
     * performs case-insensitive matching against the unique email index in
     * the database. The email must be valid and correspond to an existing
     * member account.
     */
    email: string & tags.Format<"email">;

    /**
     * Plain-text password provided by user. Verified against stored
     * password_hash in communitybbs_member using BCrypt algorithm.
     *
     * The system compares this value with the stored password_hash using
     * BCrypt hashing. This field is required for all login attempts and
     * must match the encrypted value stored in the database. Passwords are
     * never stored or transmitted in plaintext.
     */
    password: string & tags.MinLength<8>;
  };

  /**
   * Request body for token refresh operation with refresh token in header.
   *
   * This schema defines an empty request body since token refresh is
   * performed using the Authorization header. The refresh token must be
   * presented in the header as a Bearer token. This empty object structure
   * indicates no request body is needed - the operation relies entirely on
   * the token provided in the HTTP header.
   */
  export type IRefresh = {};

  /**
   * Request parameters for listing members in administrative views.
   *
   * Used in the GET /admin/members endpoint to filter, sort, and paginate the
   * list of members for administrative review.
   *
   * This type is designed to be IPage.IRequest compatible for consistent
   * pagination.
   */
  export type IRequest = {
    /**
     * Keyword for full-text search across member email or display_name.
     *
     * A search term used to find members by email address or display name.
     * Must be at least 2 characters.
     */
    search?: (string & tags.MinLength<2>) | undefined;

    /**
     * Field to sort members by.
     *
     * Sorts the result list by email, display_name, or account creation
     * date. Default is email.
     */
    sortBy?: "email" | "display_name" | "created_at" | undefined;

    /**
     * Sort direction.
     *
     * Either 'asc' for ascending or 'desc' for descending order.
     */
    sortOrder?: "asc" | "desc" | undefined;

    /**
     * Number of members to return per page.
     *
     * Limits the number of members returned in a single response. Maximum
     * is 50 for performance. Default is 20.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<50>)
      | undefined;

    /**
     * Page number for pagination.
     *
     * The page number to retrieve, where each page contains up to 'limit'
     * members. 1-indexed.
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;
  };
}
