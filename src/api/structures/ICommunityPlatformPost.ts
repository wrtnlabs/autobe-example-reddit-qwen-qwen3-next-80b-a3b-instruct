import { tags } from "typia";

/**
 * Full post object representing a user's contribution to a community.
 *
 * This schema defines the complete structure of a post returned by endpoints
 * that retrieve post details, such as the single post endpoint
 * (/communityPlatform/posts/{postId}) and when posts are fetched for display in
 * feeds.
 *
 * It includes all core fields from the community_platform_posts database table:
 * the unique identifier, community and author references, title and body
 * content, author display name, and timestamps for creation and updates. It
 * also includes the soft delete flag (deleted_at) which determines visibility.
 *
 * The schema enforces all business rules regarding field constraints: the title
 * must be 5-120 characters, the body 10-10,000 characters, and the author
 * display name 0-32 characters (with default rendering as 'Anonymous'). The
 * timestamps are maintained in UTC as ISO 8601 strings but are displayed
 * locally in the user's timezone (Asia/Seoul).
 *
 * This object constitutes the tangible content unit of the platform, providing
 * users with the complete context of any contribution. The structure supports
 * the fundamental operations of the system: reading, authoring, editing, and
 * deleting posts. The information here is exposed to users through the home
 * feed, community pages, and search results, providing the foundational data
 * layer for the entire platform's content delivery.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPost = {
  /**
   * Unique identifier for the post.
   *
   * This field represents the primary key in the community_platform_posts
   * database table. Each post on the platform is assigned a unique UUID
   * identifier upon creation, which is used as the reference point for all
   * interactions with the post, including comments, votes, and updates.
   *
   * This ID is generated by the system and cannot be modified after creation.
   * It serves as the immutable reference for linking the post with its
   * associated data in related tables such as community_platform_comments and
   * community_platform_post_votes.
   *
   * The UUID format ensures global uniqueness across the entire platform and
   * is consistent with the design pattern used throughout the system for
   * entity identification.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the community where this post was created.
   *
   * This field links the post to a specific sub-community in the
   * community_platform_communities table. It determines which community's
   * feed the post appears in and is critical for enforcing the business rule
   * that each post must be associated with exactly one community.
   *
   * The system validates that the community_id corresponds to an existing and
   * active community (not deleted) before allowing a post to be created. This
   * relationship enables the platform to organize content meaningfully and
   * provides context for users navigating to specific communities.
   *
   * This foreign key relationship ensures data integrity and enables
   * efficient querying of all posts within a particular community for display
   * purposes.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * Foreign key reference to the member who authored this post.
   *
   * This field links the post to the member account in the
   * community_platform_member table that created the post. This connection
   * enforces the business rule that users can only edit or delete their own
   * content, as the owner of the post is the member with this ID.
   *
   * The system uses this field to establish ownership and permission
   * controls. When a user attempts to edit or delete a post, the system
   * compares the authenticated user's ID with this author_id to verify
   * authorization.
   *
   * This relationship is also used to associate communities with their active
   * contributors and for administrative functions, such as managing abusive
   * behavior by identifying authors of objectionable content.
   */
  author_id: string & tags.Format<"uuid">;

  /**
   * Title of the post, with a character limit of 5-120.
   *
   * This field contains the headline of the post and must be at least 5
   * characters and no more than 120 characters in length, as specified by the
   * business rules. The title serves as the primary summary of the post's
   * content and is used for display in feeds, search results, and home
   * pages.
   *
   * The system validates this constraint at both client and server levels,
   * preventing posts with titles that are too short or too long from being
   * created. This ensures consistency in content presentation and improves
   * the user experience by preventing overly long or meaningless titles.
   *
   * The title field is indexed for full-text search to enable efficient
   * discovery through the global search functionality on the /s page,
   * matching against both the title and body fields in the
   * community_platform_search_posts materialized view.
   */
  title: string & tags.MinLength<5> & tags.MaxLength<120>;

  /**
   * Content body of the post, with a character limit of 10-10,000.
   *
   * This field contains the main text content of the post, which must be
   * between 10 and 10,000 characters in length. It contains only plain text
   * with line breaks (\n); no HTML, JavaScript, or other executable code is
   * allowed.
   *
   * This constraint ensures posts contain meaningful content while preventing
   * excessively long submissions that could degrade performance or overwhelm
   * readability. The body field supports rich discussions while maintaining
   * usability on various devices.
   *
   * The system validates this constraint before save and strips any non-text
   * elements from the content. This field is also used for full-text search
   * in the community_platform_search_posts materialized view, enabling users
   * to find posts based on their content.
   */
  body: string & tags.MinLength<10> & tags.MaxLength<10000>;

  /**
   * Optional display name for the author, with a maximum length of 32
   * characters.
   *
   * This field allows the author to specify a custom display name that will
   * appear with the post instead of their full email or Username. If not
   * provided (null or empty), the system displays 'Anonymous' as the author
   * name.
   *
   * The 32-character limit ensures display names are concise and consistent
   * with UI design requirements, preventing obscenely long names that could
   * break layouts. This provides flexibility for authors to use pseudonyms or
   * nicknames while maintaining accessibility.
   *
   * This value is stored as provided in the database and only used for
   * display purposes; it has no effect on user identity or permissions. The
   * system never overwrites this field unless explicitly updated by the
   * author.
   */
  author_display_name?:
    | (string & tags.MinLength<0> & tags.MaxLength<32>)
    | null
    | undefined;

  /**
   * Timestamp when the post was created.
   *
   * This field records the exact date and time when the post was first
   * created and persisted in the system. It's an immutable field that never
   * changes, even when the post is edited later.
   *
   * This timestamp is used for determining the 'Newest' sort order, ensuring
   * posts are displayed in chronological sequence. It's also used in the
   * 'Top' sort algorithm when tie-breaking among posts with identical
   * scores.
   *
   * The system automatically sets this value upon creation, and it's used to
   * calculate relative timestamps displayed to users as 'X minutes ago' in
   * their local timezone (Asia/Seoul).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the post was last updated.
   *
   * This field is automatically updated every time the author modifies the
   * post's title or body content. It tracks the most recent edit to the post,
   * allowing users to know when content was last changed.
   *
   * This field is used to display an 'edited' label on the UI (e.g., 'edited
   * 3 hours ago') when the updated_at timestamp differs from created_at. It
   * does not change for votes or comments on the postâ€”only for edits to the
   * post's core content.
   *
   * The system ensures this timestamp is always updated atomically and
   * reliably when a post is modified, enabling accurate tracking of content
   * changes for transparency and moderation purposes.
   */
  updated_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Timestamp when the post was deleted.
   *
   * This field implements a soft delete mechanism, distinguishing between
   * active and deleted posts. When null, the post is active and visible in
   * all feeds. When set to a timestamp, the post is considered deleted and is
   * hidden from all user-facing views.
   *
   * The system does not physically remove deleted posts from the database;
   * instead, it uses this field to filter them out while preserving audit
   * trail data for compliance and administrative purposes.
   *
   * This approach allows for recovery of accidentally deleted posts while
   * maintaining data integrity. When a post is deleted, the system sets this
   * field to the current timestamp, triggers updates to related tables (such
   * as community counts and search indexes), and prevents the post from
   * appearing in any user's feed.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ICommunityPlatformPost {
  /**
   * Request payload for creating a new post in the community platform.
   *
   * This schema defines the mandatory and optional fields required to create
   * a new post in the system, capturing the essential information a member
   * needs to contribute content to a community.
   *
   * The schema enforces strict validation rules for the title (5-120
   * characters) and body (10-10,000 characters) to ensure content quality and
   * readability. It also supports optional author display names to
   * accommodate user preferences.
   *
   * This type is exclusively used in the POST /communityPlatform/member/posts
   * endpoint and is validated against server-side constraints before
   * persistence. The system automatically assigns the authenticated user's ID
   * as the author_id and sets the creation timestamp, so these fields are not
   * included in the request.
   */
  export type ICreate = {
    /**
     * The unique identifier of the community where this post will be
     * created.
     *
     * This value corresponds to the community_platform_communities.id field
     * in the database and is required to establish the relationship between
     * the post and its target community.
     *
     * A valid UUID must be provided that references an existing community
     * record. The system validates that the community exists and is not
     * deleted before processing the request.
     */
    community_id: string & tags.Format<"uuid">;

    /**
     * The title of the post, which must be between 5 and 120 characters
     * inclusive.
     *
     * This field represents the main headline or subject of the post and
     * serves as a summary for readers. It is used in feeds, search results,
     * and page titles. The business rules require that the title be concise
     * yet informative to facilitate content discovery.
     *
     * If the title is shorter than 5 characters or exceeds 120 characters,
     * the system will reject the request with a validation error.
     */
    title: string & tags.MinLength<5> & tags.MaxLength<120>;

    /**
     * The main content of the post, containing between 10 and 10,000
     * characters of plain text.
     *
     * This field holds the substantial narrative or information the user
     * wishes to share with the community. It must contain only plain text
     * with line breaks (\n); no HTML, JavaScript, or executable content is
     * permitted.
     *
     * The system validates the character count and strips any disallowed
     * formatting before storage. If the content is below 10 characters or
     * exceeds 10,000 characters, the system will reject the request.
     */
    body: string & tags.MinLength<10> & tags.MaxLength<10000>;

    /**
     * An optional display name for the author of the post.
     *
     * If provided, this field overrides the default author name. It can be
     * up to 32 characters long and contains only alphanumeric characters
     * and spaces. If omitted (null) or left empty, the system will display
     * "Anonymous" as the author's name in all UI contexts.
     *
     * This field supports user personalization while maintaining privacy,
     * as it is not linked to the user's email or account identifier.
     */
    author_display_name?:
      | (string & tags.MinLength<0> & tags.MaxLength<32>)
      | null
      | undefined;
  };

  /**
   * Partial update payload for modifying an existing post's content.
   *
   * This schema represents the fields that can be updated in a post,
   * following the patch pattern where each field's value is optional. The
   * system treats null or omitted fields as "no change" instructions.
   *
   * Only the title and body can be updated; fields like community_id,
   * author_id, created_at, and author_display_name are immutable after
   * creation, ensuring content ownership and historical fidelity. This schema
   * supports the business requirement that users can edit their own posts
   * while preventing unauthorized changes to metadata.
   *
   * This type is exclusively used in the PUT
   * /communityPlatform/member/posts/{postId} endpoint and requires
   * authentication and ownership validation before any update can be
   * processed.
   */
  export type IUpdate = {
    /**
     * The updated title of the post, between 5 and 120 characters
     * inclusive.
     *
     * This field can be provided to modify the post's headline. If null is
     * provided, the title remains unchanged. The system validates against
     * the 5-120 character constraint for any provided value.
     *
     * This field supports the business requirement that users can edit the
     * content of their own posts while maintaining the requirement for
     * concise, informative titles.
     */
    title?:
      | (string & tags.MinLength<5> & tags.MaxLength<120>)
      | null
      | undefined;

    /**
     * The updated content of the post, between 10 and 10,000 characters of
     * plain text.
     *
     * This field can be provided to modify the body of the post. If null is
     * provided, the body remains unchanged. The system validates that any
     * provided content meets the 10-10,000 character constraint and
     * contains only plain text with \n line breaks.
     *
     * This field enables users to refine their posts over time while
     * ensuring content quality and preventing abuse through excessively
     * long or improperly formatted content.
     */
    body?:
      | (string & tags.MinLength<10> & tags.MaxLength<10000>)
      | null
      | undefined;
  };

  /**
   * Request parameters for retrieving a paginated, filtered, and sorted list
   * of posts.
   *
   * This schema defines the query parameters for GET and PATCH requests that
   * retrieve lists of posts from the platform, used in the Home feed,
   * Community Home, Global Search (Posts tab), and Explore views.
   *
   * It supports pagination (page, limit), sorting (sort), full-text search
   * (q), and community filtering (community_id). These parameters work
   * together to generate highly customizable feeds optimized for performance
   * and user experience.
   *
   * The schema follows core business requirements: pagination is capped at 20
   * items per page for main feeds, search requires 2+ character queries, and
   * sort options are limited to Newest and Top with specific tie-breaking
   * rules.
   *
   * This is not a mutation schema - it's purely for reading and filtering. It
   * does not require authentication, as reading posts is open to everyone.
   * However, the response content may be filtered based on the user's
   * membership status if they are authenticated - that logic is handled
   * server-side, not in this schema.
   */
  export type IRequest = {
    /**
     * The page number of results to retrieve.
     *
     * This parameter controls pagination of post lists in the Home feed,
     * search results, and community feeds. It must be a positive integer
     * starting at 1.
     *
     * When querying for posts, this value determines which 20-item subset
     * of the sorted list is returned. The first page (page=1) returns the
     * first 20 posts, the second page (page=2) returns the next 20, and so
     * on.
     *
     * This field is optional and defaults to 1. If a user requests a page
     * that exceeds the total number of pages, an empty data array is
     * returned without error, following the platform's optimistic UI
     * pattern.
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /**
     * The number of posts to return per page.
     *
     * This parameter controls pagination size for post lists. It must be an
     * integer between 1 and 100.
     *
     * CORE BUSINESS RULE: This parameter MUST be set to 20 for main feed
     * pagination views as defined in requirements. This ensures consistent
     * user experience, with exactly 20 post cards displayed per page in the
     * Home feed, Community Home, and search results.
     *
     * The limit can be overridden only for testing purposes - the
     * production system enforces 20 posts per page as the standard. This
     * value is not configurable by the end-user and is hard-coded in the
     * business logic.
     *
     * The maximum limit of 100 prevents excessive payload sizes and
     * denial-of-service attacks by commanding large result sets.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;

    /**
     * The sorting criteria to apply to the list of posts.
     *
     * This parameter determines the order in which posts are returned in
     * feed and search results.
     *
     * Two options are supported:
     *
     * - "newest": Sorts by creation time (created_at) descending, and if
     *   equal, by post ID descending. This shows the most recently created
     *   posts first.
     * - "top": Sorts by score (upvotes minus downvotes) descending, and if
     *   equal, by creation time descending, then by post ID descending.
     *   This shows the most popular posts first.
     *
     * The default is "newest", consistent with the UI precision where the
     * Home feed initially loads newest content. This field is essential for
     * implementing the two core feed viewing modes as required by user
     * experience.
     *
     * Regardless of sorting, the results always respect the user's
     * membership status: only posts from joined communities appear in the
     * authenticated user's Home feed.
     */
    sort?: "newest" | "top" | undefined;

    /**
     * The search query term for filtering posts by content.
     *
     * This parameter enables full-text search across post titles and
     * bodies. Queries must be at least 2 characters long, as per the
     * business requirement for search minimum length.
     *
     * The query is matched against the title and body fields using
     * full-text search with pg_trgm extensions for fuzzy matching. This
     * allows users to find posts using keywords, phrases, or partial
     * matches.
     *
     * The maximum length of 100 characters prevents excessively long search
     * strings that could degrade performance. When this field is used, it
     * overrides the default 'newest' sort, applying an algorithmic
     * relevance ranking based on word match and position.
     *
     * If the query is empty or less than 2 characters, the operation
     * returns a 400 error immediately without querying the database.
     */
    q?: (string & tags.MinLength<2> & tags.MaxLength<100>) | undefined;

    /**
     * The unique identifier of the community to filter posts by.
     *
     * This parameter restricts search results or feed views to only posts
     * from a specific community.
     *
     * This field is optional and used when a user navigates to a specific
     * community page (e.g., /c/ai) or when filtering a search by community.
     * When provided, results are limited to posts where the community_id
     * matches exactly.
     *
     * This allows for targeted navigation and does not require the user to
     * be a member of the community to view its posts - reading is open to
     * everyone. However, when used with authentication, it helps
     * personalize the Home feed to show only posts from joined
     * communities.
     */
    community_id?: (string & tags.Format<"uuid">) | undefined;
  };

  /**
   * Response schema representing the voter's current state on a specific
   * post.
   *
   * This type defines the structure of the data returned by the PATCH
   * /communityPlatform/member/posts/{postId}/votes endpoint, which retrieves
   * the authentication user's voting status on a post.
   *
   * It contains a single string property 'state' with three possible values:
   * 'upvote', 'downvote', or 'none'. These correspond exactly to the
   * algorithmic rules described in requirements: upvote transitions to
   * downvote or none; downvote transitions to upvote or none; no vote is
   * 'none'.
   *
   * This schema is critical for implementing the voting UI pattern where the
   * user's current state is required prior to interaction. The browser needs
   * to know: 1) if the user has voted, and 2) what direction they voted in,
   * to correctly render the states of the upvote and downvote buttons.
   *
   * It is not used for setting votes (that uses
   * ICommunityPlatformPost.ICreateVote), but only for querying the existing
   * state. This separation ensures clear responsibilities and avoids race
   * conditions in state management. The response is always a single object
   * with this one field, minimizing bandwidth and maximizing clarity for
   * client-side state management.
   */
  export type IVoteState = {
    /**
     * The current vote state of the authenticated user on this post.
     *
     * This field indicates whether the user has upvoted, downvoted, or not
     * voted at all on the specified post.
     *
     * The value 'upvote' means the user has cast an upvote that is still
     * active.
     *
     * The value 'downvote' means the user has cast a downvote that is still
     * active.
     *
     * The value 'none' means the user has not voted on this post, or has
     * previously voted but clicked the same button again to remove their
     * vote.
     *
     * This state is determined by checking the
     * community_platform_post_votes table for a record where the post_id
     * and user_id match. If no record exists, the state is 'none'. If a
     * record exists, its vote_state field value is returned.
     *
     * This structure enables optimistic UI updates: when a user clicks to
     * upvote or downvote, the UI immediately displays the selected state
     * based on this response before the server confirms the action. If the
     * server operation fails, the UI can revert to this previous state.
     * This design ensures a responsive, seamless user experience in
     * low-bandwidth conditions.
     */
    state: "upvote" | "downvote" | "none";
  };

  /**
   * Represents the payload for creating or toggling a user's vote on a post.
   *
   * This type is used when a user interacts with the upvote or downvote
   * buttons on a post. The system uses this payload to determine the next
   * state of the vote, whether creating a new vote, toggling between upvote
   * and downvote, or removing the vote entirely.
   *
   * The component only requires a single field: vote_state, which indicates
   * the target state. The server logic handles the transition from the
   * current state (none, upvote, or downvote) to the requested state
   * according to business rules.
   *
   * This design avoids the need for multiple endpoints for each possible
   * state change and allows the client to handle voting as a single
   * interaction with consistent semantics.
   *
   * Security Note: This operation is protected by authentication. Users
   * cannot vote on their own posts. If the request comes from the post's
   * author, the server will reject it with a 403 Forbidden response and
   * display: "You can't vote on your own posts/comments."
   */
  export type ICreateVote = {
    /**
     * The desired vote state to apply to the post. Must be either 'upvote'
     * or 'downvote'.
     *
     * This field is used to indicate the user's intent regarding their vote
     * on the post. The system will interpret this value to determine
     * whether to create a new vote record or toggle an existing vote from
     * one state to another.
     *
     * - When a user has no existing vote on the post, submitting 'upvote'
     *   will create a new upvote record.
     * - When a user has no existing vote on the post, submitting 'downvote'
     *   will create a new downvote record.
     * - When a user has an existing upvote, submitting 'downvote' will change
     *   the vote to downvote.
     * - When a user has an existing downvote, submitting 'upvote' will change
     *   the vote to upvote.
     * - When a user has an existing vote of either type and submits the same
     *   vote state, the system will remove the vote (set to 'none').
     *
     * The value is case-sensitive and must match exactly one of the
     * permitted enum values. Any other values will result in a 400 Bad
     * Request response.
     */
    vote_state: "upvote" | "downvote";
  };
}
