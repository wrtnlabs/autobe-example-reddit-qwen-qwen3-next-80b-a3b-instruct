import { tags } from "typia";

/**
 * Denormalized statistics counter for member count of communities. This table
 * is updated atomically on every user join or leave action to avoid expensive
 * COUNT queries on the community_platform_user_communities junction table
 * during feed rendering. Used by the home page to display member counts as 1k,
 * 10k, etc. This is a subsidiary table with denormalized data that supports
 * high-frequency read operations.
 *
 * The member_count field is maintained as an atomic counter that is incremented
 * when a user joins a community and decremented when a user leaves. This
 * denormalized approach avoids expensive COUNT queries on the junction table
 * during high-frequency render operations on the home feed and community pages.
 * The value is displayed with abbreviated formatting for user experience (e.g.,
 * 1,000 → '1k', 10,000 → '10k', 1,000,000 → '1m'), but the API returns the raw
 * integer value for internal logic and calculations.
 *
 * This field is critical for performance, as real-time display of member counts
 * would be too slow using JOIN and COUNT operations on the
 * community_platform_user_communities table when there are millions of members
 * across all communities. The atomic updates ensure accuracy while maintaining
 * sub-millisecond query performance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityStats = {
  /**
   * The current number of members in this community. Updated atomically on
   * every join/leave action. Never exceeds 10M and is formatted as 1k, 10k,
   * 1m in UI.
   *
   * The member_count field is maintained as an atomic counter that is
   * incremented when a user joins a community and decremented when a user
   * leaves. This denormalized approach avoids expensive COUNT queries on the
   * junction table during high-frequency render operations on the home feed
   * and community pages. The value is displayed with abbreviated formatting
   * for user experience (e.g., 1,000 → '1k', 10,000 → '10k', 1,000,000 →
   * '1m'), but the API returns the raw integer value for internal logic and
   * calculations.
   *
   * This field is critical for performance, as real-time display of member
   * counts would be too slow using JOIN and COUNT operations on the
   * community_platform_user_communities table when there are millions of
   * members across all communities. The atomic updates ensure accuracy while
   * maintaining sub-millisecond query performance.
   */
  member_count: number & tags.Type<"int32">;
};
