import { tags } from "typia";

/**
 * Full representation of a post object returned by the system.
 *
 * This schema defines the complete structure of a post as returned in responses
 * to GET requests (e.g., /communities/{communityId}/posts/{postId}). It
 * includes all data necessary for rendering a detailed post view, including the
 * author information, content, metadata, and community context.
 *
 * The schema strictly follows the communitybbs_post table structure and
 * includes both directly stored fields (title, body, timestamps) and computed
 * fields (score, comment_count) for efficient frontend rendering.
 *
 * All fields are populated based on the data in the underlying database and
 * conform to the business logic: the title and body have strict length
 * constraints, timestamps are ISO 8601, and the score and comment_count reflect
 * real-time community engagement.
 *
 * This type is used for full post detail views and is distinct from summary
 * representations used in feeds and search results, which include only
 * essential fields for performance optimization.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IPost = {
  /**
   * Unique identifier for the post.
   *
   * This is a system-generated UUID assigned when the post is created. It
   * serves as the primary key for the post in the database and is used to
   * uniquely identify and reference the post in all API interactions,
   * including updates, deletions, and comment nesting.
   *
   * The post ID is immutable and never changes after creation. It is used in
   * URLs and API paths to access the post (e.g.,
   * /communities/{communityId}/posts/{postId}).
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the community where the post was created.
   *
   * This is a foreign key that links the post to its parent community. It is
   * required and set at the time of post creation and cannot be changed
   * afterward.
   *
   * The community ID ensures that each post has a clear context and is
   * associated with one and only one community, which determines the feed in
   * which it appears for community members.
   */
  communityId: string & tags.Format<"uuid">;

  /**
   * The display name of the post's author, as it appeared at the time of
   * posting.
   *
   * This field is captured from the member's display_name when the post is
   * created and stored as text rather than a reference. This ensures that
   * even if the member later changes their profile display name, the post
   * retains the original name it was posted under.
   *
   * If the member did not specify a preferred display name upon posting, this
   * field defaults to "Anonymous".
   */
  author: string;

  /**
   * The title of the post.
   *
   * This is a required field with a length constraint of 5 to 120 characters.
   * It provides a brief summary of the post's content and is used to display
   * in feeds, search results, and lists.
   *
   * The title is indexed for full-text search and is used when users search
   * for posts by keywords. It is truncated if longer than 120 characters upon
   * submission.
   */
  title: string & tags.MinLength<5> & tags.MaxLength<120>;

  /**
   * The main body content of the post.
   *
   * This is a required field with a length constraint of 10 to 10,000
   * characters. It contains the detailed content of the post and must be
   * plain text only (no HTML, scripts, or code allowed).
   *
   * The body is used for full-text search and is displayed in post detail
   * pages. It is truncated if longer than 10,000 characters upon submission.
   */
  body: string & tags.MinLength<10> & tags.MaxLength<10000>;

  /**
   * The timestamp when the post was created.
   *
   * This is a system-generated timestamp set exactly once at the time of post
   * creation. It is immutable and used for sorting in "Newest" order and for
   * audit purposes.
   *
   * This field corresponds to the created_at column in the communitybbs_post
   * table and is stored in UTC in ISO 8601 format.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * The timestamp when the post was last updated.
   *
   * This field is automatically updated by the system whenever the post's
   * title or body is modified through an update operation. It is set to the
   * current timestamp during each update.
   *
   * This field is used to identify recently modified posts and is displayed
   * in UIs to indicate recency of edits.
   */
  updated_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * The timestamp when the post was soft-deleted, if applicable.
   *
   * If this field is null, the post is active. If set to a timestamp, it
   * means the post has been soft-deleted (archived) and is hidden from public
   * views.
   *
   * The system does not physically remove the post from the database when
   * deleted; instead, it marks it as deleted by setting this field. This
   * allows for audit trails and potential recovery.
   *
   * This field corresponds to the deleted_at column in the communitybbs_post
   * table and is used to filter out deleted posts from feeds and search
   * results.
   *
   * Note: Some API endpoints perform hard deletion (removing the record
   * entirely), but in this schema, soft deletion is preferred for data
   * integrity.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * The calculated score of the post, defined as the number of upvotes minus
   * the number of downvotes.
   *
   * This field is a computed value derived from the communitybbs_vote table.
   * It represents community sentiment toward the post and is used for sorting
   * in "Top" order.
   *
   * The score is calculated dynamically at query time by summing all votes
   * for the post. It is denormalized here for performance reasons.
   */
  score: number & tags.Type<"int32">;

  /**
   * The total number of comments associated with this post.
   *
   * This field is a denormalized count of all non-deleted comments linked to
   * the post via the communitybbs_comment.post_id foreign key.
   *
   * It is updated automatically whenever a comment is added or deleted and
   * provides a quick indication of discussion volume without requiring a join
   * to the comments table.
   */
  comment_count: number & tags.Type<"int32">;
};
export namespace IPost {
  /**
   * Request body for updating an existing post.
   *
   * This object contains optional fields that can be modified by the post's
   * author. Only the title and body can be updated; other fields such as
   * communityId, author, and timestamps are immutable to preserve content
   * integrity and audit trail.
   *
   * The update operation is performed as a partial update: only fields
   * provided in the request are modified. The server's updated_at field is
   * automatically set to the current timestamp upon successful update.
   *
   * This update type aligns with the communitybbs_post table's writable
   * fields (title and body) and respects the business requirement that users
   * can edit their own posts. The system enforces ownership verification
   * before any change: the authenticated user must be the post's author, as
   * determined by memberId.
   *
   * This request type is used exclusively for PUT
   * /communities/{communityId}/posts/{postId} and ensures that modifications
   * are minimal and well-constrained, preventing unauthorized changes to
   * critical metadata.
   */
  export type IUpdate = {
    /**
     * The updated title of the post. Must be between 5 and 120 characters.
     *
     * This field is optional. If omitted, the title remains unchanged. If
     * provided, it must meet the length requirements. The title is used for
     * search indexing and display in feeds and lists.
     *
     * Validation prevents empty titles and titles longer than 120
     * characters.
     *
     * This field corresponds to the title column in the communitybbs_post
     * table and will be updated when this request is processed.
     */
    title?: (string & tags.MinLength<5> & tags.MaxLength<120>) | undefined;

    /**
     * The updated body content of the post. Must be between 10 and 10,000
     * characters.
     *
     * This field is optional. If omitted, the body remains unchanged. If
     * provided, it must meet the length requirements and contain only plain
     * text (no HTML, scripts, or code allowed). The body is the main
     * content of the post and is subject to full-text search indexing.
     *
     * This field corresponds to the body column in the communitybbs_post
     * table and will be updated when this request is processed.
     *
     * The system ensures that no malicious content can be injected through
     * this field, as it's sanitized on the server side before storage and
     * display.
     */
    body?: (string & tags.MinLength<10> & tags.MaxLength<10000>) | undefined;
  };

  /**
   * Request body for creating a new post.
   *
   * This object contains all necessary information for creating a new post in
   * a specified community. The authenticated member must be logged in to
   * perform this operation.
   *
   * The communitybbs_community_id is required and anchors the post to a
   * community context, which determines where the post appears in the system.
   * The title and body are mandatory and must meet length constraints â€” these
   * are core content fields.
   *
   * The optional display_name allows the user to personalize the author
   * attribution for this post without modifying their global profile. If
   * omitted, the system defaults to the member's current display name.
   *
   * This create type enforces all business validation rules before the post
   * is stored, including content length and security checks. The system
   * generates the id, created_at, and updated_at fields internally.
   *
   * This request type is used exclusively for POST
   * /communities/{communityId}/posts and ensures that all required data is
   * provided in a structured and validated format before post creation.
   *
   * Note: No validation is performed on the existence of the community during
   * the schema validation â€” this is handled by the service layer but is not
   * part of this type specification.
   */
  export type ICreate = {
    /**
     * The unique identifier of the community in which the post is to be
     * created.
     *
     * This field is required and must reference a valid existing community.
     * The authenticated user does not need to be a member of this community
     * to create a post, as the system allows posting in any community
     * regardless of membership.
     *
     * This field is used to establish a foreign key relationship with the
     * communitybbs_community table and determines where the post will
     * appear in the platform's feeds.
     *
     * This field corresponds to the communitybbs_community_id column in the
     * communitybbs_post table and is mandatory for all post creation
     * requests.
     */
    communitybbs_community_id: string & tags.Format<"uuid">;

    /**
     * The title of the new post.
     *
     * This is a required field with a minimum length of 5 characters and a
     * maximum length of 120 characters.
     *
     * The title should be concise and informative, serving as a quick
     * summary of the post's content. It will be displayed in feeds, search
     * results, and community lists.
     *
     * This field corresponds to the title column in the communitybbs_post
     * table and is used for indexing and user readability.
     */
    title: string & tags.MinLength<5> & tags.MaxLength<120>;

    /**
     * The body content of the new post.
     *
     * This is a required field with a minimum length of 10 characters and a
     * maximum length of 10,000 characters. The content must be plain text
     * only â€” no HTML, JavaScript, or other scripting languages are allowed
     * to prevent security vulnerabilities.
     *
     * The body represents the main content of the post, where users express
     * their thoughts, share information, or ask questions. It will be
     * displayed in post detail pages and is subject to full-text search
     * indexing.
     *
     * This field corresponds to the body column in the communitybbs_post
     * table and must comply with the security and formatting requirements
     * to ensure platform integrity.
     */
    body: string & tags.MinLength<10> & tags.MaxLength<10000>;

    /**
     * The display name to be shown as the author of this post.
     *
     * This field is optional. If provided, it must be between 1 and 32
     * characters. It will override the member's default display name for
     * this specific post.
     *
     * If not provided, the system will use the authenticated member's
     * current display_name from their profile.
     *
     * This field is stored as plain text in the post record for
     * consistency, so even if the member later changes their profile
     * display name, the post will show the name that was valid at posting
     * time.
     *
     * This field corresponds to the display_name column in the
     * communitybbs_post table and supports user customization without
     * affecting their global profile.
     */
    display_name?:
      | (string & tags.MinLength<1> & tags.MaxLength<32>)
      | null
      | undefined;
  };
}
