import { tags } from "typia";

/**
 * Core entity representing a sub-community on the platform. This model stores
 * all metadata about a community including its name, description, category,
 * visual assets, rules, and activity tracking. Communities are independent
 * entities that users can create, join, search, and explore.
 *
 * The name field is unique and serves as the community's identifier in URLs
 * (e.g., /c/communityname). This table follows strict 3NF: all fields are
 * atomic and depend solely on the primary key. No denormalization occurs here,
 * as required by the requirements which specify direct storage of category,
 * rules, and timestamps. Rules are stored as an array of strings as explicitly
 * required by the business requirements.
 *
 * This model is essential for implementing community discovery, search, and
 * membership logic. It supports both public access and administrative
 * management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunitybbsCommunity = {
  /**
   * Primary Key.
   *
   * Unique identifier for the community.
   *
   * This field is auto-generated by the database system and is used as the
   * primary key for all operations related to the community.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique, lowercase identifier for the community used in URLs (e.g.
   * /c/ai). Must be between 3 and 32 characters and contain only alphanumeric
   * characters, hyphens (-), or underscores (_). This field is used for
   * global search and direct access. The uniqueness of this field is enforced
   * by a unique index.
   *
   * The name must be unique across all communities. It is case-insensitive
   * for lookup purposes. Only alphanumeric characters, hyphens, and
   * underscores are permitted.
   *
   * This field is immutable after creation.
   */
  name: string &
    tags.MinLength<3> &
    tags.MaxLength<32> &
    tags.Pattern<"^[a-z0-9_-]+$">;

  /**
   * A brief description of the community's purpose, up to 500 characters.
   * Used for discovery and the community info panel. May be empty but cannot
   * be longer than 500 characters.
   *
   * This field provides context to users browsing communities. It is
   * displayed on the community home page and search results.
   *
   * If not provided, the description will be empty. The description supports
   * plain text only and is not rendered as HTML.
   */
  description?: (string & tags.MaxLength<500>) | undefined;

  /**
   * The topic category assigned to the community. Must be one of: ["Tech &
   * Programming", "Science", "Movies & TV", "Games", "Sports", "Lifestyle &
   * Wellness", "Study & Education", "Art & Design", "Business & Finance",
   * "News & Current Affairs"]
   *
   * Used for filtering communities in the Explore page and search results.
   * The category helps users discover communities of interest.
   *
   * The category values are predefined and enforced by the system. New
   * categories cannot be added by users. If unspecified, the system defaults
   * to "General".
   */
  category:
    | "Tech & Programming"
    | "Science"
    | "Movies & TV"
    | "Games"
    | "Sports"
    | "Lifestyle & Wellness"
    | "Study & Education"
    | "Art & Design"
    | "Business & Finance"
    | "News & Current Affairs"
    | "General";

  /**
   * The URL to the community's logo image (PNG, JPG, GIF). Optional. If
   * empty, a default placeholder is used.
   *
   * This field stores the URL reference to an image file hosted externally.
   *
   * The URL must be valid and accessible. The system does not validate image
   * content or format beyond ensuring it is a valid URL. The maximum length
   * is 80,000 characters.
   *
   * If this field is null or empty, a default system logo will be displayed.
   */
  logo?: (string & tags.MaxLength<80000> & tags.Format<"uri">) | undefined;

  /**
   * The URL to the community's banner image (PNG, JPG, GIF). Optional. If
   * empty, a default placeholder is used.
   *
   * This field stores the URL reference to an image file hosted externally.
   *
   * The URL must be valid and accessible. The system does not validate image
   * content or format beyond ensuring it is a valid URL. The maximum length
   * is 80,000 characters.
   *
   * If this field is null or empty, a default system banner will be
   * displayed.
   */
  banner?: (string & tags.MaxLength<80000> & tags.Format<"uri">) | undefined;

  /**
   * An array of up to 10 community rules, each up to 100 characters long.
   * Displayed as numbered list 1 through 5 in the community info panel.
   *
   * Stored as JSON-encoded array in database. Used to enforce community
   * guidelines. The requirement specifies direct array storage, so the field
   * is stored as a string[] type in Prisma with appropriate string array
   * mapping.
   *
   * The rules are displayed on the community page as an ordered list. Only
   * the first five rules are shown by default. The content must be stored as
   * a JSON array of strings. Example: ["No spam", "Be respectful"]
   */
  rules?: (string & tags.MaxLength<3000>) | undefined;

  /**
   * The timestamp when this community was created. Used for sorting in
   * 'Recently Created' order and for audit trails. Never modified.
   *
   * This field is automatically set by the system at the time of community
   * creation. It cannot be modified after creation. The timestamp includes
   * timezone information (timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * The timestamp of the last modification to the community's metadata. This
   * field is updated only when name, description, category, logo, banner, or
   * rules are changed. Never set manually; updated by application logic.
   *
   * This field reflects the most recent administrative change to the
   * community's metadata. It does not update when members join or leave, or
   * when posts/comments are created. The value is automatically maintained by
   * the application.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * The timestamp when this community was soft-deleted. If null, the
   * community is active. If set, the community is considered archived and
   * hidden from most UIs. Supports recovery. Required for soft delete
   * capability as per business logic.
   *
   * This field implements soft delete behavior. If set, the community is
   * hidden from public views but data remains in the database for audit and
   * potential restoration. A null value indicates an active community.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * The total number of users who have joined this community. Always derived
   * from active relationships to communitybbs_member, but stored for
   * performance and consistency in the explore page and community list.
   *
   * Incremented when a user joins, decremented when they leave. Since this
   * value is critical to sorting and display and is referenced in early
   * codebase in requirement documentation, it is stored as a denormalized
   * field here, but it is NOT calculated here - it's kept in sync by
   * application logic via member join/leave events.
   *
   * This field provides a quick count for display purposes and is updated in
   * real-time by application logic when users join/leave the community.
   */
  member_count: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * The timestamp of the most recent activity in this community, which can be
   * any of: a post created, a comment posted, a vote cast, or a user joining.
   * Used for ordering the 'Recent Communities' list in the sidebar and for
   * determining community activity. Updated on any of these events. The field
   * is stored here for performance and ensures consistence with client-side
   * feeds.
   *
   * This field captures the most recent activity in the community, regardless
   * of the type of activity. It is used to rank communities in the 'Recent
   * Communities' sidebar. The value is updated asynchronously when any
   * relevant activity occurs.
   */
  last_active_at: string & tags.Format<"date-time">;
};
export namespace ICommunitybbsCommunity {
  /**
   * Update parameters for modifying community metadata.
   *
   * This schema defines the fields that can be updated by a community
   * creator. Only non-identifier metadata fields are mutable after creation:
   * description, category, logo, banner, and rules.
   *
   * This type ensures that critical, immutable fields such as the community
   * name and creation date cannot be changed, preserving the reproducibility
   * and linking integrity of the community's identity and content history.
   *
   * All update operations must be performed by the original creator of the
   * community or an administrator. The system enforces ownership checks
   * before applying any of these updates to ensure proper access control.
   */
  export type IUpdate = {
    /**
     * Updated description of the community's purpose and scope.
     *
     * This field allows community creators to modify the brief summary that
     * appears in the community info panel and search results. The
     * description can be up to 500 characters long to provide sufficient
     * context while remaining concise.
     *
     * The system updates this field in the communitybbs_community table,
     * and the change is immediately reflected to all users viewing the
     * community page. If no description is provided in the request, the
     * existing value is preserved.
     */
    description?: (string & tags.MaxLength<500>) | undefined;

    /**
     * New category assignment for the community.
     *
     * This field allows reclassification of the community to a different
     * topic from the predefined list. It affects filtering on the Explore
     * page and search results, helping users find relevant communities.
     *
     * Category changes reflect the community's evolving purpose. The system
     * validates that the new category is one of the predefined options to
     * maintain data integrity. If omitted, the current category is
     * preserved.
     */
    category?:
      | "Tech & Programming"
      | "Science"
      | "Movies & TV"
      | "Games"
      | "Sports"
      | "Lifestyle & Wellness"
      | "Study & Education"
      | "Art & Design"
      | "Business & Finance"
      | "News & Current Affairs"
      | "General"
      | undefined;

    /**
     * URL of the new community logo image.
     *
     * This field accepts a valid URL pointing to a logo image file (PNG,
     * JPG, GIF). The URL can be up to 80,000 characters to accommodate long
     * CDN paths but is typically much shorter.
     *
     * If provided, it replaces the existing logo. If null or omitted, the
     * logo is unchanged. The system does not validate the image's existence
     * or format at the API level — this is handled by the file management
     * service.
     */
    logo?: (string & tags.MaxLength<80000> & tags.Format<"uri">) | undefined;

    /**
     * URL of the new community banner image.
     *
     * This field accepts a valid URL pointing to a banner image file (PNG,
     * JPG, GIF). The URL can be up to 80,000 characters to accommodate long
     * CDN paths but is typically much shorter.
     *
     * If provided, it replaces the existing banner. If null or omitted, the
     * banner remains unchanged. The system does not validate the image's
     * existence or format at the API level — this is handled by the file
     * management service.
     */
    banner?: (string & tags.MaxLength<80000> & tags.Format<"uri">) | undefined;

    /**
     * New community rules as a JSON-encoded array of strings.
     *
     * This field allows community creators to update the rules governing
     * conduct within the community. The rules are stored as a
     * JSON-formatted array of strings, each ≤100 characters, with a maximum
     * of 10 rules.
     *
     * Each rule is displayed as a numbered list (1-5) in the community info
     * panel. Any rule exceeding two lines will be truncated with an
     * ellipsis. The limit ensures rules remain readable without collapsing
     * the UI.
     */
    rules?: (string & tags.MaxLength<3000>) | undefined;
  };

  /**
   * Request parameters for searching and filtering communities in
   * administrative views.
   *
   * This schema defines the structured parameters accepted by the
   * /admin/communities endpoint to filter and sort the list of communities.
   *
   * It combines search capabilities, sorting preferences, and pagination
   * controls into a single object to facilitate complex queries without URL
   * clutter.
   *
   * The search property supports full-text matching on both community name
   * and description fields.
   *
   * The sortBy and sortOrder properties allow flexible sorting by different
   * attributes relevant to community management.
   *
   * The page and limit properties enable efficient pagination for large
   * datasets, following the requirement of 20 communities per page by
   * default.
   *
   * This request object ensures consistent search behavior across different
   * administrative interfaces and supports all search and sort requirements
   * specified in the documentation.
   */
  export type IRequest = {
    /**
     * Keyword for full-text search across community name and description.
     *
     * This field enables searching communities by partial name or
     * description matches using PostgreSQL trigram operators for efficient
     * searching.
     *
     * Must be at least 2 characters long to prevent performance issues with
     * short queries.
     *
     * Search is case-insensitive and matches any part of the name or
     * description.
     *
     * For example, searching 'dev' would match 'web-dev' or 'developer'.
     */
    search?: (string & tags.MinLength<2> & tags.MaxLength<100>) | undefined;

    /**
     * Field to sort the communities by.
     *
     * Specifies the attribute used to order the results in the response.
     *
     * Options include:
     *
     * - 'name': Sort alphabetically by community name
     * - 'created_at': Sort by community creation date (oldest to newest)
     * - 'member_count': Sort by number of members in the community
     * - 'last_active_at': Sort by when activity last occurred in the
     *   community
     *
     * Default is 'name' with ascending order as specified in requirements.
     */
    sortBy?:
      | "name"
      | "created_at"
      | "member_count"
      | "last_active_at"
      | undefined;

    /**
     * Sort direction for the results.
     *
     * Determines whether results are ordered in ascending (A-Z, oldest to
     * newest) or descending (Z-A, newest to oldest) order.
     *
     * Options are 'asc' for ascending and 'desc' for descending.
     *
     * Default is 'asc' (alphabetical ascending).
     */
    sortOrder?: "asc" | "desc" | undefined;

    /**
     * Page number for pagination, 1-indexed.
     *
     * Specifies which page of results to return, with each page containing
     * up to 'limit' results.
     *
     * Page numbering starts at 1 (not 0) to match user expectations.
     *
     * Must be an integer with a minimum value of 1.
     *
     * Default is 1, meaning the first page of results.
     */
    page?:
      | (number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>)
      | undefined;

    /**
     * Number of communities per page in the response.
     *
     * Controls how many communities appear on each page of results.
     *
     * Must be between 1 and 100 (inclusive) to prevent excessive payload
     * sizes.
     *
     * Default is 20 to balance loading speed and content density per page.
     *
     * If a client requests more than 100, the system will cap it at 100 as
     * specified in requirements.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.Default<20> &
          tags.Minimum<1> &
          tags.Maximum<100>)
      | undefined;
  };

  /**
   * Request body for creating a new community.
   *
   * This type is used specifically for community creation operations. It
   * excludes system-generated fields (id, created_at, updated_at,
   * member_count, last_active_at, deleted_at) that are managed by the
   * system.
   *
   * For creation, all fields except id and timestamps are required. The
   * system validates the name format and uniqueness, and assigns default
   * values where applicable. This object captures the initial state of a
   * community before system processing.
   *
   * It aligns with the communitybbs_community table in the Prisma schema and
   * represents the data required from the client to create a new community.
   */
  export type ICreate = {
    /**
     * The unique, lowercase identifier for the community used in URLs (e.g.
     * /c/ai). Must be between 3 and 32 characters and contain only
     * alphanumeric characters, hyphens (-), or underscores (_). This field
     * is used for global search and direct access. The uniqueness of this
     * field is enforced by a unique index.
     *
     * The name must be unique across all communities. It is
     * case-insensitive for lookup purposes. Only alphanumeric characters,
     * hyphens, and underscores are permitted.
     *
     * This field is immutable after creation.
     */
    name: string &
      tags.MinLength<3> &
      tags.MaxLength<32> &
      tags.Pattern<"^[a-z0-9_-]+$">;

    /**
     * The topic category assigned to the community. Must be one of: ["Tech
     * & Programming", "Science", "Movies & TV", "Games", "Sports",
     * "Lifestyle & Wellness", "Study & Education", "Art & Design",
     * "Business & Finance", "News & Current Affairs"]
     *
     * Used for filtering communities in the Explore page and search
     * results. The category helps users discover communities of interest.
     *
     * The category values are predefined and enforced by the system. New
     * categories cannot be added by users. If unspecified, the system
     * defaults to "General".
     */
    category:
      | "Tech & Programming"
      | "Science"
      | "Movies & TV"
      | "Games"
      | "Sports"
      | "Lifestyle & Wellness"
      | "Study & Education"
      | "Art & Design"
      | "Business & Finance"
      | "News & Current Affairs"
      | "General";

    /**
     * A brief description of the community's purpose, up to 500 characters.
     * Used for discovery and the community info panel. May be empty but
     * cannot be longer than 500 characters.
     *
     * This field provides context to users browsing communities. It is
     * displayed on the community home page and search results.
     *
     * If not provided, the description will be empty. The description
     * supports plain text only and is not rendered as HTML.
     */
    description?: (string & tags.MaxLength<500>) | undefined;

    /**
     * An array of up to 10 community rules, each up to 100 characters long.
     * Displayed as numbered list 1 through 5 in the community info panel.
     *
     * Stored as JSON-encoded array in database. Used to enforce community
     * guidelines. The requirement specifies direct array storage, so the
     * field is stored as a string[] type in Prisma with appropriate string
     * array mapping.
     *
     * The rules are displayed on the community page as an ordered list.
     * Only the first five rules are shown by default. The content must be
     * stored as a JSON array of strings. Example: ["No spam", "Be
     * respectful"]
     */
    rules?: (string & tags.MaxLength<3000>) | undefined;

    /**
     * The URL to the community's logo image (PNG, JPG, GIF). Optional. If
     * empty, a default placeholder is used.
     *
     * This field stores the URL reference to an image file hosted
     * externally.
     *
     * The URL must be valid and accessible. The system does not validate
     * image content or format beyond ensuring it is a valid URL. The
     * maximum length is 80,000 characters.
     *
     * If this field is null or empty, a default system logo will be
     * displayed.
     */
    logo?: (string & tags.MaxLength<80000> & tags.Format<"uri">) | undefined;

    /**
     * The URL to the community's banner image (PNG, JPG, GIF). Optional. If
     * empty, a default placeholder is used.
     *
     * This field stores the URL reference to an image file hosted
     * externally.
     *
     * The URL must be valid and accessible. The system does not validate
     * image content or format beyond ensuring it is a valid URL. The
     * maximum length is 80,000 characters.
     *
     * If this field is null or empty, a default system banner will be
     * displayed.
     */
    banner?: (string & tags.MaxLength<80000> & tags.Format<"uri">) | undefined;
  };

  /**
   * Summary representation of a community for discovery and listing views.
   *
   * This schema defines the minimal set of fields required to display a
   * community in lists such as the Explore page, search results, or Recent
   * Communities sidebar. It includes only essential metadata for user
   * decision-making: the name, category, member count, and activity
   * timestamp.
   *
   * By excluding detailed information like description, rules, logo, banner,
   * and creation date, this summary reduces network payload size and improves
   * rendering performance when displaying large lists of communities.
   *
   * This type should never be used in detail views of individual communities
   * (such as /c/[name]) where the full ICommunitybbsCommunity schema is
   * appropriate. This separation maintains clear boundaries between list and
   * detail UI components, optimizing user experience and system efficiency.
   */
  export type ISummary = {
    /**
     * Unique identifier of the community.
     *
     * This field is the primary key in the communitybbs_community table,
     * automatically generated as a UUID during community creation. It
     * uniquely identifies the community for all API interactions, internal
     * references, and data relationships.
     *
     * The ID is used internally to link the community to its posts,
     * comments, and votes, and to maintain referential integrity across the
     * database. It is not used in URLs or user-facing interfaces, where the
     * name field is preferred for readability.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The unique identifier for the community used in URLs (e.g., /c/ai).
     *
     * This field represents the community's human-readable name that
     * appears in web addresses and search results. It must be unique across
     * all communities, contain only alphanumeric characters, hyphens, or
     * underscores, and be between 3 and 32 characters.
     *
     * The name serves as the community's public identifier and is used in
     * all social sharing, search engine indexing, and direct navigation. It
     * was created when the community was initialized and is immutable after
     * creation.
     */
    name: string;

    /**
     * Brief description of the community's topic and purpose.
     *
     * This field contains a short summary (up to 500 characters) explaining
     * the focus of the community. It appears in community list views and
     * search results to help users understand whether the community matches
     * their interests.
     *
     * The description is optional, and when blank, the system displays a
     * default message. It is displayed in the community info card on both
     * the Explore page and the community's main landing page.
     */
    description?: string | undefined;

    /**
     * The topic category assigned to the community from a predefined list.
     *
     * This field categorizes the community into one of the system's
     * predefined topics for structured discovery and filtering. These
     * categories are maintained by platform administrators and selected
     * during community creation.
     *
     * The category determines the community's placement in the Explore page
     * and search results. It helps users find related communities and
     * ensures content is appropriately grouped for new users discovering
     * the platform.
     */
    category:
      | "Tech & Programming"
      | "Science"
      | "Movies & TV"
      | "Games"
      | "Sports"
      | "Lifestyle & Wellness"
      | "Study & Education"
      | "Art & Design"
      | "Business & Finance"
      | "News & Current Affairs"
      | "General";

    /**
     * Total number of users who have joined this community.
     *
     * This field reflects the current membership count of the community,
     * calculated by the system based on active relationships between
     * communitybbs_member and communitybbs_community.
     *
     * It is stored as a denormalized field for performance since it's
     * frequently accessed in list views and sorting. The count is
     * incremented when users join and decremented when they leave, being
     * kept in sync by application logic rather than database queries.
     */
    member_count: number & tags.Type<"int32">;

    /**
     * Timestamp of the most recent activity within this community.
     *
     * This field tracks the time of the most recent event in the community,
     * including: post creation, comment posting, voting, or user joining.
     * It is updated immediately after each such event.
     *
     * This field is crucial for sorting communities in the 'Recent
     * Communities' sidebar, ensuring active communities rise to the top.
     * Its value is manually updated by the application in response to
     * member actions, with no reliance on automated system processes.
     */
    last_active_at: string & tags.Format<"date-time">;
  };
}
