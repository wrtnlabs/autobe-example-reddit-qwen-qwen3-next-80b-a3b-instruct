import { tags } from "typia";

export namespace ICommunityPlatformComment {
  /**
   * Search and pagination parameters for retrieving comment records from the
   * platform.
   *
   * This schema is used as the request body for the PATCH
   * /communityPlatform/posts/{postId}/comments endpoint to enable complex
   * filtering and pagination of comment threads.
   *
   * The parameters allow clients to specify page size, page number, sort
   * order (newest or top), and parent-child relationships to efficiently
   * navigate and load comment threads on post detail pages and search
   * results. All parameters are optional to support flexible use cases,
   * allowing clients to require only what they need.
   *
   * The schema prevents page sizes larger than 100 and ensures reasonable
   * pagination limits to maintain UI performance and accessibility on all
   * device types.
   */
  export type IRequest = {
    /**
     * The page number to retrieve for paginated comment results.
     *
     * This parameter controls pagination of comments, allowing clients to
     * navigate through large comment threads. The valid range is 1 to 1000
     * pages, with page 1 being the most recent set of comments.
     *
     * When omitted or set to null, the system defaults to page 1. This
     * parameter is used in conjunction with the limit parameter to
     * efficiently fetch comment threads without overwhelming network
     * responses.
     */
    page?: (number & tags.Minimum<1> & tags.Maximum<1000>) | null | undefined;

    /**
     * The number of comment records to return per page.
     *
     * This parameter defines the size of each paginated result set. The
     * system enforces a maximum limit of 100 results per page to ensure
     * responsive UI performance and prevent excessive data transfer.
     *
     * When omitted or set to null, the system defaults to 20 comments per
     * page, which aligns with the business requirement for main feed
     * pagination. This allows clients to customize load volumes based on
     * bandwidth, device, or performance considerations.
     */
    limit?: (number & tags.Minimum<1> & tags.Maximum<100>) | null | undefined;

    /**
     * The sorting criteria to apply to comment results.
     *
     * This parameter controls the ordering of the returned comments. Two
     * valid values are supported:
     *
     * - "newest": Sort by creation timestamp descending, then by comment ID
     *   descending for ties.
     * - "top": Sort by comment score (upvotes minus downvotes) descending,
     *   then by creation timestamp descending, then by comment ID
     *   descending for ties.
     *
     * When omitted or set to null, the system defaults to "newest" sort,
     * which is the mainstream experience recommended for most users.
     *
     * This field enables the business requirement for both time-based and
     * popularity-based comment ordering in detail pages and search
     * results.
     */
    sort?: "newest" | "top" | null | undefined;

    /**
     * The unique identifier of the parent comment to retrieve replies for.
     *
     * When this field is provided, the system filters comments to return
     * only direct replies to the specified parent comment, enabling thread
     * navigation.
     *
     * If set to null or omitted, the system returns top-level comments
     * attached directly to the parent post.
     *
     * This feature supports the business requirement for unlimited nesting
     * of replies while allowing efficient retrieval of specific comment
     * branches without loading the entire thread at once.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Minimal summary representation of a comment for display in feeds and
   * search results.
   *
   * This schema provides essential information needed to render a comment in
   * UI lists without including full dependency details or complex nesting
   * information.
   *
   * It includes the core data points required to display the comment state:
   * identifier, content, author information, time, score, and reply count.
   * This is designed for use in the /posts/{postId}/comments returns and
   * /s/comments search results, where lightweight responses are critical for
   * performance.
   *
   * The author_display_name and parent_id are included as nullable fields to
   * support optional display preferences and thread context, respectively.
   * The updated_at field is only included if edited, supporting a clean UI
   * representation that hides "edited" indicators unless relevant.
   */
  export type ISparse = {
    /**
     * The unique identifier of the comment in the database.
     *
     * This field serves as the primary key for the comment record and is
     * immutable. It is generated by the system upon creation and is used as
     * the path parameter in detail endpoints like
     * /posts/{postId}/comments/{commentId}.
     *
     * This field is essential for tracking relationships between comments
     * and their parents, votes, and search indexing.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the parent post to which this comment
     * belongs.
     *
     * This field establishes the logical relationship between the comment
     * and its containing post in the community_platform_posts table. It
     * enables the system to retrieve all comments associated with a
     * specific post and ensures correct association in search and feed
     * contexts.
     */
    post_id: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the member who authored this comment.
     *
     * This field links the comment to the community_platform_member record
     * that created it, enabling ownership enforcement for edit/delete
     * operations and displaying the correct author information in the UI.
     *
     * This field is used to determine whether the current user is the
     * author of the comment and to enforce the business rule that users can
     * only edit or delete their own comments.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * The unique identifier of the parent comment this reply is part of, or
     * null if this is a top-level comment.
     *
     * This field enables the hierarchical structure of nested comments. If
     * null, the comment is a direct reply to the post. If set, it
     * references another comment ID, establishing a reply chain in the
     * recursive structure.
     *
     * The system supports unlimited nesting depth with this field and
     * maintains the integrity of comment thread relationships.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * The plain text content of the comment, between 2 and 2,000
     * characters.
     *
     * This field contains the visible text that users have written. It must
     * not contain any HTML, JavaScript, CSS, or executable code; only plain
     * text with eligible line breaks (\n) are permitted.
     *
     * The system enforces the 2-2000 character constraint and scans for
     * invalid content before storage to prevent security vulnerabilities
     * and ensure consistent display.
     */
    content: string & tags.MinLength<2> & tags.MaxLength<2000>;

    /**
     * The ISO 8601 timestamp of when this comment was created.
     *
     * This field records the exact date and time when the comment was first
     * submitted and persisted to the database. It is immutable upon
     * creation and serves as the primary ordering mechanism for "Newest"
     * sort.
     *
     * The system outputs this in UTC and the client is responsible for
     * rendering relative timestamps in the user's local timezone
     * (Asia/Seoul).
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * The ISO 8601 timestamp of when this comment was last updated, or null
     * if never edited.
     *
     * This field is updated every time a user edits their comment. It
     * enables the "edited" UI indicator and preserves history for audit
     * purposes.
     *
     * If the comment has never been edited, this field is set to null. The
     * system will return null for new comments until an edit occurs.
     */
    updated_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * The display name the comment author chose to use for this comment.
     *
     * If the author provided a display name during registration, it will be
     * used here. If the author left it blank during registration or later,
     * this field will be null and the system will display "Anonymous" as
     * the default author name in the UI.
     *
     * This field supports the business requirement for personalized author
     * identification while protecting privacy, as it is decoupled from the
     * user's authentication credentials.
     */
    author_display_name?:
      | (string & tags.MinLength<0> & tags.MaxLength<32>)
      | null
      | undefined;

    /**
     * The calculated vote score for this comment, computed as (upvotes -
     * downvotes).
     *
     * This field represents the net popularity of the comment based on user
     * votes. It is sourced from the denormalized
     * community_platform_comment_stats table to ensure high-performance
     * reading in feeds and threads.
     *
     * The system updates this value atomically when votes change, ensuring
     * accurate display of comment popularity in "Top" sort order and when
     * loaded in search results.
     */
    score: number & tags.Type<"int32">;

    /**
     * The total number of direct replies to this comment.
     *
     * This field counts all immediate child comments that have parent_id
     * matching this comment's id. It supports the UI display of reply count
     * indicators in comment threads without requiring recursive queries.
     *
     * The value is derived from the community_platform_comment_stats table
     * and is updated atomically when replies are created or deleted.
     */
    reply_count?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Request body schema for creating a new comment on a post.
   *
   * This type defines the data structure required to submit a new comment to
   * the platform, either as a top-level comment or as a reply to an existing
   * comment.
   *
   * It includes the core content of the comment and an optional reference to
   * a parent comment for threading. This schema is used by the POST
   * /communityPlatform/member/posts/{postId}/comments endpoint.
   *
   * The schema follows strict business rules: content must be plain text
   * between 2-2000 characters, with no code or formatting. Parent_id is only
   * accepted if the referenced comment exists and is active.
   *
   * This is not a user profile or authentication schema - it is purely about
   * submitting comment text and establishing context within a thread.
   */
  export type ICreate = {
    /**
     * The text content of the comment. Must be between 2 and 2,000
     * characters.
     *
     * This field contains the user's contribution to the discussion thread,
     * which can be a top-level comment or a reply to another comment. The
     * content must be plain text only, with line breaks (\n) permitted.
     *
     * According to business rules: no HTML, JavaScript, CSS, or executable
     * content is allowed. Any such content is stripped before storage. The
     * system enforces length limits to ensure readability and prevent
     * abuse.
     *
     * The maximum length of 2,000 characters balances detailed expression
     * with efficient display in threaded UIs. The minimum of 2 characters
     * prevents empty or meaningless submissions.
     */
    content: string & tags.MinLength<2> & tags.MaxLength<2000>;

    /**
     * The unique identifier of the parent comment this comment is replying
     * to.
     *
     * This field is optional. If omitted, the comment is a top-level
     * comment directly under a post.
     *
     * If provided, it references an existing comment in the
     * community_platform_comments table that is not deleted. This enables
     * the nesting of comments into threads.
     *
     * This relationship supports unlimited nesting depth (up to 5 levels in
     * UI), with the parent_id establishing the hierarchical relationship in
     * the comment tree. Parent comments themselves can be replies to other
     * comments, creating nested discussion threads. This design enables
     * deep, contextual conversations while maintaining performance through
     * indexed foreign keys.
     */
    parent_id?: (string & tags.Format<"uuid">) | undefined;
  };

  /**
   * Request body schema for updating an existing comment.
   *
   * This type defines the data structure required to modify the content of an
   * existing comment on the platform.
   *
   * It contains a single required field: content, which represents the new
   * version of the comment text. The update applies only to the comment's
   * body content and does not allow modifications to the author, parent
   * comment, or other metadata.
   *
   * This schema is used by the PUT
   * /communityPlatform/member/posts/{postId}/comments/{commentId} endpoint.
   *
   * Business rules restrict editing to the original author only, and this
   * schema structure supports that by limiting changes to just the textual
   * content, preserving all other inherited data like creation time and
   * identity. The strict character limits ensure consistency with the
   * creation process, maintaining UI compatibility and preventing abuse.
   */
  export type IUpdate = {
    /**
     * The updated text content of the comment. Must be between 2 and 2,000
     * characters.
     *
     * This field contains the new version of the comment content after
     * editing. The system allows members to update their own comments to
     * correct typos, improve clarity, or add new information.
     *
     * According to business rules: no HTML, JavaScript, CSS, or executable
     * content is allowed. Any such content is stripped before storage. The
     * system enforces the same length limits as creation: minimum 2
     * characters, maximum 2,000 characters.
     *
     * The update preserves the original creation timestamp and only
     * modifies the updated_at timestamp. The comment's score, author, and
     * parent relationships remain unchanged. This format ensures that edits
     * are consistent with the original intent while allowing refinement.
     */
    content: string & tags.MinLength<2> & tags.MaxLength<2000>;
  };
}
