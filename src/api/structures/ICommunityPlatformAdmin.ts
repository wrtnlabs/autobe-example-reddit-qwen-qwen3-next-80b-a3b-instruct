import { tags } from "typia";

import { ICommunityPlatformAdminId } from "./ICommunityPlatformAdminId";
import { ICommunityPlatformAdminMemberId } from "./ICommunityPlatformAdminMemberId";
import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * An admin account representing elevated privileges granted to an existing
 * member.
 *
 * This object represents a member with additional system-level permissions,
 * such as moderating content or managing communities. Admin accounts are not
 * standalone identities but privilege levels assigned to existing member
 * accounts.
 *
 * The schema strictly follows the community_platform_admin table definition
 * from the Prisma schema, with no additional or omitted fields. It maintains
 * complete fidelity to the database structure.
 *
 * The member_id field is a foreign key reference to a specific
 * community_platform_member, ensuring the admin privilege is properly
 * associated with an authenticated user account. The created_at and deleted_at
 * fields support a comprehensive audit trail for privilege management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformAdmin = {
  /**
   * Unique identifier for the admin record in UUID format. This is the
   * primary key for the admin table.
   *
   * Automatically generated by the system on admin privilege assignment and
   * remains immutable throughout the admin's tenure.
   */
  id: ICommunityPlatformAdminId;

  /**
   * Reference to the underlying member account that possesses admin
   * privileges. This links the admin record to its associated member account
   * in the community_platform_member table.
   *
   * The admin is not a separate identity but a privilege level granted to an
   * existing member. This relationship enforces that admin privileges are
   * tied to a specific user account with proper authentication credentials.
   */
  member_id: ICommunityPlatformAdminMemberId;

  /**
   * Timestamp when admin privileges were granted to this member, precise to
   * the second in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).
   *
   * This immutable field establishes when the user was elevated to admin
   * status, providing a clear audit trail for privilege changes and system
   * governance.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when admin privileges were revoked (soft delete). If null,
   * admin privileges are active; if set, they have been removed but audit
   * trail is preserved.
   *
   * This implements soft delete pattern to maintain integrity, allowing
   * privilege revocation while preserving historical records for audit and
   * compliance purposes.
   *
   * Admin status:
   *
   * - Deleted_at = null: Admin privileges are active
   * - Deleted_at = Date: Admin privileges have been revoked
   *
   * The underlying member account remains intact and can be granted admin
   * privileges again if needed.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace ICommunityPlatformAdmin {
  /**
   * Request body for admin registration containing authentication credentials
   * and optional display name as defined in the community_platform_member
   * schema.
   *
   * This object defines the payload required to register a new admin user on
   * the community platform. It contains the essential authentication
   * credentials: an email address and a password, along with an optional
   * display name.
   *
   * The registration process follows a two-step procedure defined by the
   * Prisma schema:
   *
   * 1. A member account is created in the community_platform_member table with
   *    the provided email, password_hash (hashed version of password), and
   *    optional display_name.
   * 2. A corresponding admin record is created in the community_platform_admin
   *    table that references the member_id from the newly created member
   *    account.
   *
   * The email field serves as the unique identifier for the admin's
   * authentication identity and must be unique across all user accounts in
   * the system. The password must be provided in plain text and will be
   * hashed server-side using a secure algorithm before storage. The
   * display_name, if provided, allows the admin to customize their
   * presentation in the UI.
   *
   * This request body is sent to the /auth/admin/join endpoint during the
   * admin registration process. The server validates the email format, checks
   * for uniqueness against existing records, enforces password policies, and
   * ensures the display_name (if provided) conforms to length constraints.
   * Upon successful validation, the system creates both the member and admin
   * records and returns an authentication token in the response.
   *
   * The operation does not accept any additional properties beyond those
   * defined in the schema, ensuring strict schema adherence and security.
   */
  export type IJoin = {
    /**
     * The email address that will be used as the unique identifier for the
     * admin account.
     *
     * This field is mandatory and must be a valid email address format. It
     * serves as the primary login credential for the admin user,
     * establishing their identity in the system. The email must be unique
     * across all members and admins in the platform.
     *
     * During the admin registration process, this email is validated
     * against the existing records in the community_platform_member table
     * to ensure it is not already in use. It must adhere to the business
     * rule that each email corresponds to exactly one user account.
     *
     * This field is critical for authentication and is referenced in the
     * community_platform_member table as the unique identifier. After
     * registration, the admin will use this email to log in via the
     * /auth/admin/login endpoint.
     */
    email: string & tags.Format<"email">;

    /**
     * The plain-text password provided by the user during admin
     * registration.
     *
     * This field is mandatory and must contain a secure password as defined
     * by the platform's password policy. The password is never stored in
     * plain text. Instead, the system hashes it using a cryptographic
     * algorithm (e.g., bcrypt) before storing it in the password_hash field
     * of the community_platform_member table.
     *
     * The password must meet minimum security requirements (e.g., minimum
     * length, inclusion of special characters, etc.) as defined in the
     * system's authentication policy. The server will validate these
     * requirements before allowing the registration to proceed.
     *
     * This field is only used during the registration process and is not
     * persisted or returned in any response. After hashing, it is discarded
     * by the server.
     *
     * The password is transmitted securely over HTTPS to protect it from
     * interception during the registration flow.
     */
    password: string;

    /**
     * An optional display name that will be shown as the admin's identity
     * in the UI.
     *
     * This field is optional and allows the admin to set a custom
     * identifier that will be displayed in the platform's user interface,
     * such as in posts, comments, or member lists. If this field is not
     * provided or is an empty string, the system will default to displaying
     * the admin's email address as their identity.
     *
     * The display name is limited to 32 characters to ensure it remains
     * readable and does not disrupt the UI layout. It must consist of
     * alphanumeric characters and common punctuation, excluding special
     * characters that could cause rendering issues or security
     * vulnerabilities.
     *
     * The display name is stored in the display_name field of the
     * community_platform_member table and is used only for presentation
     * purposes. It does not serve any authentication or authorization
     * function.
     *
     * If provided, this value will be saved when the admin account is
     * created. If omitted, the field will be stored as null in the
     * database.
     */
    displayName?: (string & tags.MaxLength<32>) | undefined;
  };

  /**
   * Authorization response containing JWT token.
   *
   * This response is returned after successful authentication operations such
   * as admin login, admin join, or token refresh.
   *
   * The response contains two essential components:
   *
   * 1. Id: The system-generated UUID of the admin's member account, used to
   *    identify the user across the platform
   * 2. Token: A JWT token that encodes authentication and authorization claims
   *
   * The id field ensures the client has a persistent reference to the user's
   * account in the database, enabling features such as:
   *
   * - Content ownership validation
   * - Session management
   * - Audit trails
   * - Dependency tracking in relationships
   *
   * The token field provides stateless authentication for all subsequent
   * requests. It is signed with a shared secret and includes an expiration
   * time (typically 30 minutes for access, 30 days for refresh) to balance
   * security with user experience.
   *
   * This structure follows the standardized IAuthorized response format
   * across all roles (member, admin), ensuring consistency in authentication
   * response handling throughout the application.
   *
   * No other properties are included to maintain secure, minimal payload
   * design. Sensitive information such as the password_hash, last_login_at,
   * or deleted_at status is deliberately omitted from the response to prevent
   * information leakage and adhere to security best practices.
   */
  export type IAuthorized = {
    /**
     * The unique identifier for the authenticated admin user.
     *
     * This field represents the UUID assigned to the admin user's member
     * account in the community_platform_member table. It is used
     * system-wide as the primary reference to identify the logged-in user
     * across all operations and security contexts.
     *
     * The id is NOT the admin's email address or any user-provided
     * identifier, but the system-generated UUID that uniquely identifies
     * the user record in the database. This ID is used in all authorization
     * checks to validate ownership of content (e.g., posts, comments) and
     * to enforce access controls.
     *
     * This value should be included in the response of all authentication
     * operations for admin users, providing the client with the necessary
     * identifier to reference the admin's account in subsequent requests.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Reference to the underlying member account that possesses admin
     * privileges. This links the admin record to its associated member
     * account in the community_platform_member table.
     *
     * The admin is not a separate identity but a privilege level granted to
     * an existing member. This relationship enforces that admin privileges
     * are tied to a specific user account with proper authentication
     * credentials.
     */
    member_id: ICommunityPlatformAdminMemberId;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Credentials for authenticating an existing admin account.
   *
   * This object defines the payload required to authenticate an admin user on
   * the community platform. It contains the two essential authentication
   * fields: email and password.
   *
   * The email field identifies the admin user's account in the database and
   * must correspond to a member record that has been granted admin privileges
   * (i.e., the id is referenced in the community_platform_admin table). The
   * password field is the plain-text password provided by the user, which the
   * server will compare against the stored password_hash in the
   * community_platform_member table to validate identity.
   *
   * Security considerations include:
   *
   * - Transmission over HTTPS only to prevent interception
   * - Proper password hashing on the server using industry-standard algorithms
   * - Rate limiting to prevent brute force attacks
   * - Session management with JWT tokens upon successful authentication
   *
   * The operation validates:
   *
   * - Email format
   * - Email existence and active status (deleted_at is null)
   * - Password hash match
   *
   * Only if all validations pass will the server issue a JWT access token
   * (30min) and refresh token (30d). The response will not include the
   * password_hash or any sensitive data.
   *
   * This request body is sent to the /auth/admin/login endpoint during the
   * admin login process. An empty or malformed request will return a 400 Bad
   * Request error. Missing email or password will result in authentication
   * failure with appropriate client-side messaging.
   */
  export type ILogin = {
    /**
     * The email address used to authenticate the admin user.
     *
     * This field is mandatory and must be a valid email address format that
     * exists in the system as a registered member account.
     *
     * The email serves as the unique username for authentication purposes
     * and must correspond to an entry in the community_platform_member
     * table that has been granted admin privileges. The system validates
     * this email against the stored records to locate the corresponding
     * user account.
     *
     * This field is case-insensitive for matching purposes but stored in
     * its original format for display.
     *
     * The email is the primary identifier for logging in, replacing the
     * need for usernames or other identifiers. This approach simplifies
     * user onboarding and improves recall for users.
     */
    email: string & tags.Format<"email">;

    /**
     * The plain-text password provided by the admin for authentication.
     *
     * This field is mandatory and contains the password that the admin
     * entered during the login process. The password is never stored in
     * plain text in the database; instead, it is hashed using a secure
     * algorithm (e.g., bcrypt) and stored as password_hash in the
     * community_platform_member table.
     *
     * During the login process, the server receives this plain-text
     * password, hashes it using the same algorithm, and compares the result
     * with the stored password_hash for the user identified by the email. A
     * match confirms the user's identity.
     *
     * This field must meet the platform's password complexity policies
     * (e.g., minimum length, character requirements) which are enforced at
     * registration time. During login, the system validates that the
     * password matches the stored hash.
     *
     * The password is transmitted over secure HTTPS connections and is
     * never logged or stored in the server's response.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<128>;
  };

  /**
   * Request body schema for refreshing an admin's access token.
   *
   * This schema defines the structure of the request payload sent to the
   * /auth/admin/refresh endpoint. It contains the refresh token that was
   * issued during the initial authentication process.
   *
   * The refresh token is a JWT (JSON Web Token) that has been signed by the
   * server's private key and contains the user's ID, role, and expiration
   * information.
   *
   * This schema ensures that the refresh request contains the necessary
   * credential information while excluding sensitive or unnecessary fields
   * such as passwords or email addresses.
   *
   * Note: Only the refresh_token field is required for this operation; no
   * other user information or authentication credentials should be included
   * in this request.
   */
  export type IRefresh = {
    /**
     * The refresh token used to obtain a new access token.
     *
     * This token is issued during the initial login or join operation and
     * has a longer lifetime (typically 30 days). It must be presented to
     * the refresh endpoint to obtain a new access token when the current
     * one expires.
     *
     * The refresh token is stored securely on the client side and must be
     * included in the request body for the /auth/admin/refresh endpoint. It
     * is a cryptographically signed JWT that contains the user's identity
     * and issuer information.
     *
     * Security Note: Refresh tokens should be stored in secure HTTP-only
     * cookies or encrypted local storage and never exposed in URLs or
     * client-side logs.
     *
     * Historical Note: This token allows users to maintain their
     * authenticated session without needing to re-enter credentials
     * frequently, improving user experience while maintaining security
     * through short-lived access tokens.
     */
    refresh_token: string;
  };
}
