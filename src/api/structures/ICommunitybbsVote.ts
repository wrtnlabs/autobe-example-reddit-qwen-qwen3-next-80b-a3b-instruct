import { tags } from "typia";

/**
 * Response body representing a single vote record from the database.
 *
 * This type encapsulates the full data stored in the communitybbs_vote table,
 * including references to the voting actor, the voted item (post or comment),
 * vote type, and creation timestamp.
 *
 * It is returned in responses to vote creation or retrieval (e.g., after
 * validating a vote). It is not used in request bodies — the
 * ICommunitybbsVote.ICreate type is used for creating votes.
 *
 * The response does not include the current score of the target item; scores
 * are computed dynamically during item retrieval by summing all votes.
 *
 * The post_id and comment_id are mutually exclusive: only one will be non-null
 * for each vote, ensuring data consistency.
 *
 * This schema ensures transparency and auditability of community interactions
 * while maintaining privacy of actor identity in public-facing displays.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunitybbsVote = {
  /**
   * The unique identifier assigned to this vote record.
   *
   * This UUID is automatically generated by the database upon insertion and
   * serves as the primary key for the communitybbs_vote table.
   *
   * It is used for internal reference and audit log correlation but is not
   * exposed to external clients for direct manipulation.
   *
   * This field appears in response bodies to confirm vote creation or update.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the actor (member, administrator, or guest) who
   * cast the vote.
   *
   * This references either communitybbs_member.id,
   * communitybbs_administrator.id, or communitybbs_guest.id.
   *
   * It ensures accountability and prevents anonymous voting by linking the
   * vote to a specific entity.
   *
   * This field is set automatically at insert time from the authenticated
   * session and is not included in request bodies.
   */
  actor_id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the post that this vote applies to.
   *
   * This is null if the vote is on a comment. Exactly one of post_id or
   * comment_id must be non-null.
   *
   * This field links the vote to the post record in the communitybbs_post
   * table, allowing calculation of total post scores.
   *
   * The system ensures referential integrity through a foreign key
   * constraint.
   */
  post_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * The unique identifier of the comment that this vote applies to.
   *
   * This is null if the vote is on a post. Exactly one of post_id or
   * comment_id must be non-null.
   *
   * This field links the vote to the comment record in the
   * communitybbs_comment table, enabling comment-specific scoring.
   *
   * Referential integrity is preserved via database foreign key.
   */
  comment_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * The type of the vote: either 'upvote' or 'downvote'.
   *
   * This determines how the vote is counted in the score calculation:
   *
   * - 'upvote' adds +1 to the target's score.
   * - 'downvote' adds -1 to the target's score.
   *
   * This field is immutable after creation and cannot be modified.
   *
   * The value is validated at insert time and only accepts predefined enum
   * values.
   */
  type: "upvote" | "downvote";

  /**
   * The timestamp when this vote was created and recorded in the database.
   *
   * This is set automatically by the system upon vote casting and never
   * modified afterward.
   *
   * It is used to determine the chronological context of votes and for audit
   * trail purposes.
   *
   * The value follows ISO 8601 format with full timezone precision.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunitybbsVote {
  /**
   * Request payload for casting a new vote on a post or comment.
   *
   * This schema defines the only required information for recording a vote:
   * the type of vote ('upvote' or 'downvote'). The target (post or comment)
   * is specified through the URL path, not in the body.
   *
   * This design enforces the single responsibility of a vote action — to
   * change the vote sentiment — while external parameters (which
   * post/comment) are handled by route structure. This separation improves
   * API clarity and reduces potential for client misconfiguration.
   *
   * The system enforces that each user can vote only once on a given item,
   * and that they cannot vote on their own content. Duplicate votes are
   * treated as vote removals (toggle behavior), in accordance with product
   * requirements.
   */
  export type ICreate = {
    /**
     * The type of vote being cast: either 'upvote' or 'downvote'.
     *
     * This field specifies whether the user is expressing positive
     * ('upvote') or negative ('downvote') feedback on the target content.
     * The system accepts only these two values to maintain data integrity
     * and avoid ambiguity.
     *
     * The vote type determines whether the post or comment's score is
     * incremented or decremented. All vote actions are logged with this
     * value for audit trail and anti-manipulation analysis.
     */
    type: "upvote" | "downvote";
  };

  /**
   * Update payment for changing an existing vote on a post or comment.
   *
   * This schema defines the required change for modifying a previously cast
   * vote. Only the vote type (upvote/downvote) can be changed, and no other
   * fields are permitted.
   *
   * This request is used when a user changes their mind about a vote — for
   * example, switching from 'upvote' to 'downvote' or removing their vote by
   * sending the same type they previously cast. This supports the 'toggle'
   * behavior specified in the requirements.
   *
   * By allowing only the type parameter, the system minimizes potential for
   * malicious input and ensures that vote modification cannot interfere with
   * the target reference or actor identity, which are determined by
   * authentication context.
   */
  export type IUpdate = {
    /**
     * The new type of vote being cast: either 'upvote' or 'downvote'.
     *
     * This field is used to update an existing vote to a different
     * sentiment. If the existing vote was 'upvote', setting this to
     * 'downvote' changes the vote type. Setting it to the same value
     * removes the vote entirely (reverts to no vote).
     *
     * The system accepts only 'upvote' or 'downvote' to ensure consistency.
     * A value of 'none' is not permitted because all votes are required to
     * have a defined sentiment, even if it's the removal of the previous
     * vote.
     */
    type: "upvote" | "downvote";
  };
}
