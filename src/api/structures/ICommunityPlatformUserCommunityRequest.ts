import { tags } from "typia";

/**
 * Represents the request parameters for retrieving a member's recent
 * communities.
 *
 * This type is used as the request body for the PATCH
 * /communityPlatform/member/users/{userId}/communities endpoint, which returns
 * a paginated list of communities the user has actively joined.
 *
 * The parameters in this request body provide fine-grained control over the
 * result set, allowing for pagination and sorting. The application will
 * typically use default values for the 'Recent Communities' sidebar (limit=5,
 * sort_direction=desc), but this structure allows for future flexibility.
 *
 * While the business requirement dictates a maximum of 5 recent communities,
 * this object allows the system to be extendable for scenarios where more
 * metadata or different sorting might be needed in the future, for example, in
 * an administrative dashboard.
 *
 * This schema is designed with strict additionalProperties: false to prevent
 * undefined fields from being passed. All parameters are optional, with
 * sensible defaults to ensure the endpoint always returns meaningful results
 * without requiring client-side parameter specification.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformUserCommunityRequest = {
  /**
   * The maximum number of communities to return in the response.
   *
   * This field controls pagination for the 'Recent Communities' sidebar. The
   * business requirement specifies that the sidebar displays at most 5
   * communities, ordered by most recent activity.
   *
   * The system enforces a maximum limit of 100 to prevent excessive memory
   * usage or slow responses. The default value of 5 ensures this endpoint
   * always returns a curated list that matches the UI requirements, even if a
   * client attempts to request a larger number.
   *
   * This value determines how many records from the
   * community_platform_user_communities table (filtered by active membership
   * and ordered by last_interaction_at descending) are returned in the data
   * array of the response.
   */
  limit?:
    | (number &
        tags.Type<"int32"> &
        tags.Default<5> &
        tags.Minimum<1> &
        tags.Maximum<100>)
    | undefined;

  /**
   * The number of records to skip before beginning to return results.
   *
   * This field supports pagination for scenarios where clients may need to
   * load additional communities beyond the initial 5. Although the UI
   * requires only the top 5 most recent, this field allows for backward
   * compatibility or future extensions where more communities may be
   * displayed.
   *
   * The offset value must be non-negative. A value of 0 means the first 5 (or
   * limit) communities starting from the most recent are returned.
   *
   * The backend will enforce that only communities with deleted_at = NULL
   * (active memberships) are included in the count, and the results are
   * always ordered by last_interaction_at DESC.
   */
  offset?:
    | (number & tags.Type<"int32"> & tags.Default<0> & tags.Minimum<0>)
    | undefined;

  /**
   * The direction in which to sort the communities by last_interaction_at.
   *
   * This field controls whether results are returned in ascending (oldest
   * first) or descending (newest first) order based on the
   * last_interaction_at field.
   *
   * The default value is 'desc', which aligns with the business requirement
   * that the 'Recent Communities' list shows the most recently active
   * communities first.
   *
   * Although the business requirement enforces 'desc' as the only sensible
   * option for the main UI, this field is provided for extensibility. For
   * example, it could be used internally for debugging or analytics displays
   * where historical ordering is useful.
   */
  sort_direction?: "asc" | "desc" | undefined;
};
