import { tags } from "typia";

/**
 * Full representation of a single comment in the system.
 *
 * This schema defines the complete structure of a comment as it exists in the
 * database and is used when retrieving or returning a specific comment in its
 * full detail. It includes all metadata, such as author identity, thread
 * context, timestamps, and soft deletion state.
 *
 * This type is used in detail views like comment pages and API responses when a
 * comment is requested individually or when comment threads are loaded in full.
 * It provides all data needed for UI rendering, moderation tools, and audit
 * trails.
 *
 * This schema does not include calculated fields like vote count, which can be
 * derived by querying the communitybbs_vote table in the service layer.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunitybbsComment = {
  /**
   * Unique identifier of the comment.
   *
   * This is the primary key used to uniquely identify this comment in the
   * database. It's generated automatically upon creation and used in API
   * paths (e.g., /comments/{id}) to reference individual comments.
   *
   * The ID is a UUID to ensure global uniqueness across all instances of the
   * system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Identifier of the post this comment belongs to.
   *
   * This foreign key links the comment to its parent post in the
   * communitybbs_post table. Every comment must belong to exactly one post.
   * This relationship ensures comments are contextually associated with the
   * post they are replying to.
   *
   * When a post is deleted, its comments are also removed via cascading
   * deletes in the database, maintaining referential integrity.
   */
  communitybbs_post_id: string & tags.Format<"uuid">;

  /**
   * Identifier of the member who authored this comment.
   *
   * This foreign key identifies the authenticated user who created the
   * comment in the communitybbs_member table. It is critical for enforcing
   * ownership rules and authorization, ensuring that only the original author
   * can edit or delete a comment.
   *
   * The system does not allow guests to post comments; all must be authored
   * by authenticated members.
   */
  communitybbs_member_id: string & tags.Format<"uuid">;

  /**
   * Identifier of the parent comment if this is a reply.
   *
   * This optional field enables nested, threaded commenting. If null, this
   * comment is a top-level response to the post. If populated, it references
   * another comment, creating a reply chain.
   *
   * The field creates a self-referencing relationship, allowing
   * infinite-depth comment threads while maintaining a clean database
   * structure.
   */
  communitybbs_comment_id?: (string & tags.Format<"uuid">) | undefined;

  /**
   * Text content of the comment, limited to 2,000 characters.
   *
   * This is the actual message posted by the user. It must be between 2 and
   * 2,000 characters. Input is validated at submission time to ensure it
   * complies with content requirements.
   *
   * The content is plain text only — no HTML, scripts, or markdown is
   * allowed. Truncation or rejection occurs if the limit is exceeded.
   */
  content: string;

  /**
   * Display name of the comment's author as shown on the comment.
   *
   * This is the name displayed publicly in the UI in place of the email or
   * user ID. It is captured from the member’s profile at the time of comment
   * creation and stored here directly to ensure consistency even if the user
   * changes their display name later.
   *
   * The name is truncated to 32 characters if longer, per business
   * requirements.
   */
  display_name?: string | undefined;

  /**
   * Timestamp when the comment was created.
   *
   * This immutable field records the exact date and time when the comment was
   * submitted. It is used for chronological sorting in comment threads and
   * for determining age of comments in relative time displays (e.g., '5
   * minutes ago').
   *
   * The format follows ISO 8601 (e.g., '2025-09-12T09:14:50.108Z'),
   * consistent with application-wide standards.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when this comment was last edited.
   *
   * This field is set to the current time whenever a user edits their
   * comment. It is not set during creation — only upon subsequent updates.
   * This allows users to see when a comment was last modified.
   *
   * The updated_at field does not affect the comment’s position in threads or
   * its score; it is purely informational.
   */
  updated_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Timestamp when the comment was soft-deleted.
   *
   * This field is null while the comment is active. When set, it indicates
   * the comment was removed by its author or an administrator, but the data
   * is preserved for audit purposes.
   *
   * Soft deletion is used instead of hard deletion to maintain data integrity
   * for moderation and compliance. Soft-deleted comments are excluded from
   * most user-facing views.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace ICommunitybbsComment {
  /**
   * Request parameters for retrieving a paginated and sorted list of
   * comments.
   *
   * This structure defines the input accepted when querying for multiple
   * comments, such as on a post detail page or during search. It supports
   * paging and time-based sorting but does not support text search or filter
   * expressions — those are handled by a separate search index endpoint.
   *
   * This type allows the client to control pagination and display order while
   * maintaining server-side rate limiting and performance constraints. The
   * limits enforce database safety and consistent user experience.
   */
  export type IRequest = {
    /**
     * Page number for pagination, starting from 1.
     *
     * This field specifies which page of results to return. If omitted, the
     * default is 1. Page size is fixed at 20 items per page as per business
     * requirements.
     *
     * Use of page number (rather than cursor) is intentional to simplify
     * client-side navigation and enable direct page-to-page jumps in UIs
     * like 'Load more' buttons.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of results per page.
     *
     * This field defines how many comments to return per page. The maximum
     * allowed value is 100. If omitted, defaults to 20. This allows clients
     * to request multiple pages with different sizes, although the UI
     * typically uses a fixed 20-item limit.
     *
     * The constraint prevents abusive queries that could overload database
     * performance.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sort order for comment results.
     *
     * This specifies the sort direction for comment retrieval. Accepts
     * 'created_at' for ascending (oldest first) or '-created_at' for
     * descending (newest first).
     *
     * The system defaults to descending order (newest first) for all
     * comment displays, aligning with user expectation in threaded
     * conversations.
     *
     * Note: Unlike some entities, comment sorting is limited to time-based
     * only; no 'score' sorting is supported for comments.
     */
    sort?: "created_at" | "-created_at" | undefined;
  };

  /**
   * Update payload for modifying an existing comment.
   *
   * This schema defines the fields that can be updated after a comment has
   * been created. Only the content and optionally the display_name can be
   * modified by the original author. Other fields — such as post ID, parent
   * ID, timestamps, and deletion flags — are immutable state controlled by
   * the system.
   *
   * This structure ensures that the only changes allowed to a comment are
   * revisions to its content or the author's display name, consistent with
   * the business requirement: 'users can update only their own content'.
   *
   * Fields that are not included in this schema (e.g., post_id, member_id)
   * cannot be changed through this endpoint, preserving data integrity.
   */
  export type IUpdate = {
    /**
     * New text content for the comment.
     *
     * This is the updated body of the comment. It must be between 2 and
     * 2,000 characters. The system validates the length before applying the
     * update.
     *
     * This field is required; comments cannot be updated without providing
     * new content. The system will reject updates that are empty or too
     * short. The update overwrites the previous version, ensuring all
     * changes are captured.
     */
    content: string & tags.MinLength<2> & tags.MaxLength<2000>;

    /**
     * Updated display name for the comment author. Optional.
     *
     * This optional field allows the author to change the display name
     * shown on the comment. It must not exceed 32 characters. If provided,
     * it updates the display name in this specific comment record. If
     * omitted, the existing value is preserved.
     *
     * Note: This does not change the user's global display name in their
     * profile — only the version saved with this comment. Updating the
     * display name is allowed for history preservation, even though the
     * underlying member could be changed this way.
     */
    display_name?:
      | (string & tags.MinLength<1> & tags.MaxLength<32>)
      | undefined;
  };

  /**
   * Request body for creating a new comment on a post.
   *
   * This schema defines all fields accepted when a member creates a comment
   * in response to a post. It includes the target post, content, and optional
   * display name.
   *
   * The request requires authentication, ensuring that only members can post
   * comments. The system does not accept requests from guests, and those
   * attempting to comment are redirected to login.
   *
   * The submitted content is validated against strict character limits to
   * ensure quality and prevent abuse. The display_name, if provided, is
   * preserved for historical consistency with the comment context; it does
   * not update dynamically based on changes to the member's profile.
   */
  export type ICreate = {
    /**
     * Identifier of the post this comment is replying to.
     *
     * This field links the comment to its parent post, establishing the
     * context of the conversation. The comment must be associated with
     * exactly one post as per database constraints.
     *
     * This is a required field in all comment creation requests. The system
     * validates its existence against the communitybbs_post table to ensure
     * the target post is active (not deleted). The associated community is
     * derived from this post, not specified directly in the request.
     */
    communitybbs_post_id: string & tags.Format<"uuid">;

    /**
     * Text content of the comment, written as a reply to the post.
     *
     * This field contains the actual message posted by the user. It must be
     * between 2 and 2,000 characters in length. Input is validated at
     * submission time to ensure it complies with the requirements.
     *
     * The content is plain text only — no HTML, scripts, or markdown is
     * allowed. Truncation or rejection occurs if the limit is exceeded.
     * This design prevents malicious code injection and ensures consistent
     * rendering across all devices.
     */
    content: string & tags.MinLength<2> & tags.MaxLength<2000>;

    /**
     * Display name for the comment author, overriding the profile name if
     * provided.
     *
     * This optional field allows the user to specify a different display
     * name for this instance. It is truncated to 32 characters if longer
     * and stored directly with the comment for consistency even if the
     * member's profile name changes later.
     *
     * If omitted, the system uses the member's current display name from
     * their profile at the time of submission. This design ensures
     * continuity in public appearances, preserving context for threaded
     * discussions.
     */
    display_name?:
      | (string & tags.MinLength<1> & tags.MaxLength<32>)
      | undefined;
  };

  /**
   * Summary representation of a comment for display in lists and search
   * results.
   *
   * This entity is used when displaying comments in paginated lists such as
   * global search results or in compact UI components. It contains only the
   * essential fields required for user decision-making: minimal metadata,
   * shortened content, and context indicators.
   *
   * By omitting full-length content, author ID, and edit timestamp, this
   * summary reduces network payload size and improves rendering performance
   * when displaying hundreds of comments in search results or trending
   * modules.
   *
   * In detail views (individual comment pages), the full ICommunitybbsComment
   * schema is used instead. This separation ensures optimal performance
   * across different interfaces with consistent information hierarchy.
   */
  export type ISummary = {
    /**
     * Unique identifier of the comment.
     *
     * This field is the primary key in the communitybbs_comment table,
     * generated automatically as a UUID upon comment creation. It uniquely
     * identifies the comment in all API interactions and database
     * relationships.
     *
     * The comment ID is used internally to link comments to their parent
     * post and to their replies. It is not displayed in URLs or interfaces
     * where teaser text and timestamps provide sufficient context.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Identifier of the post this comment belongs to.
     *
     * This foreign key identifies the parent post that the comment is
     * replying to. It ensures comments are always associated with a valid
     * post and prevents orphaned comments in the system.
     *
     * This relationship is used to locate all comments within a specific
     * post, enabling the display of threaded conversations. A comment
     * cannot exist without this post association, as enforced by database
     * foreign key constraints.
     */
    communitybbs_post_id: string & tags.Format<"uuid">;

    /**
     * Content snippet of the comment, truncated to two lines for list
     * display.
     *
     * This field presents a condensed version of the comment text, limited
     * to approximately two lines of display to fit neatly in lists and
     * search results. If the full content exceeds this limit, an ellipsis
     * (...) is appended.
     *
     * By using a truncated version, this summary avoids overwhelming the UI
     * with long comment content while still providing enough context for
     * users to determine relevance in browsing scenarios.
     */
    content: string;

    /**
     * Display name of the comment's author as shown in list views.
     *
     * This is the name that appears next to the comment in feeds, search
     * results, and community pages. It is captured from the author's
     * profile at the time of comment creation and stored here for
     * consistency.
     *
     * The name is limited to 32 characters to ensure consistent display
     * width across all UI components. If the author's profile name was
     * longer, it is truncated during comment creation to maintain this
     * standard.
     */
    display_name?: string | undefined;

    /**
     * Timestamp when the comment was created.
     *
     * This field records the exact date and time when the comment was
     * submitted. It is used for chronological sorting in comment threads
     * and for displaying relative time since posting (e.g., '5 minutes
     * ago').
     *
     * The format follows ISO 8601 standard (e.g.,
     * "2025-09-12T09:14:50.108Z"), consistent with the application's global
     * time handling. This timestamp is immutable and helps anchor the
     * comment's history.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Unique identifier of the parent comment, if this is a reply.
     *
     * This field indicates that this comment is a reply to another comment,
     * rather than a top-level comment on the post. If null, this comment
     * responds directly to the post. If populated, it references the parent
     * comment's ID.
     *
     * This enables nested, threaded discussions. In replies, users can
     * contextually respond to specific parts of a conversation while
     * keeping the thread organized. This field significantly enhances user
     * experience by facilitating detailed, structured dialogue.
     */
    parent_id?: (string & tags.Format<"uuid">) | undefined;
  };
}
