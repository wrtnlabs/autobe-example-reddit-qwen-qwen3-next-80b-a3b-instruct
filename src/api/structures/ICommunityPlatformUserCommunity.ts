import { tags } from "typia";

/**
 * Junction table tracking the dynamic relationship between users and
 * communities.
 *
 * This table enables the 'Recent Communities' list functionality and content
 * filtering for the home feed. Each record represents a user's membership
 * status in a community and tracks when the user last interacted with that
 * community (through join, post, comment, or vote). The record is soft-deleted
 * when a user leaves a community, enabling rejoining and maintaining activity
 * history.
 *
 * Key Business Rules:
 *
 * - Users can join and leave communities dynamically
 * - The last_interaction_at field determines ordering in the 'Recent Communities'
 *   list
 * - Active status is tracked through deleted_at (not is_joined)
 * - This table must support efficient queries for 'Recent Communities' list (top
 *   5 by last_interaction_at)
 * - This table supports home feed filtering by excluding posts from communities
 *   where deleted_at is not null
 * - This table has no independent API endpoints - managed only through community
 *   join/leave actions in UI
 *
 * This table is fundamental to the platform's personalized content experience.
 * By maintaining a record of every user-community relationship with activity
 * timestamps, it enables the system to provide tailored content filtering in
 * the home feed and a dynamic, activity-based navigation experience in the left
 * sidebar. The soft-delete pattern ensures data integrity for audit trails
 * while maintaining the ability for users to leave and rejoin communities
 * seamlessly.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformUserCommunity = {
  /**
   * Primary Key.
   *
   * Unique identifier for the membership record. This UUID uniquely
   * identifies the relationship between a user and a community in the
   * community_platform_user_communities table.
   *
   * This field is automatically generated by the system upon membership
   * creation and is immutable. It serves as the primary key for the junction
   * table and is used to reference specific membership records in related
   * operations and queries.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The user who has established membership.
   *
   * This field is a foreign key reference to the community_platform_member
   * table's id field. It identifies which member account has joined the
   * community.
   *
   * This field is required to establish the user-community relationship and
   * is used in all membership-related operations including join/leave
   * actions, recent communities list generation, and home feed filtering. The
   * system validates this ID against authenticated user sessions to enforce
   * ownership rules.
   */
  community_platform_user_id: string & tags.Format<"uuid">;

  /**
   * The community the user is associated with.
   *
   * This field is a foreign key reference to the
   * community_platform_communities table's id field. It identifies which
   * specific community the user has joined or is associated with.
   *
   * This field is essential for linking the membership record to the correct
   * community and is used in queries that retrieve all users for a specific
   * community or determine community membership status. It ensures data
   * integrity by referencing only valid, existing communities.
   */
  community_platform_community_id: string & tags.Format<"uuid">;

  /**
   * Timestamp when the membership relationship was established.
   *
   * This field records the exact moment when a user first joined a community.
   * It is set once during the initial join operation and is immutable.
   *
   * This timestamp is critical for determining membership history and is used
   * in conjunction with last_interaction_at to track user engagement over
   * time. It helps establish the chronological order of community membership
   * for reporting, analytics, and user history purposes.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the last update to this membership record.
   *
   * This field is automatically updated whenever the membership is modified,
   * such as when a user posts, comments, or votes in the community.
   *
   * This timestamp is used for caching and synchronization purposes, ensuring
   * the system can track the recency of user activity in a community. It's
   * also used when generating the 'Recent Communities' list, where recently
   * updated memberships are prioritized.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the user left the community.
   *
   * When null, the membership is active; when set, the membership is
   * inactive. This implements a soft-delete pattern to maintain audit trail
   * while allowing rejoining.
   *
   * This field enables the 'Leave' functionality without permanently deleting
   * records. When a user leaves a community, this field is set with the
   * current timestamp, effectively deactivating the membership while
   * preserving the record for analytics, history, and potential rejoining.
   * This design supports business requirements for participation history and
   * community membership tracking.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Timestamp of the user's most recent activity within this community.
   *
   * This field is updated when the user joins, posts, comments, or votes. It
   * determines ordering in the 'Recent Communities' list with the most
   * recently active communities appearing first.
   *
   * This timestamp is the key driver for the personalized 'Recent
   * Communities' navigation experience. Every interaction (join, post,
   * comment, vote) triggers an update to this field, ensuring that the
   * communities a user engages with most recently appear at the top of their
   * sidebar. This fosters engagement by making recently active communities
   * easily accessible.
   */
  last_interaction_at: string & tags.Format<"date-time">;
};
