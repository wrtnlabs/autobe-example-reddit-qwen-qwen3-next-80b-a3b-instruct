import { tags } from "typia";

/**
 * Detailed information for a community from the search materialized view
 * (community_platform_search_communities).
 *
 * This schema represents the structure returned by the
 * /communityPlatform/search/sub-communities/{communityId} endpoint and is
 * optimized for search results display. It provides metadata about a community
 * without including dynamic or presentation-specific fields like logo_url,
 * banner_url, or rules.
 *
 * The data is sourced from a materialized view to ensure fast read performance
 * during search operations where frequently accessed community metadata is
 * needed without expensive joins to the master tables. This design optimizes
 * for high-frequency read operations during community discovery.
 *
 * Note: While the master community entity contains additional fields (logo_url,
 * banner_url, rules), they are intentionally omitted here to keep the response
 * lightweight for search result context. Full details are available via the
 * individual community detail endpoint.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformSearchCommunity = {
  /**
   * Unique identifier of the community in the search materialized view.
   *
   * This UUID serves as the primary key for the
   * community_platform_search_communities table and is guaranteed to match
   * the corresponding community_platform_communities.id, ensuring referential
   * integrity.
   *
   * This field is used internally by the backend for linking search results
   * to their source data in the master database.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the source community in the community_platform_communities
   * table.
   *
   * This field maintains the relationship between the search materialized
   * view and the origin community data. When a community is created, updated,
   * or deleted, the search view is automatically refreshed via system
   * triggers that use this foreign key relationship.
   *
   * This field enables the system to keep search results synchronized with
   * the master data without requiring manual intervention.
   */
  community_id: string & tags.Format<"uuid">;

  /**
   * The unique alphanumeric identifier of the community, used for exact and
   * fuzzy search matching.
   *
   * The name follows strict business rules: it must be 5-64 characters long,
   * contain only alphanumeric characters, hyphens (-), and underscores (_),
   * and must be globally unique across the entire platform. This field is
   * immutable after community creation.
   *
   * Search queries match against this field in its raw form to find
   * communities that exactly match the user's search term.
   */
  name: string;

  /**
   * The optional summary text of the community, included in full-text search
   * to match user queries about community topics.
   *
   * This field is limited to 500 characters as defined in the business rules.
   * When a user searches for terms contained in the community description,
   * results that match this field will be returned alongside matches in the
   * name field.
   *
   * This allows users to discover communities by their stated purpose or
   * topic focus, even if the name itself doesn't contain specific keywords.
   */
  description?: string | undefined;

  /**
   * The predefined category designation of the community, used for filtering
   * and categorization in search results.
   *
   * This field contains one value from the exact list of 10 predefined
   * categories specified in the business requirements. When a user searches
   * or filters by category, this field is used to ensure results strictly
   * align with the available categories.
   *
   * The category helps organize communities and guide users to topics aligned
   * with their interests.
   */
  category:
    | "Tech & Programming"
    | "Science"
    | "Movies & TV"
    | "Games"
    | "Sports"
    | "Lifestyle & Wellness"
    | "Study & Education"
    | "Art & Design"
    | "Business & Finance"
    | "News & Current Affairs";

  /**
   * The current count of users who have joined this community.
   *
   * This field is maintained atomically in the
   * community_platform_community_stats denormalized table, updated on every
   * join/leave action to ensure instant accuracy for display purposes even
   * under high traffic.
   *
   * The value shown here is the raw numeric count and will be formatted by
   * the UI according to the business rules: 1,000 → 1k, 10,000 → 10k,
   * 1,000,000 → 1m. However, the API returns the unformatted integer value
   * for backend processing and comparison.
   */
  member_count: number & tags.Type<"int32">;

  /**
   * The timestamp of when the community was created, carried over from the
   * community_platform_communities table.
   *
   * This timestamp is used for sorting communities in the 'Recently Created'
   * search sort option. It reflects the original creation time of the
   * community and remains unchanged after creation.
   *
   * The format follows ISO 8601 datetime standard (e.g.,
   * '2025-10-01T16:40:28.932Z') to ensure consistent parsing across different
   * systems and locales.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * The timestamp of when the community's search index was last updated from
   * the source community data.
   *
   * This field is automatically maintained by system triggers that update the
   * community_platform_search_communities view whenever there are changes to
   * the community's name, description, category, or member_count.
   *
   * It does not track actual changes to the community itself but rather the
   * synchronization events with the search materialized view, ensuring search
   * results are always current.
   */
  updated_at: string & tags.Format<"date-time">;
};
