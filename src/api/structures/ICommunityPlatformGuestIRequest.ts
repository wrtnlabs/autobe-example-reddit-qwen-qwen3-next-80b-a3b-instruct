import { tags } from "typia";

/**
 * Search and filtering criteria for retrieving guest sessions.
 *
 * This schema defines the structure of the request body for the PATCH
 * /communityPlatform/admin/guests endpoint, which enables administrators to
 * perform complex searches across guest session records.
 *
 * The schema provides a comprehensive set of optional filtering parameters
 * including IP address, creation time ranges, and pagination controls. All
 * parameters are optional, allowing flexible queries from simple to complex.
 *
 * This approach enables administrators to conduct targeted investigations,
 * analyze user access patterns, identify potential abuse, or generate usage
 * statistics while ensuring data privacy and system performance through
 * pagination and filtering.
 *
 * All filters are applied in conjunction (AND logic), meaning only guest
 * sessions meeting all specified criteria will be returned in the results.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformGuestIRequest = {
  /**
   * IP address of the guest user for filtering search results.
   *
   * This field allows administrators to filter guest sessions by the IP
   * address from which they accessed the platform. It can be used to identify
   * patterns of activity, detect potential abuse, or investigate suspicious
   * behavior.
   *
   * The IP address is captured during guest session creation in the
   * community_platform_guest table and stored as a string value. This filter
   * supports exact matches or partial matching for IP ranges.
   *
   * Example valid values: "192.168.1.100", "10.0.0.1", "203.0.113.42".
   *
   * Note: This field is only relevant for administrative searches and is not
   * exposed to regular users. When using this filter, the requesting user
   * must have admin privileges.
   */
  ip_address?: string | undefined;

  /**
   * Minimum timestamp for filtering guest sessions by creation time.
   *
   * This filter parameter allows administrators to search for guest sessions
   * that were created on or after the specified date and time.
   *
   * The timestamp must be provided in ISO 8601 format (e.g.,
   * "2023-12-01T08:30:00Z"). This enables querying for guests who accessed
   * the service during specific time periods for analytics or security
   * investigations.
   *
   * This parameter can be used independently or in conjunction with
   * created_at_max to define a time range for guest session searches. When
   * not provided, there is no lower bound on creation time.
   */
  created_at_min?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Maximum timestamp for filtering guest sessions by creation time.
   *
   * This filter parameter allows administrators to search for guest sessions
   * that were created on or before the specified date and time.
   *
   * The timestamp must be provided in ISO 8601 format (e.g.,
   * "2023-12-31T23:59:59Z"). This enables querying for guests who accessed
   * the service during specific time periods for analytics or security
   * investigations.
   *
   * This parameter can be used independently or in conjunction with
   * created_at_min to define a time range for guest session searches. When
   * not provided, there is no upper bound on creation time.
   */
  created_at_max?: (string & tags.Format<"date-time">) | undefined;

  /**
   * Page number for pagination of search results.
   *
   * This parameter controls which page of search results is returned, with
   * the first page being 1.
   *
   * The server returns a maximum of 20 guest sessions per page as defined by
   * standard pagination rules. This parameter must be an integer greater than
   * or equal to 1.
   *
   * When omitted, the server defaults to page 1. If a page number exceeds the
   * total available pages, an empty result set is returned with appropriate
   * pagination metadata.
   */
  page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

  /**
   * Number of guest sessions to return per page.
   *
   * This parameter controls the size of each result page when searching guest
   * sessions.
   *
   * Valid values range from 1 to 100, with a default of 20 if the parameter
   * is omitted. This allows administrators to customize the volume of data
   * returned in each API response for performance optimization or display
   * purposes.
   *
   * Note: Exceeding the maximum limit of 100 will result in a 400 Bad Request
   * error response.
   */
  limit?:
    | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
    | undefined;

  /**
   * Field by which to sort the guest session results.
   *
   * This parameter determines the primary sort order for guest session search
   * results. Valid values are:
   *
   * - "created_at": Sort by guest session creation time (descending)
   * - "ip_address": Sort by IP address in alphabetical order
   *
   * The default sort order is "created_at" descending (newest first). This
   * field provides flexibility for administrators to analyze guest patterns
   * based on different criteria.
   *
   * When sorting by created_at, the system uses the created_at field from the
   * community_platform_guest table, which records when each guest session was
   * initiated.
   */
  sort_by?: "created_at" | "ip_address" | undefined;

  /**
   * Sort direction for the search results.
   *
   * This parameter determines whether the search results are ordered in
   * ascending or descending order based on the field specified by sort_by.
   *
   * Valid values are "asc" for ascending order and "desc" for descending
   * order.
   *
   * When sort_by is "created_at", the default sort_order is "desc" (newest
   * sessions first). When sort_by is "ip_address", the default is "asc"
   * (alphabetical order).
   *
   * This parameter allows administrative users to customize how guest session
   * data is presented for analysis purposes.
   */
  sort_order?: "asc" | "desc" | undefined;
};
