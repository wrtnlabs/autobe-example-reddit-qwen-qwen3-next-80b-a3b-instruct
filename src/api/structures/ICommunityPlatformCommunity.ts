import { tags } from "typia";

/**
 * Full representation of a community entity.
 *
 * This schema defines the complete structure of a community as returned in
 * responses, containing both user-provided metadata and system-managed fields.
 *
 * All fields are defined based on the community_platform_communities and
 * community_platform_community_stats tables in the Prisma schema.
 *
 * This representation is used in community detail views, search results, and
 * user profile displays.
 *
 * The system does not expose the creator's ID or any user-specific information
 * in this response to maintain privacy and user autonomy.
 *
 * The member_count is derived from the denormalized
 * community_platform_community_stats table to ensure performance and accuracy
 * without complex joins.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunity = {
  /**
   * The unique identifier of the community.
   *
   * This is a system-generated UUID that serves as the primary key for the
   * community record in the database.
   *
   * The id is immutable and assigned at the time of community creation.
   *
   * It is never provided by the client and is always generated by the server.
   *
   * This identifier is used internally to reference the community across all
   * related operations and tables such as community_platform_posts,
   * community_platform_user_communities, and
   * community_platform_search_communities.
   *
   * The UUID format ensures global uniqueness and enables distributed system
   * reliability.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique alphanumeric identifier for the community.
   *
   * This field defines the public name that users will use to access the
   * community via URL and search.
   *
   * The name must be 5-64 alphanumeric characters and may include hyphens (-)
   * and underscores (_). No other special characters are permitted.
   *
   * The name is immutable after creation and serves as the primary identifier
   * for the community.
   *
   * This value is the human-readable identifier that appears in URLs, search
   * results, and community listings.
   *
   * The system enforces that each community name must be globally unique
   * across the entire platform to avoid conflicts.
   */
  name: string &
    tags.MinLength<5> &
    tags.MaxLength<64> &
    tags.Pattern<"^[a-zA-Z0-9_-]+$">;

  /**
   * The predefined category that this community belongs to.
   *
   * This field assigns the community to one of the platform's predefined
   * topic categories: ["Tech & Programming", "Science", "Movies & TV",
   * "Games", "Sports", "Lifestyle & Wellness", "Study & Education", "Art &
   * Design", "Business & Finance", "News & Current Affairs"].
   *
   * This categorization supports organized exploration and discovery of
   * communities by user interest.
   *
   * The category value is set during creation and cannot be changed after the
   * community is created.
   *
   * These categories represent the core topic areas the platform supports to
   * facilitate focused community formation.
   */
  category:
    | "Tech & Programming"
    | "Science"
    | "Movies & TV"
    | "Games"
    | "Sports"
    | "Lifestyle & Wellness"
    | "Study & Education"
    | "Art & Design"
    | "Business & Finance"
    | "News & Current Affairs";

  /**
   * An optional summary of the community's purpose and focus.
   *
   * This field provides additional context about the community's goals,
   * rules, and discussion topics.
   *
   * The description may contain up to 500 characters of plain text, including
   * line breaks for formatting. No HTML, markdown, or special formatting is
   * supported.
   *
   * When not provided, the system will leave this field as null, and the
   * community will display without any description in its UI.
   *
   * This field helps potential members understand whether the community
   * aligns with their interests before joining.
   */
  description?: (string & tags.MaxLength<500>) | undefined;

  /**
   * Community guidelines presented as plain text with line breaks.
   *
   * This field contains the community rules formatted as a multi-line string
   * where each line represents one rule.
   *
   * A maximum of 20 rules is permitted. UI will only display the first 5
   * rules with numbering (1., 2., etc.), with a "Show all" link for
   * additional rules if needed.
   *
   * Only plain text with line breaks (\n) is allowed. No HTML, markdown, or
   * special formatting of rules is permitted.
   *
   * When not provided, the field will be set to null, and the community will
   * display without rules.
   */
  rules?: (string & tags.MaxLength<10000>) | undefined;

  /**
   * The URL to the community's logo image.
   *
   * This field provides an optional URL linking to the community's logo,
   * which should be in PNG, JPG, or SVG format.
   *
   * The URL string must be a valid web-accessible URL of up to 80,000
   * characters as defined by database schema.
   *
   * When not provided, the system will assign a default placeholder logo in
   * the UI.
   *
   * This field is for informational display only and is not used for
   * authentication or authorization purposes.
   *
   * The logo image itself is managed externally and validated only for format
   * (URL) on creation, not for image content or existence.
   */
  logo_url?: (string & tags.MaxLength<80000>) | undefined;

  /**
   * The URL to the community's banner image.
   *
   * This field provides an optional URL linking to the community's banner
   * image, which should be in PNG or JPG format.
   *
   * The URL string must be a valid web-accessible URL of up to 80,000
   * characters as defined by database schema.
   *
   * When not provided, the system will assign a default placeholder banner in
   * the UI.
   *
   * This field is for informational display only and is not used for
   * authentication or authorization purposes.
   *
   * The banner image itself is managed externally and validated only for
   * format (URL) on creation, not for image content or existence.
   */
  banner_url?: (string & tags.MaxLength<80000>) | undefined;

  /**
   * The current number of members who have joined this community.
   *
   * This field represents an immediately-updated count of active members
   * associated with the community.
   *
   * The count is maintained atomically in the
   * community_platform_community_stats table to ensure efficient display
   * performance.
   *
   * For display purposes, numbers of 1,000 or more will be abbreviated using
   * K and M suffixes (e.g., 1,000 → 1k, 10,000 → 10k, 1,000,000 → 1m), but
   * the API returns the raw numeric value for calculative purposes.
   *
   * This count is updated in real-time when users join or leave the
   * community.
   *
   * The value cannot be less than zero, and the system ensures that this
   * field is always accurate through atomic updates.
   *
   * The count only includes active members (where deleted_at is null in
   * community_platform_user_communities).
   */
  member_count: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * The timestamp when this community was created.
   *
   * This field records the exact moment the community was created in the
   * system using ISO 8601 format in UTC.
   *
   * The created_at timestamp is immutable and set only at creation time.
   *
   * It is used for chronological sort order, display of community age, and
   * internal analytics.
   *
   * This field is automatically generated by the system and cannot be
   * modified by clients.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace ICommunityPlatformCommunity {
  /**
   * Request schema for searching and filtering communities.
   *
   * This object defines the parameters for querying and retrieving
   * communities with advanced search and filtering capabilities. It supports
   * filtering by community name, category, and sorting preferences, along
   * with pagination controls.
   *
   * The search capabilities allow content discovery across the entire
   * platform, enabling users to find communities based on specific topics,
   * interests, or names.
   *
   * This request structure follows the pattern established for search
   * operations in the system, using a request body rather than URL parameters
   * to support complex queries that may exceed URL length limits.
   *
   * All fields are optional, but at least one filter condition (search or
   * category) should ideally be provided for meaningful results. When left
   * unspecified, the system returns all communities sorted by default
   * criteria.
   */
  export type IRequest = {
    /**
     * Search term to match against community name and description.
     *
     * This field is used to filter communities based on partial or full
     * text matching of their name or description properties. The search
     * supports fuzzy matching on alphanumeric characters, hyphens, and
     * underscores.
     *
     * When provided, the system will return communities whose name or
     * description contain the search term.
     *
     * Minimum length is 2 characters. If less than 2 characters are
     * provided, the system will reject the request.
     *
     * This parameter enables users to discover communities by topic,
     * interest, or name.
     *
     * The search term should be provided as a plain text string without
     * special characters like wildcards or regex patterns.
     */
    search?: (string & tags.MinLength<2>) | undefined;

    /**
     * The predefined community category to filter by.
     *
     * This field restricts search results to communities assigned to a
     * specific category from the predefined list: ["Tech & Programming",
     * "Science", "Movies & TV", "Games", "Sports", "Lifestyle & Wellness",
     * "Study & Education", "Art & Design", "Business & Finance", "News &
     * Current Affairs"].
     *
     * When this property is provided, only communities matching the
     * specified category will be returned.
     *
     * The category must exactly match one of the predefined values in the
     * system. Any other value will be ignored or treated as invalid.
     *
     * This property allows users to explore communities based on topic
     * areas and interests in a structured way.
     */
    category?:
      | "Tech & Programming"
      | "Science"
      | "Movies & TV"
      | "Games"
      | "Sports"
      | "Lifestyle & Wellness"
      | "Study & Education"
      | "Art & Design"
      | "Business & Finance"
      | "News & Current Affairs"
      | undefined;

    /**
     * The sort order for the returned communities.
     *
     * This property determines how the list of communities is ordered in
     * the response.
     *
     * When 'nameMatch' is specified, communities are sorted by relevance to
     * the search term using text similarity metrics, with best matches
     * appearing first.
     *
     * When 'recentlyCreated' is specified, communities are sorted by
     * creation date in descending order (newest first).
     *
     * If neither value is provided, the system will default to 'nameMatch'
     * for search queries and 'recentlyCreated' for unfiltered lists.
     *
     * This property enables users to customize how community results are
     * presented based on their discovery goals.
     */
    sort?: "nameMatch" | "recentlyCreated" | undefined;

    /**
     * The page number of results to retrieve.
     *
     * This field specifies which page of paginated results should be
     * returned. Pages are 1-indexed (i.e., the first page is 1, not 0).
     *
     * The system returns 20 communities per page, as specified in the
     * search requirements.
     *
     * If this value is not provided, the system defaults to retrieving the
     * first page (page = 1).
     *
     * This pagination structure allows users to navigate through large
     * result sets efficiently without loading all data at once.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * The maximum number of communities to return per page.
     *
     * This property defines the page size for the search results. The
     * system supports a maximum limit of 50 communities per page to prevent
     * excessive payload sizes.
     *
     * When not specified, the system defaults to a limit of 20 communities
     * per page, consistent with the design requirements for search
     * results.
     *
     * This property allows the client to control data volume and optimize
     * performance based on display context and bandwidth constraints.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<50>)
      | undefined;
  };

  /**
   * Request schema for creating a new community.
   *
   * This object defines the required and optional metadata for creating a new
   * sub-community.
   *
   * The 'name' and 'category' fields are mandatory because they define the
   * community's identity and topic area.
   *
   * The 'description', 'rules', 'logo_url', and 'banner_url' are optional
   * fields that allow for richer community presentation.
   *
   * The 'name' field is subject to strict format validation (alphanumeric,
   * hyphen, and underscore only) and must be unique across the entire
   * platform.
   *
   * The 'category' must be one of the predefined values to ensure consistent
   * community organization.
   *
   * No other properties are allowed in this schema.
   *
   * All fields use plain text exclusively - no HTML, scripts, or special
   * formatting is allowed to maintain platform security and integrity.
   */
  export type ICreate = {
    /**
     * The unique alphanumeric identifier for the community.
     *
     * This field defines the public name that users will use to access the
     * community via URL and search.
     *
     * The name must be 5-64 alphanumeric characters and may include hyphens
     * (-) and underscores (_). No other special characters are permitted.
     *
     * The name must be globally unique across the entire platform - if the
     * supplied name already exists in the system, the creation will fail
     * with a conflict error.
     *
     * The name is immutable after creation and serves as the primary
     * identifier for the community.
     *
     * This value is required for community creation and cannot be left
     * empty or null.
     */
    name: string &
      tags.MinLength<5> &
      tags.MaxLength<64> &
      tags.Pattern<"^[a-zA-Z0-9_-]+$">;

    /**
     * The predefined category that this community belongs to.
     *
     * This field assigns the community to one of the platform's predefined
     * topic categories: ["Tech & Programming", "Science", "Movies & TV",
     * "Games", "Sports", "Lifestyle & Wellness", "Study & Education", "Art
     * & Design", "Business & Finance", "News & Current Affairs"].
     *
     * This categorization allows users to browse communities by topic of
     * interest and supports organized discovery.
     *
     * The category value must exactly match one of the predefined values in
     * the system. Any other value will be rejected.
     *
     * This property is required for community creation to ensure proper
     * organization and filtering across the platform.
     */
    category:
      | "Tech & Programming"
      | "Science"
      | "Movies & TV"
      | "Games"
      | "Sports"
      | "Lifestyle & Wellness"
      | "Study & Education"
      | "Art & Design"
      | "Business & Finance"
      | "News & Current Affairs";

    /**
     * An optional summary of the community's purpose and focus.
     *
     * This field provides additional context about the community's goals,
     * rules, and discussion topics.
     *
     * The description may contain up to 500 characters of plain text,
     * including line breaks for formatting. No HTML, markdown, or special
     * formatting is supported.
     *
     * When not provided, the system will leave this field as null. The
     * community will display without any description in its UI.
     *
     * This field helps potential members understand whether the community
     * aligns with their interests before joining.
     */
    description?: (string & tags.MaxLength<500>) | undefined;

    /**
     * Community guidelines presented as plain text with line breaks.
     *
     * This field contains the community rules formatted as a multi-line
     * string where each line represents one rule.
     *
     * A maximum of 20 rules is permitted. UI will only display the first 5
     * rules with numbering (1., 2., etc.), with a "Show all" link for
     * additional rules if needed.
     *
     * Only plain text with line breaks (\n) is allowed. No HTML, markdown,
     * or special formatting of rules is permitted.
     *
     * When not provided, the field will be set to null, and the community
     * will display without rules.
     */
    rules?: (string & tags.MaxLength<10000>) | undefined;

    /**
     * The URL to the community's logo image.
     *
     * This field provides an optional URL linking to the community's logo,
     * which should be in PNG, JPG, or SVG format.
     *
     * The URL string must be a valid web-accessible URL of up to 80,000
     * characters as defined by database schema.
     *
     * When not provided, the system will assign a default placeholder logo
     * in the UI.
     *
     * This field is for informational display only and is not used for
     * authentication or authorization purposes.
     *
     * The logo image itself is managed externally and validated only for
     * format (URL) on creation, not for image content or existence.
     */
    logo_url?: (string & tags.MaxLength<80000>) | undefined;

    /**
     * The URL to the community's banner image.
     *
     * This field provides an optional URL linking to the community's banner
     * image, which should be in PNG or JPG format.
     *
     * The URL string must be a valid web-accessible URL of up to 80,000
     * characters as defined by database schema.
     *
     * When not provided, the system will assign a default placeholder
     * banner in the UI.
     *
     * This field is for informational display only and is not used for
     * authentication or authorization purposes.
     *
     * The banner image itself is managed externally and validated only for
     * format (URL) on creation, not for image content or existence.
     */
    banner_url?: (string & tags.MaxLength<80000>) | undefined;
  };

  /**
   * Request schema for partially updating a community's editable metadata.
   *
   * This object defines the fields that can be modified after a community has
   * been created.
   *
   * Only four fields are allowed for update: description, rules, logo_url,
   * and banner_url.
   *
   * The community name is immutable and cannot be changed through this
   * operation.
   *
   * Each field in this schema is optional. If a field is omitted from the
   * request, it will remain unchanged.
   *
   * To clear a field (e.g., remove an existing logo), send the field with a
   * value of null.
   *
   * This schema implements a partial update pattern (similar to PATCH),
   * allowing clients to modify only the fields they wish to change.
   *
   * The system enforces ownership rules: only the original creator of the
   * community can perform this update.
   *
   * This request structure takes advantage of the flexible nature of partial
   * updates, minimizing data transmission and allowing precise control over
   * modifications.
   */
  export type IUpdate = {
    /**
     * An optional summary of the community's purpose and focus.
     *
     * This field provides additional context about the community's goals,
     * rules, and discussion topics.
     *
     * The description may contain up to 500 characters of plain text,
     * including line breaks for formatting. No HTML, markdown, or special
     * formatting is supported.
     *
     * When not provided, the system will leave this field unchanged.
     *
     * When provided as null, the system will clear the description (set it
     * to null).
     *
     * This field helps potential members understand whether the community
     * aligns with their interests before joining.
     */
    description?: (string & tags.MaxLength<500>) | undefined;

    /**
     * Community guidelines presented as plain text with line breaks.
     *
     * This field contains the community rules formatted as a multi-line
     * string where each line represents one rule.
     *
     * A maximum of 20 rules is permitted. UI will only display the first 5
     * rules with numbering (1., 2., etc.), with a "Show all" link for
     * additional rules if needed.
     *
     * Only plain text with line breaks (\n) is allowed. No HTML, markdown,
     * or special formatting of rules is permitted.
     *
     * When not provided, the system will leave this field unchanged.
     *
     * When provided as null, the system will clear the rules (set it to
     * null).
     *
     * This field allows community creators to update or remove their
     * community guidelines over time as the community evolves.
     *
     * Note: This field is stored as a single text field with line breaks
     * and will only be displayed with numbering (1., 2., etc.) for the
     * first 5 lines in the UI.
     */
    rules?: (string & tags.MaxLength<10000>) | undefined;

    /**
     * The URL to the community's logo image.
     *
     * This field provides an optional URL linking to the community's logo,
     * which should be in PNG, JPG, or SVG format.
     *
     * The URL string must be a valid web-accessible URL of up to 80,000
     * characters as defined by database schema.
     *
     * When not provided, the system will leave this field unchanged.
     *
     * When provided as null, the system will clear the logo (set it to
     * null) and revert to the default placeholder logo in the UI.
     *
     * This field is for informational display only and is not used for
     * authentication or authorization purposes.
     *
     * The logo image itself is managed externally and validated only for
     * format (URL) on update, not for image content or existence.
     */
    logo_url?: (string & tags.MaxLength<80000>) | undefined;

    /**
     * The URL to the community's banner image.
     *
     * This field provides an optional URL linking to the community's banner
     * image, which should be in PNG or JPG format.
     *
     * The URL string must be a valid web-accessible URL of up to 80,000
     * characters as defined by database schema.
     *
     * When not provided, the system will leave this field unchanged.
     *
     * When provided as null, the system will clear the banner (set it to
     * null) and revert to the default placeholder banner in the UI.
     *
     * This field is for informational display only and is not used for
     * authentication or authorization purposes.
     *
     * The banner image itself is managed externally and validated only for
     * format (URL) on update, not for image content or existence.
     */
    banner_url?: (string & tags.MaxLength<80000>) | undefined;
  };

  /**
   * Summary representation of a community for list views and search results.
   *
   * This schema is optimized for displaying communities in discovery
   * interfaces, including the Explore page, search results, and 'Recent
   * Communities' sidebar. It excludes sensitive or internal fields like
   * rules, logo_url, and banner_url to optimize performance and reduce
   * payload size.
   *
   * The summary data enables users to quickly assess the nature and
   * popularity of communities without loading extensive metadata, supporting
   * the platform's requirement for efficient content discovery.
   */
  export type ISummary = {
    /**
     * Unique identifier of the community.
     *
     * This UUID is the primary key for the community in the system and is
     * used to reference the community in all relationships and operations.
     * The community ID remains immutable once created.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The unique alphanumeric name of the community.
     *
     * Community names are unique across the entire platform and serve as
     * the primary identifier in URLs (e.g., '/c/[name]'). They must be 5-64
     * characters long and can contain only alphanumeric characters, hyphens
     * (-), and underscores (_). The name forms the public identity of the
     * community and cannot be changed after creation.
     */
    name: string &
      tags.MinLength<5> &
      tags.MaxLength<64> &
      tags.Pattern<"^[a-zA-Z0-9_-]+$">;

    /**
     * The community's predefined category.
     *
     * Each community must be assigned exactly one category from the
     * approved list: ["Tech & Programming", "Science", "Movies & TV",
     * "Games", "Sports", "Lifestyle & Wellness", "Study & Education", "Art
     * & Design", "Business & Finance", "News & Current Affairs"]. This
     * categorization enables content filtering, discovery, and navigation.
     */
    category:
      | "Tech & Programming"
      | "Science"
      | "Movies & TV"
      | "Games"
      | "Sports"
      | "Lifestyle & Wellness"
      | "Study & Education"
      | "Art & Design"
      | "Business & Finance"
      | "News & Current Affairs";

    /**
     * The optional summary description of the community.
     *
     * This field provides a brief explanation of the community's purpose,
     * topic focus, or guidelines. It is limited to a maximum of 500
     * characters and is displayed in community listings and search results
     * to help users determine if the community aligns with their
     * interests.
     *
     * When this field is null or empty, no description is shown to users.
     */
    description?: string | undefined;

    /**
     * The current number of members in the community.
     *
     * This field is maintained in real-time by incrementing when members
     * join and decrementing when members leave. For display purposes,
     * values of 1,000 or more are abbreviated in the UI as "1k", "10k",
     * "1m" etc., but the underlying value is stored as a raw integer.
     *
     * This count is sourced from the community_platform_community_stats
     * denormalized table to ensure rapid retrieval without expensive JOIN
     * operations.
     */
    member_count: number & tags.Type<"int32">;

    /**
     * The timestamp when the community was created.
     *
     * This field records the exact date and time when the community was
     * established by its creator. It is used for sorting in 'Recently
     * Created' search results, internal audit tracking, and determining the
     * age of the community.
     *
     * The timestamp is stored in ISO 8601 format with timezone information
     * (UTC).
     */
    created_at: string & tags.Format<"date-time">;
  };
}
