import { tags } from "typia";

export namespace IMember {
  /**
   * Request payload containing registration credentials for a new member
   * account.
   *
   * This schema defines the exact structure required for creating a new
   * member account through the /auth/member/join endpoint. It includes the
   * minimum set of fields necessary to establish a secure, authenticated user
   * identity on the platform. The system requires both an email address (for
   * identification and communication) and a password hash (for
   * authentication) to create a valid member profile. The email must be
   * unique, and the password_hash must be a correctly generated bcrypt hash.
   * No other fields from the member entity are accepted in this registration
   * request - attributes like display_name, created_at, and last_login_at are
   * auto-generated by the system.
   *
   * This payload structure is designed to follow the principle of least
   * privilege, collecting only essential authentication data to protect user
   * privacy and minimize the attack surface.
   */
  export type IJoin = {
    /**
     * Email address for member authentication and communication.
     *
     * This unique identifier is used as the primary login credential for
     * new members. It must be a valid, globally unique email address that
     * has not been previously registered in the system. The email serves
     * both as the identifier for authentication and as the contact point
     * for account notifications, password resets, and community updates.
     * The system enforces format validation and uniqueness constraints to
     * prevent duplicates and ensure deliverability.
     */
    email: string & tags.Format<"email">;

    /**
     * Cryptographically hashed password for authentication.
     *
     * This field contains the secure hash of the user's chosen password,
     * generated using a strong one-way hash algorithm (bcrypt). It is the
     * only password representation stored in the database, ensuring that
     * even if the database is compromised, the original password cannot be
     * retrieved. The hash is generated server-side upon registration and
     * cannot be provided by the client; clients must submit a plain-text
     * password which is then hashed by the backend before storage. This
     * field is required for all new member accounts and is immutable once
     * set.
     */
    password_hash: string;
  };

  /**
   * Credentials for authenticating an existing member account.
   *
   * This schema defines the exact structure of the payload expected by the
   * /auth/member/login endpoint. It contains the two essential pieces of
   * information needed for authentication: the member's unique email address
   * and their cryptographic password hash. The system checks that these
   * credentials match a record in the community_platform_member table with a
   * null deleted_at field, indicating an active account.
   *
   * For practical implementation in a real system, the client would submit a
   * plain-text password (not a hash) derived from user input. The backend
   * would then hash that password with bcrypt and compare it to the stored
   * password_hash. This schema definition is written assuming direct hash
   * comparison (for simulation or testing purposes). In production, this
   * schema would use a 'password' field of type string (plain text) instead
   * of password_hash.
   */
  export type ILogin = {
    /**
     * Email address used for member authentication.
     *
     * This field contains the email address of the existing member
     * attempting to log in to the platform. It serves as the identifier
     * that the system uses to locate the corresponding record in the
     * community_platform_member table. The system validates that this email
     * exists, is not marked as deleted (deleted_at is null), and has been
     * previously registered. It is a required field for login requests and
     * must match exactly with a registered member's email,
     * case-insensitively.
     */
    email: string & tags.Format<"email">;

    /**
     * Cryptographically hashed password for verification.
     *
     * This field contains the hashed password provided by the client during
     * login, generated from the user's plain-text password using the same
     * hashing algorithm (bcrypt) as during account creation. The system
     * compares this submitted hash against the stored password_hash in the
     * database to verify authentication. It is critical that the hashing
     * algorithm and parameters match exactly between client (for
     * demonstration purposes) and server implementation. The system never
     * stores or transmits plain-text passwords.
     *
     * NOTE: In practical implementation, the client would submit a
     * plain-text password, and the server would hash it with bcrypt. This
     * schema description assumes a test or simulation context where hash
     * values are passed directly. In production, this would be the
     * _plain-text_ password field, which the server would hash before
     * comparing.
     */
    password_hash: string;
  };

  /**
   * Request payload containing the refresh token to extend the member's
   * authenticated session.
   *
   * This object encapsulates the refresh token that allows a member to obtain
   * a new access token without re-authenticating with their email and
   * password.
   *
   * The refresh token is issued during the initial authentication process
   * (login or join) and has a validity period of 30 days. When the access
   * token expires (after 30 minutes), the member can use this refresh token
   * to obtain a new access token by calling the /auth/member/refresh
   * endpoint. This maintains a seamless user experience without requiring
   * frequent re-login.
   *
   * The refresh token must be stored securely on the client side (e.g., in
   * localStorage with proper security measures) and transmitted only over
   * HTTPS. The server validates the refresh token against the member's record
   * in the community_platform_member table, ensuring that the token's
   * original session is still valid and that the account has not been deleted
   * (deleted_at is null).
   *
   * This payload is sent as the request body in a POST request to the
   * /auth/member/refresh endpoint. The response contains a new access token
   * with a fresh 30-minute expiration and potentially a new refresh token
   * depending on system policy.
   *
   * No additional properties are allowed beyond refreshToken, as the refresh
   * operation relies solely on the token's validity, not on user credentials
   * or additional data.
   */
  export type IRefresh = {
    /**
     * The refresh token used to obtain a new access token for the member
     * account.
     *
     * This token is issued during the initial login or join operation and
     * must be stored securely on the client side. It has a longer
     * expiration (30 days) compared to the access token (30 minutes) and is
     * used to refresh the access token without requiring the user to
     * re-enter their credentials.
     *
     * The refresh token is validated by the server against the member's
     * record in the community_platform_member table to ensure session
     * integrity and security. It is not used for any other API operations
     * besides refresh.
     *
     * For security purposes, the refresh token is not included in the
     * response body of any operation other than the refresh endpoint, and
     * it must be transmitted over HTTPS.
     *
     * This field is required for the refresh operation to function and is
     * the only parameter required in the request body for the member
     * refresh endpoint.
     */
    refreshToken: string;
  };
}
