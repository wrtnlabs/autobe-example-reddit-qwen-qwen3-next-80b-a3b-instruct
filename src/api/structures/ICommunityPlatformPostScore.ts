import { tags } from "typia";

/**
 * Denormalized statistics counter for total score (upvotes minus downvotes) of
 * posts. This table is updated atomically on every vote action
 * (upvote/downvote/toggle) to avoid expensive COUNT queries on the
 * community_platform_post_votes table during top-sorting of feeds and global
 * latest sidebar. Used to calculate and display the score in posts without
 * performing joins or aggregations at query time. This is a subsidiary table
 * with denormalized data.
 *
 * The score field implements a real-time, atomic counter that tracks the net
 * difference between upvotes and downvotes on each post. This value is updated
 * every time a user toggles their vote, ensuring the Top sort order is accurate
 * and responsive. The atomic update mechanism using database transactions
 * prevents race conditions when multiple votes occur simultaneously.
 *
 * This denormalized field is essential for performance, as calculating this
 * score on-demand using JOIN and COUNT queries on the
 * community_platform_post_votes table would be prohibitively slow when many
 * posts are being sorted in real-time across feeds and the global latest
 * sidebar. The score field enables sub-millisecond retrieval of post popularity
 * rankings while maintaining data integrity through server-side atomic
 * operations.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformPostScore = {
  /**
   * The total score of the post calculated as (upvotes - downvotes). Updated
   * atomically on every vote event to optimize high-frequency sorting by
   * "Top" in feeds and Global Latest sidebar.
   *
   * The score field implements a real-time, atomic counter that tracks the
   * net difference between upvotes and downvotes on each post. This value is
   * updated every time a user toggles their vote, ensuring the Top sort order
   * is accurate and responsive. The atomic update mechanism using database
   * transactions prevents race conditions when multiple votes occur
   * simultaneously.
   *
   * This denormalized field is essential for performance, as calculating this
   * score on-demand using JOIN and COUNT queries on the
   * community_platform_post_votes table would be prohibitively slow when many
   * posts are being sorted in real-time across feeds and the global latest
   * sidebar. The score field enables sub-millisecond retrieval of post
   * popularity rankings while maintaining data integrity through server-side
   * atomic operations.
   */
  score: number & tags.Type<"int32">;
};
