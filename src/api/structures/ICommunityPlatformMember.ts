import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Member account entity that represents authenticated users with full
 * participation rights including posting, commenting, voting, and joining
 * communities. This table stores authentication credentials and user
 * preferences. Member accounts own all content they create and can edit/delete
 * only their own content.
 *
 * This entity serves as the core representation of authenticated users within
 * the community platform. It contains the essential authentication information
 * needed to verify user identity, along with optional display preferences for
 * how they appear to other users. The account is linked to all contributions
 * made by the user, including posts, comments, and votes, ensuring proper
 * ownership attribution.
 *
 * The schema strictly excludes sensitive fields like password_hash from
 * response types to maintain security. Authentication credentials are handled
 * through authorization tokens, and password_hash exists only in the database
 * for verification purposes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformMember = {
  /**
   * Primary Key.
   *
   * Unique identifier for the member account. This UUID is used to link the
   * member to their posts, comments, and other activities within the
   * platform. The system uses this identifier to enforce content ownership
   * rules, ensuring users can only edit or delete their own content.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's email address used for authentication and communication. Must be
   * unique across all members.
   *
   * This serves as the primary identifier for login and is used for sending
   * system notifications and communications. The system enforces uniqueness
   * to prevent multiple accounts with the same email.
   */
  email: string & tags.Format<"email">;

  /**
   * Optional display name for posts and comments. If empty, system defaults
   * to 'Anonymous'. Length constrained to 32 characters by business rules.
   *
   * This field allows members to customize how their name appears on posts
   * and comments. If this field is null or empty, the system displays
   * 'Anonymous' as the author name in all views. The maximum length of 32
   * characters ensures display consistency across all UI components.
   */
  display_name?: string | undefined;

  /**
   * Timestamp when the member account was created. Used for user onboarding
   * analytics and account age calculation.
   *
   * This immutable timestamp represents when the account was initially
   * registered in the system. It is used for generating account age
   * statistics, determining eligibility for certain features, and
   * understanding user retention patterns.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the member's last successful login. Used to determine
   * session validity and user activity status.
   *
   * This field is updated every time a member successfully authenticates. It
   * helps identify inactive users and is used for session management,
   * determining if the account is still in active use, and providing accurate
   * data for user engagement analytics.
   */
  last_login_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace ICommunityPlatformMember {
  /**
   * Authentication response containing JWT token.
   *
   * This schema defines the structure of the successful authentication
   * response returned after successful login or member registration. It
   * combines a stable, internal user identifier (id) with a verifiable token
   * for session authorization (token) and the member's primary contact
   * identifier (email) to enable a seamless user experience. The design
   * follows security best practices by excluding sensitive data (like
   * password_hash) while providing sufficient context for the client
   * application to function properly.
   *
   * The token property uses a reference to the standardized
   * IAuthorizationToken schema to ensure consistency across all
   * authentication responses (member, admin, etc.). This allows for uniform
   * token handling in frontend applications while maintaining flexibility for
   * future token enhancements. The response enables the client to
   * authenticate API requests for protected endpoints (post creation,
   * commenting, voting, etc.) without requiring further credential
   * submission.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated member account.
     *
     * This UUID serves as the immutable primary key for the member's
     * profile in the community_platform_member table. It is automatically
     * generated upon account creation and is used as the core identifier in
     * all authorization and access control decisions throughout the
     * platform. This ID is embedded in authentication tokens (JWT) to
     * establish user identity without exposing personal information. The
     * value is persistent across sessions and is the authoritative
     * reference linking a user to all their content, votes, and membership
     * records.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Email address of the authenticated member.
     *
     * This field contains the unique email address used by the member for
     * account registration and login. It is included in the authentication
     * response to allow client-side applications to personalize the user
     * interface (e.g., displaying name/email in profile menus) while still
     * protecting sensitive information like password_hash. The email is
     * technically immutable after account creation for consistency and
     * audit purposes, but this property is only provided for display and
     * convenience, not for account recovery or changes.
     */
    email: string & tags.Format<"email">;

    /**
     * Optional display name for the member, used for posts and comments. If
     * empty or null, system displays 'Anonymous' by default.
     *
     * This field provides a user-customized identifier for content
     * attribution. It is limited to 32 characters as specified in business
     * rules, and must not contain any special formatting characters that
     * could be used for XSS attacks.
     */
    display_name?: (string & tags.MaxLength<32>) | undefined;

    /**
     * Timestamp when the member account was created, precise to the second
     * in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).
     *
     * This immutable field establishes the account's origin and is used for
     * onboarding analytics, account age calculations, and chronological
     * ordering in administrative reviews.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the member's last successful login session, precise to
     * the second in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).
     *
     * This field is updated on each successful authentication. Used to
     * determine session validity, user activity statuses, and engagement
     * trends. NULL indicates the user has never logged in.
     *
     * The field may be NULL for newly created accounts prior to first
     * login, and remains NULL if the account is deactivated (deleted_at is
     * set).
     */
    last_login_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Timestamp when the member account was deactivated (soft delete). If
     * null, account is active; if set, the account is deleted but preserved
     * for audit trail purposes.
     *
     * This implements soft delete functionality to maintain data integrity
     * and audit history. Instead of removing records, the system marks them
     * as inactive, allowing admins to restore accounts if needed and
     * preserving associated content relationships.
     *
     * Account statuses:
     *
     * - Deleted_at = null: Active account
     * - Deleted_at = Date: Activated soft deletion, account is no longer
     *   accessible
     *
     * This prevents orphaned data and maintains referential integrity with
     * related content created by the user.
     */
    deleted_at?: (string & tags.Format<"date-time">) | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Parameters for searching and filtering member accounts by search term and
   * sorting options.
   *
   * This request object is used in member search operations to find user
   * accounts based on textual queries and sorting preferences. It supports
   * paginated results for efficient data retrieval.
   *
   * The search term matches against both email and display_name fields in the
   * community_platform_member table for broad discoverability. Sorting
   * defaults to creation date in descending order when sortBy is not
   * specified, showing newest members first.
   *
   * This structure supports the admin search endpoint
   * /communityPlatform/admin/members and is consistent with the design
   * pattern for searching user resources.
   */
  export type IRequest = {
    /**
     * Text search query to find members by email or display name. Must be
     * at least 2 characters for meaningful results.
     *
     * This query performs partial matching on both the email and
     * display_name fields to support user discovery. For example, searching
     * for 'john' will find users with email 'john@gmail.com' or
     * display_name 'John Smith'.
     */
    search?: string | undefined;

    /**
     * Field to sort the results by. Must be either 'created_at' or 'email'.
     *
     * 'created_at' sorts newest accounts first (upcoming/:desc), while
     * 'email' sorts alphabetically. This enables efficient user enumeration
     * in administrative interfaces.
     */
    sortBy?: "created_at" | "email" | undefined;

    /**
     * Sorting order of results. Must be either 'asc' (ascending) or 'desc'
     * (descending).
     *
     * Default sort order is 'desc' for created_at (newest first) and 'asc'
     * for email (A-Z).
     */
    sortOrder?: "asc" | "desc" | undefined;

    /**
     * Page number for pagination, representing results to display. Minimum
     * value is 1.
     *
     * Used with limit parameter to navigate through large result sets, with
     * 20 items per page as standard for user-friendly interfaces.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Number of results per page, maximum 100. Minimum is 1. Default is 20.
     *
     * This controls the payload size and API performance, with limits to
     * avoid overwhelming clients and servers with too much data in a single
     * response.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Simplified response version with essential properties for list views.
   *
   * This type provides a lightweight representation of member data suitable
   * for display in lists and summaries where complete user details are not
   * necessary. It omits sensitive information like password hashes while
   * preserving essential identifiers and metadata for rendering user
   * information in UI components.
   */
  export type ISummary = {
    /**
     * Primary Key.
     *
     * Unique identifier for the member account. This is essential for
     * identifying the member in system operations and linking their
     * activities across the platform. All user-specific actions are tied to
     * this identifier.
     */
    id: string & tags.Format<"uuid">;

    /**
     * User's email address used for authentication and communication.
     *
     * This is the primary identifier for account access, but is included in
     * summary to enable certain administrative workflows.
     *
     * Note: If the summary type is used in user-facing contexts, this field
     * should be omitted. For administrative use cases, it remains
     * available.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * Optional display name for posts and comments. If empty, system
     * defaults to 'Anonymous'. Length constrained to 32 characters by
     * business rules.
     *
     * This field represents how the member appears publicly on the
     * platform. If the display_name is null or empty, the system defaults
     * to 'Anonymous' in UI displays.
     */
    display_name?: string | undefined;

    /**
     * Timestamp when the member account was created.
     *
     * The creation date is included in the summary for performance
     * reporting and analytics. This timestamp is fixed and cannot be
     * modified after account creation.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of the member's last successful login.
     *
     * This is used to determine member activity status and to distinguish
     * between new, active, and inactive users. In summary contexts, this
     * helps identify recently active members for features like 'Recent
     * Members' lists.
     */
    last_login_at?: (string & tags.Format<"date-time">) | undefined;
  };
}
