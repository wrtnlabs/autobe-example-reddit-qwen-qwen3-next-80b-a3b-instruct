import { tags } from "typia";

/**
 * Request parameters for searching and filtering user communities with
 * pagination and sorting.
 *
 * This schema defines the structure of the request body for the
 * /communityPlatform/member/users/{userId}/communities endpoint when using the
 * PATCH method. It enables advanced filtering of a user's community memberships
 * based on pagination, sorting, and filtering criteria.
 *
 * The schema follows the business requirement to display up to 5 communities in
 * the 'Recent Communities' sidebar, but also supports broader administrative
 * use cases through customizable pagination and sorting options. All parameters
 * are consistent with the structure of the community_platform_user_communities
 * database table which tracks the relationship between users and communities.
 *
 * The required parameters ensure that every query has explicit pagination
 * control to prevent performance issues, while the optional community_name
 * filter provides additional flexibility for administrative tools. This design
 * allows for efficient data retrieval from the database without requiring
 * multiple queries or complicated joins.
 *
 * Key business rules this schema implements:
 *
 * - Limits maximum results to prevent overloading (max limit: 100)
 * - Enforces consistent pagination patterns
 * - Requires explicit sort criteria
 * - Validates community name format against business rules
 * - Enables administrative filtering capabilities
 *
 * This schema is used exclusively for the 'search' operation on user
 * communities and represents the complete set of parameters needed to query the
 * community_platform_user_communities table effectively.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformCommunityPlatformUserCommunityIRequest = {
  /**
   * Number of items to return per page. Must be between 1 and 100. Default is
   * 5 for the 'Recent Communities' sidebar.
   *
   * This value determines pagination size for the user communities list. The
   * system enforces a maximum limit of 100 to prevent excessive load, while
   * the business requirement for 'Recent Communities' is to display up to 5
   * communities, so this parameter allows flexible pagination for
   * administrative interfaces while maintaining the default of 5 for the main
   * user interface.
   *
   * The limit directly controls how many community records are fetched in a
   * single request from the community_platform_user_communities table. It's
   * crucial for performance optimization in both the main application and
   * administrative dashboards.
   */
  limit: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;

  /**
   * Number of items to skip before starting to return results.
   *
   * This parameter implements pagination by specifying the starting point for
   * the result set. In the context of the 'Recent Communities' feature, this
   * is typically used for 'Load more' functionality or administrative
   * pagination of user membership data. The offset works in conjunction with
   * the limit parameter to support efficient data retrieval from the
   * community_platform_user_communities table.
   *
   * For the main 'Recent Communities' sidebar (limited to 5 communities),
   * this value is typically 0, but when implementing pagination through 'Load
   * more' buttons in administrative interfaces, this value increases in steps
   * of the limit size to fetch subsequent pages.
   */
  offset: number & tags.Type<"int32"> & tags.Minimum<0>;

  /**
   * Sorting direction for the communities list.
   *
   * This property defines how the communities are ordered in the returned
   * result set. Per business requirements, the 'Recent Communities' list must
   * be ordered by most recent activity (last_interaction_at), which is the
   * default sorting option. The alternate option 'created_at' allows for
   * historical analysis in administrative contexts, showing communities in
   * order of when the membership was first established.
   *
   * The sorting is always descending (newest first) as required by the
   * 'Recent Communities' functionality. The sort parameter is critical for
   * implementing the dynamic community list that reflects user activity
   * patterns accurately. This value is derived from fields in the
   * community_platform_user_communities table.
   */
  sort: "last_interaction_at" | "created_at";

  /**
   * Sort direction, either ascending or descending.
   *
   * While the primary business requirement specifies descending order (newest
   * first) for the 'Recent Communities' list, this parameter provides
   * flexibility for administrative tools and custom reports. By default, this
   * should be set to 'desc' to comply with the requirement that communities
   * are ordered by most recent activity, but the ability to switch to 'asc'
   * enables analysis of user membership history from oldest to newest.
   *
   * This parameter works in conjunction with the sort property to precisely
   * control the sequence of returned community records from the database
   * query on community_platform_user_communities table.
   */
  direction: "asc" | "desc";

  /**
   * Filter communities by name pattern.
   *
   * This optional parameter allows filtering the list of communities to only
   * those matching the specified name pattern. The name must follow the
   * alphanumeric format with hyphen and underscore allowed (5 to 64
   * characters), matching the exact constraints of the
   * community_platform_communities.name field.
   *
   * This filter is particularly useful in administrative interfaces where
   * users need to quickly find membership records for specific communities.
   * The pattern matching is implemented via database queries on the
   * community_platform_user_communities table joined with
   * community_platform_communities to match the name field.
   *
   * This parameter is not used in the primary 'Recent Communities' sidebar
   * which shows all joined communities without filtering, but it's essential
   * for admin panels and detailed analytics.
   */
  community_name?:
    | (string &
        tags.MinLength<5> &
        tags.MaxLength<64> &
        tags.Pattern<"^[a-zA-Z0-9_-]+$">)
    | undefined;
};
