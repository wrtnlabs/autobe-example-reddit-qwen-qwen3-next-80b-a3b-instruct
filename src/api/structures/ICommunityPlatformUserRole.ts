import { tags } from "typia";

/**
 * Definition of a single user role in the community platform.
 *
 * This schema represents a complete definition of one of the platform's three
 * user roles: guest, member, or admin. Each role has a unique identifier, a
 * canonical name, and a detailed description of its permissions.
 *
 * The role definitions are stored in the community_platform_user_roles table
 * and are immutable once created. These definitions form the foundation of the
 * platform's role-based access control system, determining what actions users
 * can perform.
 *
 * This schema is used to transfer role metadata from the server to clients,
 * typically when listing all roles or retrieving information about a specific
 * role by ID.
 *
 * The structure ensures all necessary information is provided for implementing
 * access control logic on both server and client sides, including identifying
 * permissions boundaries, understanding role hierarchies, and building
 * appropriate user interfaces based on role capabilities.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ICommunityPlatformUserRole = {
  /**
   * Unique identifier of the user role.
   *
   * This UUID serves as the primary key in the community_platform_user_roles
   * database table, uniquely identifying each role definition.
   *
   * The role_id is system-generated and immutable, ensuring stable references
   * across the system for authorization checks, audit logs, and related
   * configurations.
   *
   * This identifier is used internally by the system to maintain referential
   * integrity between user accounts (which reference this ID in their role
   * assignment) and the role definitions themselves.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The precise role identifier that defines the permission set. Must be one
   * of: 'guest', 'member', or 'admin'. This value is immutable and used to
   * enforce access control rules throughout the system.
   *
   * This string represents the canonical name of the role and serves as the
   * primary way the system identifies and distinguishes between the three
   * distinct permission profiles.
   *
   * The value is case-sensitive and must exactly match one of the predefined
   * role names:
   *
   * - 'guest': Unauthenticated user with read-only access
   * - 'member': Authenticated user with full participation rights
   * - 'admin': Privileged user with elevated permissions
   *
   * These values are hardcoded in the system to ensure consistency in access
   * control policy enforcement.
   *
   * The role_name is used in API authorization validation, UI component
   * behavior, and business logic decision-making.
   */
  role_name: string;

  /**
   * A human-readable description of the role's permissions and
   * responsibilities within the platform. Clearly defines what actions users
   * with this role can perform.
   *
   * This description provides detailed context about the capabilities and
   * limitations associated with each role, serving as documentation for both
   * developers and administrators.
   *
   * For example, the description for 'member' would explain that members can
   * create posts, comment, vote, join communities, and create new
   * communities, while guests can only view content.
   *
   * The description is used in administrative interfaces to help explain role
   * assignments to team members and in client applications to provide users
   * with context about their access level.
   *
   * The description is written in natural language and can include detailed
   * explanations of permission boundaries and restrictions, such as 'only the
   * original creator can edit community metadata' or 'admin can delete any
   * post regardless of ownership'.
   */
  description: string;
};
