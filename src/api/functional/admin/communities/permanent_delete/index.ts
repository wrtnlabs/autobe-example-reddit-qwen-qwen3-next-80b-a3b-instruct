import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IResponseEmpty } from "../../../../structures/IResponseEmpty";

/**
 * Permanently delete a community and all its data (Admin only).
 *
 * This endpoint performs a hard delete of a community and all its associated
 * content, irreversibly purging data from the system.
 *
 * The operation begins by locating the community by name in the
 * communitybbs_community table. If found, the system then deletes all dependent
 * records: all posts in communitybbs_post (via cascade), all comments in
 * communitybbs_comment (via cascade), all votes in communitybbs_vote, all
 * search entries in communitybbs_search_post, communitybbs_search_comment, and
 * communitybbs_search_community.
 *
 * All deletions are performed atomically using database transactions to ensure
 * integrity. The community record itself is deleted from the
 * communitybbs_community table.
 *
 * A log entry is created in the communitybbs_log table with action_type
 * 'community_permanently_deleted', including the administrator ID and
 * timestamp. This action cannot be undone and data recovery is impossible.
 *
 * This endpoint is only accessible to a select few super-administrators after
 * multiple confirmation steps. It is not exposed in UIs and is intended only
 * for emergency legal compliance, data breaches, or CCPA/GDPR deletion requests
 * where full erasure is mandated.
 *
 * Use this only when soft-delete is insufficient and legal obligations require
 * complete data destruction.
 *
 * @param props.connection
 * @param props.name The name identifier of the community to permanently delete.
 * @path /admin/communities/:name/permanent-delete
 * @accessor api.functional.admin.communities.permanent_delete.eraseAll
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseAll(
  connection: IConnection,
  props: eraseAll.Props,
): Promise<eraseAll.Response> {
  return true === connection.simulate
    ? eraseAll.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseAll.METADATA,
          path: eraseAll.path(props),
          status: null,
        },
      );
}
export namespace eraseAll {
  export type Props = {
    /** The name identifier of the community to permanently delete. */
    name: string &
      tags.MinLength<3> &
      tags.MaxLength<32> &
      tags.Pattern<"^[a-z0-9_-]+$">;
  };
  export type Response = IResponseEmpty;

  export const METADATA = {
    method: "DELETE",
    path: "/admin/communities/:name/permanent-delete",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/admin/communities/${encodeURIComponent(props.name ?? "null")}/permanent-delete`;
  export const random = (): IResponseEmpty => typia.random<IResponseEmpty>();
  export const simulate = (
    connection: IConnection,
    props: eraseAll.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseAll.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("name")(() => typia.assert(props.name));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
