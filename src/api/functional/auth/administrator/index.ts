import { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import { ICommunitybbsAdministrator } from "../../../structures/ICommunitybbsAdministrator";

/**
 * Refresh the administrator's session token.
 *
 * This refresh endpoint allows administrators to renew their session token
 * before expiration without requiring a full login.
 *
 * The client submits a valid, non-expired session token via the Authorization
 * header. The system looks up the token in the communitybbs_session table and
 * verifies that: (1) the token matches exactly, (2) expires_at is in the
 * future, (3) is_valid is true, and (4) deleted_at is null. If all validations
 * pass, the system updates the expires_at field to extend the session by the
 * configured grace period (typically 30 days) and updates last_activity_at to
 * the current time. A new token may be generated for rotational security or the
 * same token may be reused depending on system configuration.
 *
 * This endpoint prevents token theft by rotating tokens in high-security mode
 * or issuing new tokens upon refresh. Updated session data is written
 * atomically to the database with a timestamp, and a new refresh token is
 * returned in the response. The client must use the updated token for all
 * future requests.
 *
 * The last_activity_at field is used to implement grace period behavior: if a
 * valid token is used within the last 5 minutes, it's considered active,
 * allowing seamless continuation of work. This flow enables administrators to
 * remain logged in across app sessions with minimal disruption. Revoked or
 * deleted sessions are permanently rejected.
 *
 * No other entity type (member or guest) can use this endpoint. This refresh
 * mechanism is exclusive to administrator sessions, aligning with the
 * communitybbs_administrator's distinct schema separation from the
 * communitybbs_member.
 *
 * @param props.connection
 * @setHeader token.access Authorization
 *
 * @path /auth/administrator/refresh
 * @accessor api.functional.auth.administrator.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Response = ICommunitybbsAdministrator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/administrator/refresh",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/administrator/refresh";
  export const random = (): ICommunitybbsAdministrator.IAuthorized =>
    typia.random<ICommunitybbsAdministrator.IAuthorized>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}
