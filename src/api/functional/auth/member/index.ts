import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IMember } from "../../../structures/IMember";
import { ICommunitybbsMember } from "../../../structures/ICommunitybbsMember";

/**
 * Refresh member's access token using a valid refresh token.
 *
 * This operation allows a member to renew their access token by presenting a
 * valid refresh token. The refresh token is validated against the session
 * record in the communitybbs_session table. If the session exists, has not
 * expired, is not deleted, and is marked as is_valid, a new access token is
 * issued. The existing session record is updated with a new expires_at
 * timestamp, typically extending the session by 30 days, and the
 * last_activity_at timestamp is set to the current time. The updated_at
 * timestamp is also refreshed. The actor_id in the session record references
 * the member's id in the communitybbs_member table, ensuring the refresh is
 * applied to the correct user context. This operation does not require
 * re-authentication with email and password, providing a seamless experience.
 * The refresh token must be securely stored by the client and presented in the
 * request header. No other fields in the member table are affected â€” this is
 * purely a session maintenance operation.
 *
 * @param props.connection
 * @param props.body Request body for token refresh operation with refresh token
 *   in header.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/refresh
 * @accessor api.functional.auth.member.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Request body for token refresh operation with refresh token in
     * header.
     */
    body: IMember.IRefresh;
  };
  export type Body = IMember.IRefresh;
  export type Response = ICommunitybbsMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/refresh";
  export const random = (): ICommunitybbsMember.IAuthorized =>
    typia.random<ICommunitybbsMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
