import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Join a sub-community to receive its posts in your home feed.
 *
 * This operation allows an authenticated member to join a sub-community. It
 * increments the member_count field in the corresponding record of the
 * communitybbs_community table and creates a reference between the member and
 * the community in a junction table (not shown in schema but implied by the
 * last_active_at feature). The update directly affects the community's
 * member_count used in search results and the Explore page. Concurrently, the
 * last_active_at field of the community is updated to the current timestamp to
 * affect its sorting in the 'Recent Communities' list. This change triggers
 * real-time updates to the user’s home feed to include new posts from this
 * community. The member’s own history of joined communities is tracked
 * internally to support the Home feed filtering logic. This operation aligns
 * with the presence of the member_count and last_active_at fields in the
 * communitybbs_community table, which are denormalized for performance and
 * updated by application logic on join / leave events. The join action is
 * idempotent — attempting to join an already-joined community has no effect.
 *
 * @param props.connection
 * @param props.communityId The unique identifier of the community to join. Must
 *   match an existing communitybbs_community.id. The member must not already be
 *   a member of this community.
 * @path /communities/:communityId/join
 * @accessor api.functional.communities.join.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<void> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
      );
}
export namespace create {
  export type Props = {
    /**
     * The unique identifier of the community to join. Must match an
     * existing communitybbs_community.id. The member must not already be a
     * member of this community.
     */
    communityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "POST",
    path: "/communities/:communityId/join",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communities/${encodeURIComponent(props.communityId ?? "null")}/join`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
