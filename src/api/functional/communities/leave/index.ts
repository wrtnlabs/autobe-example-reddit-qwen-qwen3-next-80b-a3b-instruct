import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Leave a sub-community to stop receiving its posts in your home feed.
 *
 * This operation allows an authenticated member to leave a sub-community they
 * previously joined. The system decrements the member_count field in the
 * corresponding communitybbs_community record and updates its last_active_at
 * field to the current timestamp to indicate activity change. This removal
 * causes the Home feed to immediately stop displaying posts from this
 * community. The member remains a registered user and can rejoin the community
 * later. The system tracks joined communities internally to manage feed
 * filtering — no explicit junction table is required by the schema. The
 * behavior is consistent with the member_count and last_active_at fields in the
 * communitybbs_community table, which represent denormalized state updated by
 * application logic on join/leave actions. This operation is idempotent —
 * attempting to leave a community already left has no effect. There is no
 * deletion of user’s historic posts or comments. This aligns with the business
 * requirement that users can leave any community at any time.
 *
 * @param props.connection
 * @param props.communityId The unique identifier of the community to leave.
 *   Must match an existing communitybbs_community.id. The member must currently
 *   be a member of this community.
 * @path /communities/:communityId/leave
 * @accessor api.functional.communities.leave.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier of the community to leave. Must match an
     * existing communitybbs_community.id. The member must currently be a
     * member of this community.
     */
    communityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communities/:communityId/leave",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communities/${encodeURIComponent(props.communityId ?? "null")}/leave`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
