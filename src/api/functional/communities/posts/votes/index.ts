import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunitybbsVote } from "../../../../structures/ICommunitybbsVote";

/**
 * Update a vote on a post.
 *
 * This operation enables authenticated members to update their vote on a post.
 * If the user has not voted on the post, a new vote is created. If they have
 * voted and the new vote matches their previous vote, the vote is removed (set
 * to 'none'). If they switch from upvote to downvote, or vice versa, the
 * previous vote is overwritten with the new one.
 *
 * The system enforces that users cannot vote on their own post, as specified in
 * the business rule: "You can't vote on your own posts/comments." This is
 * validated by comparing the authenticated user's ID with the
 * communitybbs_member_id of the post. If the user is the post author, the
 * operation will be denied with a 403 error.
 *
 * The vote does not have a comment or additional context field; it is purely
 * binary. The post score (upvotes - downvotes) is calculated dynamically at
 * query time from this table, and no aggregated field exists in the post table
 * itself, maintaining data normalization.
 *
 * This operation does not require the communityId for the voting logic itself,
 * but it is included in the path for context and consistency with the resource
 * hierarchy, enabling proper authorization and validation checks against
 * community ownership. The request body must contain the vote type as 'upvote'
 * or 'downvote'.
 *
 * The system automatically logs vote actions in the communitybbs_log table as a
 * side effect, but manual API access to these logs is not provided, consistent
 * with system-generated audit trail policy.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community containing
 *   the post
 * @param props.postId Unique identifier of the target post to be voted on
 * @param props.body The type of vote to update on the post: 'upvote' or
 *   'downvote'
 * @path /communities/:communityId/posts/:postId/votes
 * @accessor api.functional.communities.posts.votes.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target community containing the post */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post to be voted on */
    postId: string & tags.Format<"uuid">;

    /** The type of vote to update on the post: 'upvote' or 'downvote' */
    body: ICommunitybbsVote.IUpdate;
  };
  export type Body = ICommunitybbsVote.IUpdate;
  export type Response = ICommunitybbsVote;

  export const METADATA = {
    method: "PATCH",
    path: "/communities/:communityId/posts/:postId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): ICommunitybbsVote =>
    typia.random<ICommunitybbsVote>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
