import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as join from "./join/index";
export * as leave from "./leave/index";
export * as posts from "./posts/index";

/**
 * Soft delete a community by ID.
 *
 * Soft delete a community by setting the deleted_at field to the current
 * timestamp. The community is marked as archived and hidden from public views.
 * All dependent data (posts, comments, votes, and search indices) are deleted
 * cascadingly. The community record remains in the database for audit purposes
 * with its metadata preserved. This is a hard cascading deletion of related
 * content with soft archiving of the community entity, consistent with the
 * schema design. This operation is only accessible to administrators and is
 * used for content moderation and compliance. It is not a complete hard delete
 * because the community entity is preserved for audit trail, but all
 * user-facing content is permanently removed. The deletion triggers a cascade
 * that removes all communitybbs_post, communitybbs_search_post,
 * communitybbs_search_comment, and communitybbs_log entries linked to this
 * community. A log entry is created in communitybbs_log with action_type =
 * 'community_deleted' to maintain auditability. This operation cannot be undone
 * and must be used with caution. The community name is not made available for
 * reuse to prevent impersonation. Access is restricted to the administrator
 * role with no fallback to other roles for security and compliance reasons.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community to delete.
 * @path /communities/:communityId
 * @accessor api.functional.communities.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the community to delete. */
    communityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
