import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunitybbsCommunity } from "../../../structures/ICommunitybbsCommunity";
import { IPageICommunitybbsCommunity } from "../../../structures/IPageICommunitybbsCommunity";
export * as posts from "./posts/index";

/**
 * Search and retrieve a filtered, paginated list of communities.
 *
 * Retrieve a filtered and paginated list of communities from the system. This
 * operation provides advanced search capabilities for finding communities based
 * on multiple criteria including partial name matching, description keyword
 * search, category filtering, and activity-based sorting.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and multiple sort orders including 'Name Match' (default for community
 * search) and 'Recently Created'. Communities can be sorted by name similarity
 * to the search query, creation date, or popularity metrics derived from member
 * count and last active timestamp.
 *
 * Security considerations include rate limiting for search operations and
 * appropriate filtering of sensitive community information based on the
 * requesting user's authorization level. Only users with appropriate
 * permissions can access detailed community information, while basic community
 * lists may be available to authenticated users.
 *
 * This operation integrates with the communitybbs_community table as defined in
 * the Prisma schema, incorporating all available community fields including
 * name, description, category, logo, banner, rules, member_count, and
 * last_active_at. The response includes community summary information optimized
 * for list displays, with options to include additional details based on
 * authorization level. The search functionality leverages the
 * communitybbs_search_community table for optimized full-text performance
 * across name and description fields.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for community
 *   filtering
 * @path /communitybbs/communities
 * @accessor api.functional.communitybbs.communities.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for community filtering */
    body: ICommunitybbsCommunity.IRequest;
  };
  export type Body = ICommunitybbsCommunity.IRequest;
  export type Response = IPageICommunitybbsCommunity.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communitybbs/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communitybbs/communities";
  export const random = (): IPageICommunitybbsCommunity.ISummary =>
    typia.random<IPageICommunitybbsCommunity.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific community by its unique identifier.
 *
 * Retrieve detailed information about a specific community identified by its
 * unique UUID. This operation is used to display community details on the
 * community home page when accessed via /c/[name] URL structure.
 *
 * The system retrieves the community data from the communitybbs_community
 * table, incorporating all relevant fields including name, description,
 * category, logo, banner, rules, member_count, and last_active_at. The
 * community name is stored in a case-sensitive format to preserve exact URL
 * paths, but the system performs case-insensitive lookups in application logic
 * to ensure consistent access.
 *
 * Security considerations include ensuring that private or deleted communities
 * are not accessible to unauthorized users. The response includes full
 * community metadata for authorized access, with special handling for
 * communities that have been soft-deleted (where deleted_at is not null), which
 * should return a 404 Not Found response.
 *
 * This operation directly references the communitybbs_community table's fields
 * as defined in the Prisma schema. The returned data includes the complete
 * community description, rules array, and visual asset URLs. The member_count
 * is provided as a denormalized field for performance optimization, but the
 * actual membership count should be validated against the relationship to
 * communitybbs_member via junction table logic in the service layer.
 *
 * Related operations include the search operation on /communities for
 * discovering communities and the update operation for administrative
 * modifications. Error handling must account for invalid community identifiers
 * and deleted communities with appropriate 404 responses.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @path /communitybbs/communities/:communityId
 * @accessor api.functional.communitybbs.communities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunitybbsCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communitybbs/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communitybbs/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunitybbsCommunity =>
    typia.random<ICommunitybbsCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
