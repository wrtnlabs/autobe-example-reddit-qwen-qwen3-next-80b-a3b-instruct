import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunitybbsVote } from "../../../../../../structures/ICommunitybbsVote";

/**
 * Cast a vote on a post.
 *
 * This operation enables authenticated members to upvote or downvote a post,
 * contributing to the post's overall score which is displayed in UIs. The vote
 * is stored in the communitybbs_vote table, which links each vote to an actor
 * (authenticated user), a post (via post_id), and a type ('upvote' or
 * 'downvote').
 *
 * The system enforces several constraints: a user cannot vote on their own
 * post, as specified in the business rule: "You can't vote on your own
 * posts/comments." This is validated by comparing the authenticated user's ID
 * with the communitybbs_member_id of the post. If the user is the post author,
 * the operation will be denied with a 403 error.
 *
 * The user's vote state is toggleable: if the user has previously upvoted the
 * post and clicks again, the vote is removed (reverted to 'none'). If the user
 * has previously downvoted and clicks again, the vote is also removed. If the
 * user switches from upvote to downvote or vice versa, the change is processed
 * as an update.
 *
 * The vote does not have a comment or additional context field; it is purely
 * binary. The post score (upvotes - downvotes) is calculated dynamically at
 * query time from this table, and no aggregated field exists in the post table
 * itself, maintaining data normalization.
 *
 * This operation does not require the communityId for the voting logic itself,
 * but it is included in the path for context and consistency with the resource
 * hierarchy, enabling proper authorization and validation checks against
 * community ownership. The request body must contain the vote type as 'upvote'
 * or 'downvote'.
 *
 * The system automatically logs vote actions in the communitybbs_log table as a
 * side effect, but manual API access to these logs is not provided, consistent
 * with system-generated audit trail policy.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community containing
 *   the post
 * @param props.postId Unique identifier of the target post to be voted on
 * @param props.body The type of vote to cast on the post: 'upvote' or
 *   'downvote'
 * @path /communitybbs/member/communities/:communityId/posts/:postId/votes
 * @accessor api.functional.communitybbs.member.communities.posts.votes.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target community containing the post */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post to be voted on */
    postId: string & tags.Format<"uuid">;

    /** The type of vote to cast on the post: 'upvote' or 'downvote' */
    body: ICommunitybbsVote.ICreate;
  };
  export type Body = ICommunitybbsVote.ICreate;
  export type Response = ICommunitybbsVote;

  export const METADATA = {
    method: "POST",
    path: "/communitybbs/member/communities/:communityId/posts/:postId/votes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communitybbs/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): ICommunitybbsVote =>
    typia.random<ICommunitybbsVote>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a vote on a specific post.
 *
 * This operation allows an authenticated user to remove their previously cast
 * vote on a specific post within a community. The vote is identified by the
 * post_id in the path and the actor's identity from the authenticated session.
 * When deleted, the vote record is permanently removed from the
 * communitybbs_vote table, causing the post's score (upvotes minus downvotes)
 * to be recomputed without this vote.
 *
 * No request body is required, as the system uses the path parameters
 * (communityId, postId) to locate the vote and the user's authentication
 * context (from session) to identify the actor. The operation enforces that
 * only the user who originally cast the vote can delete it, ensuring ownership
 * through the actor_id foreign key relationship with communitybbs_member or
 * communitybbs_administrator.
 *
 * This operation supports the requirement that users can change their vote by
 * first deleting their existing vote and then creating a new one. The system
 * returns a 204 No Content status on successful deletion, indicating completion
 * without returning a response body.
 *
 * The system prevents users from deleting votes they did not cast and prevents
 * guests from performing this action. The deletion is immediate and
 * irreversible, as votes are stored as atomic, non-modifiable records in the
 * database. This design ensures data integrity in the scoring system and aligns
 * with the platform's requirement for authentic, accountable user feedback.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community containing
 *   the post.
 * @param props.postId Unique identifier of the target post on which the vote is
 *   being deleted.
 * @path /communitybbs/member/communities/:communityId/posts/:postId/votes
 * @accessor api.functional.communitybbs.member.communities.posts.votes.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target community containing the post. */
    communityId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the target post on which the vote is being
     * deleted.
     */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communitybbs/member/communities/:communityId/posts/:postId/votes",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communitybbs/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/votes`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
