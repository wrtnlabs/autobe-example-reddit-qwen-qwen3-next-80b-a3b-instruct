import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunitybbsComment } from "../../../../../../structures/ICommunitybbsComment";
import { IPageICommunitybbsComment } from "../../../../../../structures/IPageICommunitybbsComment";
export * as votes from "./votes/index";

/**
 * Retrieve a specific comment by ID within a post.
 *
 * This operation retrieves a specific comment by its unique identifier within a
 * post in a community. The comment is identified by its ID and must belong to a
 * specific post within a specific community. This endpoint provides detailed
 * comment information including content, author display name, creation
 * timestamp, and parent-child relationships. This functionality enables users
 * to link directly to individual comments for reference or sharing.
 *
 * Security considerations dictate that this operation requires authentication.
 * Any authenticated user (member or administrator) can retrieve comments from
 * communities they have access to. The system enforces that comments must
 * belong to the specified post and community, with appropriate foreign key
 * relations enforced at the database level. Guests cannot access these private
 * resources.
 *
 * This operation integrates with the communitybbs_comment table as defined in
 * the Prisma schema, incorporating all available comment fields including
 * content, display_name, created_at, updated_at, and the parent-child
 * relationship through communitybbs_comment_id. The response includes the full
 * comment data optimized for display in the UI, with relationships to the
 * parent post and associated community.
 *
 * Validation rules ensure that the commentId, postId, and communityId form a
 * valid relationship. If the comment does not exist, belong to the specified
 * post, or belongs to a different community, a 404 response is returned. There
 * are no rate limits on this endpoint to enable seamless user navigation, but
 * the system enforces ownership and relationship integrity through the database
 * schema.
 *
 * Related API operations include retrieving all comments for a post (PATCH
 * /communities/{communityId}/posts/{postId}/comments) and creating new comments
 * (POST /communities/{communityId}/posts/{postId}/comments). This 'at'
 * operation is typically used after searching or navigating to a specific
 * comment within a thread.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.postId Unique identifier of the target post
 * @param props.commentId Unique identifier of the target comment
 * @path /communitybbs/member/communities/:communityId/posts/:postId/comments/:commentId
 * @accessor api.functional.communitybbs.member.communities.posts.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunitybbsComment;

  export const METADATA = {
    method: "GET",
    path: "/communitybbs/member/communities/:communityId/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communitybbs/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunitybbsComment =>
    typia.random<ICommunitybbsComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing comment by ID.
 *
 * This operation updates an existing comment within a post in a community. It
 * operates on the communitybbs_comment table from the Prisma schema. The
 * comment can only be updated by its original author. Updates are subject to
 * content length restrictions as defined in business requirements (2-2000
 * characters). This endpoint enables users to correct typos or improve comment
 * content after submission.
 *
 * Security considerations mandate that only the original author of a comment
 * can modify it. The system enforces ownership verification through the
 * communitybbs_member_id relationship. If a user attempts to update a comment
 * they did not author, the system returns a forbidden response with the message
 * 'You can edit or delete only items you authored.' This protection prevents
 * unauthorized modification of others' content.
 *
 * This operation integrates with the communitybbs_comment table as defined in
 * the Prisma schema. The request payload includes the updated comment content
 * and optional display name. The response returns the updated comment entity
 * including its updated_at timestamp, which is automatically set by the service
 * layer. The updated_at field ensures clients receive the latest update
 * information for optimal UI consistency.
 *
 * Validation rules strictly enforce the content length requirement: comments
 * must be at least 2 characters long and no more than 2,000 characters. If the
 * content violates these constraints, the system returns a 400 Bad Request
 * error with the message 'Comment must be between 2 and 2,000 characters.' The
 * system also validates the comment exists, belongs to the specified post, and
 * belongs to the specified community before processing the update.
 *
 * Related API operations include retrieving a specific comment (GET
 * /communities/{communityId}/posts/{postId}/comments/{commentId}), retrieving
 * all comments (PATCH /communities/{communityId}/posts/{postId}/comments), and
 * creating new comments (POST
 * /communities/{communityId}/posts/{postId}/comments). This 'update' operation
 * is the primary method for comment editing in the UI.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.postId Unique identifier of the target post
 * @param props.commentId Unique identifier of the target comment
 * @param props.body Updated comment content and display name
 * @path /communitybbs/member/communities/:communityId/posts/:postId/comments/:commentId
 * @accessor api.functional.communitybbs.member.communities.posts.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;

    /** Updated comment content and display name */
    body: ICommunitybbsComment.IUpdate;
  };
  export type Body = ICommunitybbsComment.IUpdate;
  export type Response = ICommunitybbsComment;

  export const METADATA = {
    method: "PUT",
    path: "/communitybbs/member/communities/:communityId/posts/:postId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communitybbs/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunitybbsComment =>
    typia.random<ICommunitybbsComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a comment by ID.
 *
 * This operation permanently deletes a specific comment within a post in a
 * community. It operates on the communitybbs_comment table from the Prisma
 * schema. The comment can only be deleted by its original author or an
 * administrator. This endpoint implements hard deletion as there is no
 * deleted_at field in the schema, removing the comment completely from the
 * database.
 *
 * Per the Prisma schema, the communitybbs_comment table does not include a
 * deleted_at field, indicating that deletion is permanent rather than soft
 * deletion. When a comment is deleted, all associated data is removed from the
 * database, including its relationships to votes and parent-child
 * relationships. There is no recovery mechanism.
 *
 * Security considerations include strict ownership verification. Only the
 * original author of a comment or an administrator can delete a comment. If an
 * unauthorized user attempts deletion, the system returns a 403 Forbidden
 * response with the message 'You can edit or delete only items you authored.'
 * This ensures content integrity and prevents unauthorized removal of user
 * content.
 *
 * The system follows the business requirement that comments can be deleted by
 * their authors, but cannot be deleted by other users without administrative
 * privileges. The operation does not return any response body as per standard
 * practice for DELETE operations, with success indicated by a 204 No Content
 * response.
 *
 * Related API operations include retrieving a specific comment (GET
 * /communities/{communityId}/posts/{postId}/comments/{commentId}), updating a
 * comment (PUT /communities/{communityId}/posts/{postId}/comments/{commentId}),
 * and retrieving all comments (PATCH
 * /communities/{communityId}/posts/{postId}/comments). This 'erase' operation
 * is the primary method for comment removal in the UI.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.postId Unique identifier of the target post
 * @param props.commentId Unique identifier of the target comment
 * @path /communitybbs/member/communities/:communityId/posts/:postId/comments/:commentId
 * @accessor api.functional.communitybbs.member.communities.posts.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communitybbs/member/communities/:communityId/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communitybbs/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new comment on a specific post.
 *
 * This operation enables authenticated users to add comments to existing posts
 * within a community. The comment is stored in the communitybbs_comment table
 * and is associated with the specific post using the postId parameter and the
 * community through the communityId parameter.
 *
 * The comment content must adhere to the business rules defined in the schema:
 * minimum 2 characters and maximum 2,000 characters. The author of the comment
 * must be an authenticated member, and their display name may be provided, but
 * if included, it must not exceed 32 characters. If no display name is
 * provided, the system will use the authenticated member's display name from
 * their profile.
 *
 * Security considerations require that only authenticated members can create
 * comments; guest users are not permitted. This operation does not support
 * creating top-level comments on communities directly, only comments nested
 * under posts.
 *
 * The operation integrates with the communitybbs_comment entity and its
 * relationship to communitybbs_post, which has a foreign key relationship
 * established between post_id and id. This ensures referential integrity so
 * that comments cannot be created for non-existent posts.
 *
 * This operation triggers system-generated logging events as defined in the
 * communitybbs_log model, but there is no separate API to create or manage
 * these logs - they are created automatically as a side effect of this
 * operation. The comment's creation timestamp is automatically set by the
 * system and cannot be overridden by the client.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community where the
 *   post resides
 * @param props.postId Unique identifier of the target post to which the comment
 *   is being added
 * @param props.body Data required to create a new comment on a post
 * @path /communitybbs/member/communities/:communityId/posts/:postId/comments
 * @accessor api.functional.communitybbs.member.communities.posts.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier of the target community where the post resides */
    communityId: string & tags.Format<"uuid">;

    /**
     * Unique identifier of the target post to which the comment is being
     * added
     */
    postId: string & tags.Format<"uuid">;

    /** Data required to create a new comment on a post */
    body: ICommunitybbsComment.ICreate;
  };
  export type Body = ICommunitybbsComment.ICreate;
  export type Response = ICommunitybbsComment;

  export const METADATA = {
    method: "POST",
    path: "/communitybbs/member/communities/:communityId/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communitybbs/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): ICommunitybbsComment =>
    typia.random<ICommunitybbsComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve paginated comments for a specific post.
 *
 * This operation retrieves all comments for a specific post within a community
 * using advanced filtering and sorting capabilities. It operates on the
 * communitybbs_comment table from the Prisma schema. Supports pagination,
 * sorting by creation time, and filtering by comment parent-child
 * relationships. This endpoint enables the UI to display threaded comment
 * threads efficiently.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Comments can be sorted by creation date in ascending or
 * descending order. Parent-child relationships are preserved in the response
 * structure to support nested comment threads. Only comments belonging to the
 * specified post are returned, ensuring data integrity.
 *
 * Security considerations include rate limiting for search operations and
 * appropriate filtering of sensitive comment information based on the
 * requesting user's authorization level. Only users with appropriate
 * permissions can access detailed comments, while basic comment lists may be
 * available to authenticated users. The system enforces that comments must
 * relate to the specified post and community, with foreign key constraints
 * ensuring data consistency.
 *
 * This operation integrates with the communitybbs_comment table as defined in
 * the Prisma schema, incorporating all available comment fields and
 * relationships. The response includes comment information optimized for list
 * displays, with options to include additional thread context based on
 * authorization level and request parameters. The operation returns exactly 20
 * comments per page as specified in the business requirements, with a 'Load
 * more' button to retrieve additional pages.
 *
 * Validation rules ensure that the postId and communityId form a valid
 * relationship. If the post does not exist or does not belong to the specified
 * community, a 404 response is returned. There are no rate limits on this
 * endpoint to enable seamless user navigation, but the system enforces
 * ownership and relationship integrity through the database schema.
 *
 * Related API operations include retrieving a specific comment by ID (GET
 * /communities/{communityId}/posts/{postId}/comments/{commentId}) and creating
 * new comments (POST /communities/{communityId}/posts/{postId}/comments). This
 * 'index' operation is the primary method for loading comment threads in the
 * UI.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.postId Unique identifier of the target post
 * @param props.body Search criteria and pagination parameters for comment
 *   filtering
 * @path /communitybbs/member/communities/:communityId/posts/:postId/comments
 * @accessor api.functional.communitybbs.member.communities.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Search criteria and pagination parameters for comment filtering */
    body: ICommunitybbsComment.IRequest;
  };
  export type Body = ICommunitybbsComment.IRequest;
  export type Response = IPageICommunitybbsComment;

  export const METADATA = {
    method: "PATCH",
    path: "/communitybbs/member/communities/:communityId/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communitybbs/member/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageICommunitybbsComment =>
    typia.random<IPageICommunitybbsComment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
