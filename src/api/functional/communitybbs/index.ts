import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunitybbsSearch } from "../../structures/ICommunitybbsSearch";
import { IPageICommunitybbsPost } from "../../structures/IPageICommunitybbsPost";
export * as communities from "./communities/index";
export * as member from "./member/index";
export * as administrator from "./administrator/index";

/**
 * Search across posts, communities, and comments with advanced filters.
 *
 * This operation enables advanced, multi-type search across the Community BBS
 * platform, providing users with the ability to find relevant content by
 * keyword in posts, communities, or comments. Unlike simple search endpoints,
 * this operation uses the PATCH HTTP method to accommodate a rich request body,
 * allowing for complex filtering criteria such as search type (post, community,
 * comment), sort order, and pagination parameters.
 *
 * The search is executed against three denormalized search index tables:
 * communitybbs_search_post for posts, communitybbs_search_community for
 * communities, and communitybbs_search_comment for comments. These indexes are
 * maintained by the system through triggers on the main entity tables and are
 * optimized for fast full-text search using PostgreSQL trigram operators on
 * title, body, name, description, and content fields.
 *
 * The request body specifies the search type ('posts', 'communities', or
 * 'comments'), the search query string, the sort order (for posts: 'Newest' or
 * 'Top'; for communities: 'Name Match' or 'Recently Created'; for comments:
 * 'Newest' only), the page size (default 20), and the page offset. Responses
 * are paginated with exactly 20 results per page.
 *
 * For search results, different response shapes are returned based on the type:
 *
 * - For 'posts': returns IPageICommunitybbsPost.ISummary, with post title,
 *   community name, score, comment count, and excerpt
 * - For 'communities': returns IPageICommunitybbsCommunity.ISummary, with
 *   community name, description, logo, member count, and join button state
 * - For 'comments': returns IPageICommunitybbsComment.ISummary, with comment
 *   excerpt, author, creation time, parent post title, and community name
 *
 * This operation respects the business requirement that search results default
 * to 'Newest' for posts and comments and 'Name Match' for communities. The
 * system prevents queries under 2 characters and returns an appropriate error.
 * The operation supports session awareness, so the join status in community
 * search results is automatically adjusted based on the authenticated user's
 * membership.
 *
 * This operation is the single entry point for all search functionality on the
 * platform, unifying three previously separate search endpoints into one
 * cohesive interface. It ensures consistent behavior, performance, and user
 * experience across all content types.
 *
 * @param props.connection
 * @param props.body Search criteria including type, query, sort order, and
 *   pagination details. Must specify search type ('posts', 'communities',
 *   'comments'), query string, and may include sort and pagination parameters.
 * @path /communitybbs/search
 * @accessor api.functional.communitybbs.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria including type, query, sort order, and pagination
     * details. Must specify search type ('posts', 'communities',
     * 'comments'), query string, and may include sort and pagination
     * parameters.
     */
    body: ICommunitybbsSearch.IRequest;
  };
  export type Body = ICommunitybbsSearch.IRequest;
  export type Response = IPageICommunitybbsPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communitybbs/search",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communitybbs/search";
  export const random = (): IPageICommunitybbsPost.ISummary =>
    typia.random<IPageICommunitybbsPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
