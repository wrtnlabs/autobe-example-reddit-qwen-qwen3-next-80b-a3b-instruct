import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as posts from "./posts/index";

/**
 * Permanently delete a community by ID.
 *
 * Permanently delete a community and all its associated content from the
 * platform. This operation is exclusively available to administrators and
 * triggers a cascading deletion of all related data. When a community is
 * deleted, all posts, comments, votes, and search index entries associated with
 * the community are also removed from the database. This operation performs a
 * hard delete, meaning the community record is permanently removed from the
 * database and cannot be recovered. It is not a soft delete because, although
 * the communitybbs_community model has a deleted_at field, this field is used
 * for archival reporting and UI filtering only â€” the system does not preserve
 * records after deletion; instead, log entries are maintained for audit
 * purposes. This behavior is consistent with the requirement that
 * administrators can delete communities and purge all associated data. The
 * deletion is atomic and must succeed or fail entirely, ensuring no orphaned
 * records remain. The system will also log the deletion event in the
 * communitybbs_log table for audit trail purposes. This operation requires
 * elevated permissions because it irreversibly removes user-generated content
 * and metadata. Access is restricted to the administrator role with no fallback
 * to other roles for security and compliance reasons.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community to delete.
 * @path /communitybbs/administrator/communities/:communityId
 * @accessor api.functional.communitybbs.administrator.communities.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the community to delete. */
    communityId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communitybbs/administrator/communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communitybbs/administrator/communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
