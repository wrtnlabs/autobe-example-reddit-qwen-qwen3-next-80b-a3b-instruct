import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

/**
 * Permanently delete a comment by ID.
 *
 * This operation permanently deletes a specific comment within a post in a
 * community. It operates on the communitybbs_comment table from the Prisma
 * schema. The comment can only be deleted by its original author or an
 * administrator. This endpoint implements hard deletion as there is no
 * deleted_at field in the schema, removing the comment completely from the
 * database.
 *
 * Per the Prisma schema, the communitybbs_comment table does not include a
 * deleted_at field, indicating that deletion is permanent rather than soft
 * deletion. When a comment is deleted, all associated data is removed from the
 * database, including its relationships to votes and parent-child
 * relationships. There is no recovery mechanism.
 *
 * Security considerations include strict ownership verification. Only the
 * original author of a comment or an administrator can delete a comment. If an
 * unauthorized user attempts deletion, the system returns a 403 Forbidden
 * response with the message 'You can edit or delete only items you authored.'
 * This ensures content integrity and prevents unauthorized removal of user
 * content.
 *
 * The system follows the business requirement that comments can be deleted by
 * their authors, but cannot be deleted by other users without administrative
 * privileges. The operation does not return any response body as per standard
 * practice for DELETE operations, with success indicated by a 204 No Content
 * response.
 *
 * Related API operations include retrieving a specific comment (GET
 * /communities/{communityId}/posts/{postId}/comments/{commentId}), updating a
 * comment (PUT /communities/{communityId}/posts/{postId}/comments/{commentId}),
 * and retrieving all comments (PATCH
 * /communities/{communityId}/posts/{postId}/comments). This 'erase' operation
 * is the primary method for comment removal in the UI.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the target community
 * @param props.postId Unique identifier of the target post
 * @param props.commentId Unique identifier of the target comment
 * @path /communitybbs/administrator/communities/:communityId/posts/:postId/comments/:commentId
 * @accessor api.functional.communitybbs.administrator.communities.posts.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the target community */
    communityId: string & tags.Format<"uuid">;

    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/communitybbs/administrator/communities/:communityId/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communitybbs/administrator/communities/${encodeURIComponent(props.communityId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
