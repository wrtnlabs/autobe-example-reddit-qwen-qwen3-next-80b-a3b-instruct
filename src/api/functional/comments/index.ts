import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IComment } from "../../structures/IComment";

/**
 * Create a new comment on a post or comment.
 *
 * This operation allows a member to post a new comment on any post, creating a
 * record in the communitybbs_comment table. The comment is linked to a post via
 * communitybbs_post_id and optionally to a parent comment via
 * communitybbs_comment_id (for nested replies). The communitybbs_member_id is
 * set from the authenticated member's id in the session. The content field is
 * validated for length (2-2000 characters) against the schema constraints. The
 * display_name is copied from the member's current profile
 * (communitybbs_member.display_name) to ensure consistency even if the member
 * later changes their display_name. The created_at timestamp is set to the
 * current time, and updated_at is set to the same value. The deleted_at field
 * is null, indicating an active comment. This implementation supports the
 * business requirement that users can comment on posts without being members of
 * the community. The post reference ensures the comment is immediately
 * contextual within the correct post thread.
 *
 * @param props.connection
 * @param props.body Request body containing comment content, target post ID,
 *   and optional parent comment ID.
 * @path /comments
 * @accessor api.functional.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Request body containing comment content, target post ID, and optional
     * parent comment ID.
     */
    body: IComment.ICreate;
  };
  export type Body = IComment.ICreate;
  export type Response = IComment;

  export const METADATA = {
    method: "POST",
    path: "/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/comments";
  export const random = (): IComment => typia.random<IComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
