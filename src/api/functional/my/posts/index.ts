import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPost } from "../../../structures/IPost";

/**
 * Update the title or body of a user's own post.
 *
 * This operation allows a member to edit the title or body of a post they
 * authored. When processing, the system validates that the authenticated
 * member_id matches the communitybbs_member_id of the post being edited. The
 * operation updates the title and/or body fields in the communitybbs_post table
 * with the new values, ensuring they meet the length constraints (5-120
 * characters for title, 10-10,000 for body). The updated_at field is
 * automatically set to the current timestamp. Only the title and body can be
 * updated — the author, community, and creation timestamps are immutable. The
 * display_name field, if present, is preserved from the original record and not
 * updated to reflect the member's current display_name. Validation is applied
 * via the requirement constraints in the prisma schema and not through separate
 * validation layers. This enables users to correct typos or expand on their
 * thoughts while maintaining content integrity. This modifiability is enabled
 * by the schema's design where updated_at is present and writable, unlike
 * created_at. The operation also triggers asynchronous index updates to
 * communitybbs_search_post for search relevance.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post to be updated. Must
 *   match the communitybbs_post.id and be authored by the authenticated
 *   member.
 * @param props.body Request body containing updated title and/or body content
 *   for the post.
 * @path /my/posts/:postId
 * @accessor api.functional.my.posts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the post to be updated. Must match the
     * communitybbs_post.id and be authored by the authenticated member.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Request body containing updated title and/or body content for the
     * post.
     */
    body: IPost.IUpdate;
  };
  export type Body = IPost.IUpdate;
  export type Response = IPost;

  export const METADATA = {
    method: "PUT",
    path: "/my/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/my/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IPost => typia.random<IPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a user's own post (soft delete).
 *
 * This operation deletes a specific post authored by the authenticated member.
 * When called, it performs a soft delete by updating the deleted_at field in
 * the communitybbs_post table from null to the current timestamp. This
 * preserves historical data and allows potential recovery by moderators, as
 * required by the schema design. The soft delete implementation is possible
 * because the communitybbs_post table includes a deleted_at column of type
 * DateTime? (nullable). The operation checks that the communitybbs_member_id of
 * the post matches the id of the currently authenticated member to ensure
 * ownership. If the post is already deleted or does not exist, the system
 * returns a 404 error. This behavior aligns with the requirement that users can
 * only delete their own posts. The operation does not affect the response in
 * the search index (communitybbs_search_post) in real time — that is handled
 * asynchronously by the search service. Upon delete, the associated votes are
 * also logically deleted via cascading relationships.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post to be deleted. This
 *   must match an existing record in communitybbs_post.id. The user must be the
 *   author (communitybbs_member_id must match the authenticated member id).
 * @path /my/posts/:postId
 * @accessor api.functional.my.posts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier of the post to be deleted. This must match an
     * existing record in communitybbs_post.id. The user must be the author
     * (communitybbs_member_id must match the authenticated member id).
     */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/my/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/my/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
