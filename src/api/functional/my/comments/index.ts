import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IComment } from "../../../structures/IComment";

/**
 * Update the content of a user's own comment.
 *
 * This operation allows a member to edit the content of a comment they
 * authored. The system verifies that the authenticated member's id matches the
 * communitybbs_member_id in the specified comment record in the
 * communitybbs_comment table. It then updates the content field with the new
 * value, ensuring it is between 2 and 2,000 characters as per schema
 * constraints. The updated_at timestamp is set to the current time. The parent
 * and post associations remain unchanged. The display_name is preserved from
 * the original record. This behavior is supported by the schema's structure,
 * which includes a writable updated_at field and the ability to modify the
 * content column. This supports requirements that members can correct typos or
 * clarify their comments. The edit triggers an asynchronous update to the
 * communitybbs_search_comment index to maintain search relevance.
 *
 * @param props.connection
 * @param props.commentId The unique identifier of the comment to be updated.
 *   Must match an existing communitybbs_comment.id and the comment must have
 *   been authored by the authenticated member.
 * @param props.body Request body containing the new comment content.
 * @path /my/comments/:commentId
 * @accessor api.functional.my.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the comment to be updated. Must match an
     * existing communitybbs_comment.id and the comment must have been
     * authored by the authenticated member.
     */
    commentId: string & tags.Format<"uuid">;

    /** Request body containing the new comment content. */
    body: IComment.IUpdate;
  };
  export type Body = IComment.IUpdate;
  export type Response = IComment;

  export const METADATA = {
    method: "PUT",
    path: "/my/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/my/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IComment => typia.random<IComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a user's own comment (soft delete).
 *
 * This operation allows a member to delete a comment they authored. Upon
 * execution, it performs a soft delete by updating the deleted_at field in the
 * communitybbs_comment table to the current timestamp. This preserves the
 * comment's data for audit and moderation purposes while hiding it from regular
 * views. The system validates that the authenticated member's id matches the
 * communitybbs_member_id of the desired comment. This assertion ensures no user
 * can delete others' comments. The soft delete behavior is enabled by the
 * presence of the deleted_at column in the communitybbs_comment table in the
 * Prisma schema, which is configured as a nullable DateTime. This is consistent
 * with the business requirement that users can delete only their own content.
 * Associated votes for the comment are also logically removed via cascading
 * relationships. This operation does not affect the search index although it
 * will be updated asynchronously by the search service.
 *
 * @param props.connection
 * @param props.commentId The unique identifier of the comment to be deleted.
 *   Must match an existing communitybbs_comment.id and the comment must have
 *   been authored by the authenticated member.
 * @path /my/comments/:commentId
 * @accessor api.functional.my.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique identifier of the comment to be deleted. Must match an
     * existing communitybbs_comment.id and the comment must have been
     * authored by the authenticated member.
     */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/my/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/my/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
