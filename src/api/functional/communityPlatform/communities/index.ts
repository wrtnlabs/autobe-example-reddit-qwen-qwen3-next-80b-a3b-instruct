import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunitySummary } from "../../../structures/IPageICommunityPlatformCommunitySummary";
export * as members from "./members/index";

/**
 * Search and retrieve paginated sub-communities with advanced filtering.
 *
 * This operation enables users to discover and explore sub-communities within
 * the platform by performing advanced searches against the
 * community_platform_communities table. Unlike simple listing operations, this
 * endpoint accepts search parameters in the request body to enable complex
 * filtering based on community name patterns, categories, and membership
 * counts.
 *
 * The endpoint provides comprehensive search across all communities, returning
 * results that match the search criteria with pagination support for efficient
 * data retrieval. Users can search for communities by name using partial
 * matching, filter results by predefined categories, and discover popular
 * communities based on member counts. The response provides summary information
 * about each matching community including name, category, description, member
 * count, and creation date.
 *
 * As a PATCH operation, this endpoint properly handles situations where complex
 * search parameters would exceed URL length constraints. This design choice
 * ensures a clean, scalable interface that can support future enhancements to
 * search capabilities without requiring changes to the endpoint structure. The
 * operation directly supports the platform's requirement for users to discover
 * and join new communities based on their interests and is a critical component
 * of the Explore functionality.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for community
 *   filtering
 * @path /communityPlatform/communities
 * @accessor api.functional.communityPlatform.communities.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for community filtering */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunitySummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/communities";
  export const random = (): IPageICommunityPlatformCommunitySummary =>
    typia.random<IPageICommunityPlatformCommunitySummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific community by its name.
 *
 * This operation retrieves comprehensive metadata for a specific community
 * identified by its unique name (e.g., "tech" or "science"). The community must
 * exist and must not be deleted, otherwise a 404 Not Found error is returned.
 * This operation is publicly accessible to both authenticated members and
 * unauthenticated guests.
 *
 * The response contains all community metadata from the
 * community_platform_communities table including: name, category, description,
 * rules (as a string with line breaks), logo_url, banner_url, and member_count.
 * The member_count field is sourced from the community_platform_community_stats
 * denormalized table, ensuring efficient display of large numbers formatted
 * with "k" and "m" abbreviations (e.g., 1,000 â†’ "1k").
 *
 * The system does not include membership status in this response, as membership
 * information is tracked separately in the community_platform_user_communities
 * table and should be determined via a separate operation when needed. The
 * response only provides static public information about the community that any
 * user can view.
 *
 * The community name is immutable after creation, so the path parameter serves
 * as the primary identifier and must exactly match an existing community name
 * in the system. This design supports direct linking and sharing of community
 * pages.
 *
 * @param props.connection
 * @param props.communityName Unique alphanumeric identifier of the target
 *   community (e.g., "ai" or "health")
 * @path /communityPlatform/communities/:communityName
 * @accessor api.functional.communityPlatform.communities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique alphanumeric identifier of the target community (e.g., "ai" or
     * "health")
     */
    communityName: string &
      tags.MinLength<5> &
      tags.MaxLength<64> &
      tags.Pattern<"^[a-zA-Z0-9_-]+$">;
  };
  export type Response = ICommunityPlatformCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/communities/:communityName",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityName ?? "null")}`;
  export const random = (): ICommunityPlatformCommunity =>
    typia.random<ICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityName")(() => typia.assert(props.communityName));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
