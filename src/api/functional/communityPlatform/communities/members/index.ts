import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityPlatformUserCommunityIRequest } from "../../../../structures/ICommunityPlatformCommunityPlatformUserCommunityIRequest";
import { IPageICommunityPlatformCommunityPlatformUserCommunityISummary } from "../../../../structures/IPageICommunityPlatformCommunityPlatformUserCommunityISummary";

/**
 * Search and retrieve members of a specific community.
 *
 * Retrieve a filtered and paginated list of users who have joined a specific
 * community. This operation provides advanced search capabilities for finding
 * community members based on various criteria including username, join date,
 * and last interaction time.
 *
 * The operation supports comprehensive pagination with configurable page sizes
 * and sorting options. Members can sort by join date, last interaction, or
 * username in ascending or descending order. This endpoint is crucial for the
 * 'Recent Communities' list functionality, where the system displays the 5 most
 * recently active communities based on user interaction timestamps.
 *
 * Security considerations include rate limiting for search operations and
 * appropriate filtering of member information based on the requesting user's
 * authorization level. Only authenticated users can access member lists for
 * communities they have permission to view, while community creators and admins
 * can access complete member information. Unauthorized users attempting to
 * access this endpoint will receive a 401 Unauthorized response.
 *
 * This operation integrates with the community_platform_user_communities table
 * as defined in the Prisma schema, incorporating all available membership
 * fields and relationships. The response includes user summary information
 * optimized for list displays, with options to include additional details based
 * on authorization level.
 *
 * @param props.connection
 * @param props.communityName Unique alphanumeric identifier of the target
 *   community. Must be 5 to 64 characters and may contain hyphens (-) and
 *   underscores (_). This corresponds to the name field in the
 *   community_platform_communities table.
 * @param props.body Search criteria and pagination parameters for filtering
 *   community members
 * @path /communityPlatform/communities/:communityName/members
 * @accessor api.functional.communityPlatform.communities.members.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique alphanumeric identifier of the target community. Must be 5 to
     * 64 characters and may contain hyphens (-) and underscores (_). This
     * corresponds to the name field in the community_platform_communities
     * table.
     */
    communityName: string;

    /**
     * Search criteria and pagination parameters for filtering community
     * members
     */
    body: ICommunityPlatformCommunityPlatformUserCommunityIRequest;
  };
  export type Body = ICommunityPlatformCommunityPlatformUserCommunityIRequest;
  export type Response =
    IPageICommunityPlatformCommunityPlatformUserCommunityISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/communities/:communityName/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/communities/${encodeURIComponent(props.communityName ?? "null")}/members`;
  export const random =
    (): IPageICommunityPlatformCommunityPlatformUserCommunityISummary =>
      typia.random<IPageICommunityPlatformCommunityPlatformUserCommunityISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityName")(() => typia.assert(props.communityName));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
