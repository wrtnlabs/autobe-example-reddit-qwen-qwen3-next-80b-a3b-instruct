import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformGuestIRequest } from "../../../../structures/ICommunityPlatformGuestIRequest";
import { IPageICommunityPlatformGuest } from "../../../../structures/IPageICommunityPlatformGuest";

/**
 * Search for guest sessions with filtering and pagination.
 *
 * This endpoint provides advanced search and filtering capabilities for guest
 * account records stored in the community_platform_guest table. Unlike simple
 * GET operations, this PATCH method allows complex queries with multiple filter
 * criteria, sorting options, and pagination parameters.
 *
 * Guest accounts represent unauthenticated users with read-only access to
 * public content. Each record contains the guest's unique ID, creation
 * timestamp, and source IP address. The system uses this data for analytics,
 * spam detection, and security monitoring without storing persistent user
 * state.
 *
 * The request body accepts a search criteria object that can filter by IP
 * address, time ranges, and other metadata. Results are returned in paginated
 * format with 20 records per page and can be sorted by creation time, IP
 * address, or other fields as needed.
 *
 * This operation is restricted to administrative roles only, as guest session
 * data contains sensitive networking information that could be misused. Only
 * users with 'admin' privileges can access this endpoint to ensure proper
 * security controls are maintained.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for filtering
 *   guest sessions
 * @path /communityPlatform/admin/guests
 * @accessor api.functional.communityPlatform.admin.guests.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search criteria and pagination parameters for filtering guest
     * sessions
     */
    body: ICommunityPlatformGuestIRequest;
  };
  export type Body = ICommunityPlatformGuestIRequest;
  export type Response = IPageICommunityPlatformGuest;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/guests",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/guests";
  export const random = (): IPageICommunityPlatformGuest =>
    typia.random<IPageICommunityPlatformGuest>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
