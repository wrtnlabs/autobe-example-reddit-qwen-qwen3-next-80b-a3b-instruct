import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformMember } from "../../../../../structures/ICommunityPlatformMember";
import { IPageICommunityPlatformMember } from "../../../../../structures/IPageICommunityPlatformMember";
import { ICommunityPlatformAdmin } from "../../../../../structures/ICommunityPlatformAdmin";

/**
 * Search and retrieve paginated member accounts with advanced filtering.
 *
 * This operation provides an administrative interface to search and retrieve
 * member accounts from the community_platform_member table using complex
 * filtering criteria. Unlike simple retrieval operations, this endpoint accepts
 * search parameters in the request body to enable advanced filtering based on
 * creation dates, last login timestamps, and display name patterns.
 *
 * The endpoint is designed exclusively for administrative use and returns
 * paginated results with search results ordered by creation date descending. It
 * supports comprehensive administrative workflows including bulk user
 * management, account audits, and compliance investigations. The response
 * includes summary information for each matching member account, excluding
 * sensitive data like password hashes while providing essential metadata for
 * administrative decision-making.
 *
 * This endpoint implements the administrative functionality for user
 * management, allowing authorized administrators to efficiently navigate large
 * numbers of user accounts without exposing this capability to regular members.
 * The search functionality directly supports the platform's requirement for
 * system administrators to manage member accounts with appropriate permissions
 * and oversight.
 *
 * @param props.connection
 * @param props.body Search criteria and pagination parameters for member
 *   filtering
 * @path /communityPlatform/admin/admin/members
 * @accessor api.functional.communityPlatform.admin.admin.members.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /** Search criteria and pagination parameters for member filtering */
    body: ICommunityPlatformMember.IRequest;
  };
  export type Body = ICommunityPlatformMember.IRequest;
  export type Response = IPageICommunityPlatformMember.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/admin/admin/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/admin/admin/members";
  export const random = (): IPageICommunityPlatformMember.ISummary =>
    typia.random<IPageICommunityPlatformMember.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve specific admin account details by member ID.
 *
 * This operation retrieves detailed information about a specific administrative
 * account from the community_platform_admin table by referencing its associated
 * member ID. The endpoint is designed for administrative users who need to
 * inspect the privilege status of specific members, determine which users have
 * elevated permissions, and understand the relationship between regular member
 * accounts and admin privileges within the system.
 *
 * The response structure includes vital information about both the admin record
 * itself (creation timestamp) and its connection to the underlying member
 * account through the member_id field. This operation supports administrative
 * workflows such as privilege audits, access reviews, and user management tasks
 * that require understanding of the admin/member relationship within the
 * system.
 *
 * This endpoint implements the administrative access control functionality of
 * the platform, ensuring that only users with appropriate permissions can
 * inspect admin account details. It directly supports the platform's
 * requirement for maintaining separation of privileges and auditing
 * administrative actions while maintaining data integrity through the proper
 * referencing of the community_platform_member table.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member account associated with
 *   the admin privileges. This UUID must correspond to an existing record in
 *   the community_platform_member table that has been granted admin
 *   privileges.
 * @path /communityPlatform/admin/admin/members/:memberId
 * @accessor api.functional.communityPlatform.admin.admin.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the member account associated with the admin
     * privileges. This UUID must correspond to an existing record in the
     * community_platform_member table that has been granted admin
     * privileges.
     */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformAdmin;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/admin/admin/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/admin/admin/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ICommunityPlatformAdmin =>
    typia.random<ICommunityPlatformAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
