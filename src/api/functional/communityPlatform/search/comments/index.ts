import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformSearchComment } from "../../../../structures/ICommunityPlatformSearchComment";
import { IPageICommunityPlatformSearchComment } from "../../../../structures/IPageICommunityPlatformSearchComment";

/**
 * Search for comments across all communities with pagination and filtering.
 *
 * This operation allows users to search for comments across the entire
 * platform, returning results from the community_platform_search_comments
 * materialized view. This denormalized table is updated automatically via
 * system triggers whenever comments are created, updated, or deleted, ensuring
 * search results remain current without expensive joins during queries.
 *
 * Users can search by entering query terms that match comment content (2+
 * characters required), and results are returned in pages of 20 items with a
 * "Load more" button for pagination. The search matches against comment content
 * using full-text search capabilities with trigram indexing for efficient
 * substring matching.
 *
 * Results are sorted by creation time descending (Newest) only, as specified by
 * the business requirements. Each returned comment includes the comment content
 * excerpt (capped at 2 lines), author display name (or "Anonymous" if not set),
 * creation timestamp, parent post title (for context), and the community name.
 * The score field represents the calculated upvote-minus-downvote total.
 *
 * This endpoint does not support other sorting options (like Top) as per
 * requirements, which restricts comment sorting to Newest only. The API returns
 * skeleton comment data suitable for search result listings - full comment
 * content and threading details are available via the individual comment detail
 * endpoint.
 *
 * @param props.connection
 * @param props.body Search parameters for finding comments including query term
 *   and pagination controls
 * @path /communityPlatform/search/comments
 * @accessor api.functional.communityPlatform.search.comments.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search parameters for finding comments including query term and
     * pagination controls
     */
    body: ICommunityPlatformSearchComment.IRequest;
  };
  export type Body = ICommunityPlatformSearchComment.IRequest;
  export type Response = IPageICommunityPlatformSearchComment;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/search/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/search/comments";
  export const random = (): IPageICommunityPlatformSearchComment =>
    typia.random<IPageICommunityPlatformSearchComment>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed search information for a specific comment.
 *
 * This operation retrieves detailed information for a specific comment from the
 * search materialized view. The data is sourced from the
 * community_platform_search_comments table, which is a denormalized copy
 * updated by system triggers for efficient search performance.
 *
 * The response includes the comment's unique identifier, content text (2-2,000
 * characters), author display name (or "Anonymous" if not set), parent post
 * title and community name for context, calculated score (upvotes minus
 * downvotes), and timestamps. This detail page is accessed when a user clicks
 * on a comment from search results to see the exact match context.
 *
 * Note that this endpoint does not return parent thread nesting information or
 * comment replies - those are handled by the comment detail endpoint on the
 * post page. This endpoint provides only the essential information needed for
 * search result context, making it lightweight and fast. The content field
 * contains the full comment text that matched the search query, truncated for
 * display purposes in search results.
 *
 * @param props.connection
 * @param props.commentId Unique identifier of the comment to retrieve from
 *   search materialized view
 * @path /communityPlatform/search/comments/:commentId
 * @accessor api.functional.communityPlatform.search.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the comment to retrieve from search materialized
     * view
     */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSearchComment;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/search/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/search/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityPlatformSearchComment =>
    typia.random<ICommunityPlatformSearchComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
