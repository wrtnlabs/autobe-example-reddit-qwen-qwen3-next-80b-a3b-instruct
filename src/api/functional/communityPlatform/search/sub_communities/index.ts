import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunity } from "../../../../structures/ICommunityPlatformCommunity";
import { IPageICommunityPlatformCommunity } from "../../../../structures/IPageICommunityPlatformCommunity";
import { ICommunityPlatformSearchCommunity } from "../../../../structures/ICommunityPlatformSearchCommunity";

/**
 * Search for communities by name or description with optional sorting.
 *
 * This endpoint implements the community search functionality in the
 * 'Sub-Communities' tab of the global search system. It uses the
 * community_platform_search_communities materialized view, which is a
 * denormalized copy of data from the community_platform_communities table,
 * ensuring fast full-text search performance on community names and
 * descriptions.
 *
 * The operation accepts a request body with search parameters: a text query (q)
 * and a sort option ('nameMatch' or 'recentlyCreated'). The query is matched
 * against the name and description fields using PostgreSQL's pg_trgm extension
 * for fuzzy text matching, returning results in order of relevance when sorting
 * by 'nameMatch'. When sorting by 'recentlyCreated', results are ordered by
 * created_at in descending order. Results are paginated with 20 communities per
 * page as specified in the requirements.
 *
 * Each returned community includes the name, description (truncated to two
 * lines in the UI), category, optional logo_url, and member_count. The
 * member_count is presented as an integer and will be formatted as '1k', '10k',
 * or '1m' in the UI based on its value, per the requirements. The operation
 * also returns a boolean flag indicating whether the current authenticated user
 * has joined the community (based on the community_platform_user_communities
 * table) for UI rendering of 'Join' or 'Joined' buttons.
 *
 * Authentication is not required for this search, as community discovery is
 * permitted for guests. However, if an authenticated user is identified by the
 * session, the response includes a 'joined' flag for each community to enhance
 * the user experience. The API rejects search queries under 2 characters with a
 * 400 Bad Request response, enforcing a minimum query length as required by the
 * business rules.
 *
 * This endpoint uses the HTTP PATCH method for complex search operations with
 * request bodies, even though it only reads data. The response body uses the
 * IPageICommunityPlatformCommunity type schema that includes pagination
 * metadata and an array of community summary objects with additional
 * joined-state information for authenticated users.
 *
 * @param props.connection
 * @param props.body Search parameters for querying communities including search
 *   term, sort preference, and pagination controls.
 * @path /communityPlatform/search/sub-communities
 * @accessor api.functional.communityPlatform.search.sub_communities.search
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function search(
  connection: IConnection,
  props: search.Props,
): Promise<search.Response> {
  return true === connection.simulate
    ? search.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...search.METADATA,
          path: search.path(),
          status: null,
        },
        props.body,
      );
}
export namespace search {
  export type Props = {
    /**
     * Search parameters for querying communities including search term,
     * sort preference, and pagination controls.
     */
    body: ICommunityPlatformCommunity.IRequest;
  };
  export type Body = ICommunityPlatformCommunity.IRequest;
  export type Response = IPageICommunityPlatformCommunity;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/search/sub-communities",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/search/sub-communities";
  export const random = (): IPageICommunityPlatformCommunity =>
    typia.random<IPageICommunityPlatformCommunity>();
  export const simulate = (
    connection: IConnection,
    props: search.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: search.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed search information for a specific community.
 *
 * This operation retrieves detailed information for a specific community from
 * the search materialized view. The data is sourced from the
 * community_platform_search_communities table, which is a denormalized copy of
 * community_platform_communities updated by system triggers. This view is
 * optimized for search performance and contains fields specifically targeted
 * for user discovery workflows.
 *
 * The response includes the community's unique identifier, searchable name,
 * optional description, assigned category from the predefined list, current
 * member count (with abbreviation formatting), and creation/update timestamps.
 * This data provides context for users evaluating communities before joining.
 *
 * The member_count field is maintained atomically and may show abbreviated
 * representations (1k, 10k, 1m) in the UI, though the API returns the raw
 * numeric value. The category is restricted to the defined list: ["Tech &
 * Programming", "Science", "Movies & TV", "Games", "Sports", "Lifestyle &
 * Wellness", "Study & Education", "Art & Design", "Business & Finance", "News &
 * Current Affairs"].
 *
 * Since this endpoint serves an API for search results, it does not include
 * sensitive information like rules, logo, or banner URLs. This information is
 * only exposed through the community detail endpoint, making this a lightweight
 * view suitable for search result displays.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community to retrieve from
 *   search materialized view
 * @path /communityPlatform/search/sub-communities/:communityId
 * @accessor api.functional.communityPlatform.search.sub_communities.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the community to retrieve from search
     * materialized view
     */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformSearchCommunity;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/search/sub-communities/:communityId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/search/sub-communities/${encodeURIComponent(props.communityId ?? "null")}`;
  export const random = (): ICommunityPlatformSearchCommunity =>
    typia.random<ICommunityPlatformSearchCommunity>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
