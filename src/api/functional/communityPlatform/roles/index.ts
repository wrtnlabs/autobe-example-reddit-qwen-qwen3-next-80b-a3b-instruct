import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformUserRoleArray } from "../../../structures/ICommunityPlatformUserRoleArray";
import { ICommunityPlatformUserRole } from "../../../structures/ICommunityPlatformUserRole";

/**
 * Retrieve list of all user roles.
 *
 * This endpoint returns a complete collection of all user role definitions
 * defined in the community platform system. Each role (guest, member, admin)
 * represents a distinct permission profile that determines what actions a user
 * can perform.
 *
 * The role definitions are immutable and stored in the
 * community_platform_user_roles table, with each entry containing a unique
 * identifier, role_name, and detailed description of permissions. These role
 * definitions are referenced by user accounts to enforce access control
 * policies system-wide.
 *
 * This API is useful for administrative dashboards, client applications that
 * need to determine user capability constraints, and debugging authorization
 * issues. The response does not include any user-specific information, only the
 * canonical role definitions.
 *
 * Since this is a read-only operation that exposes public system metadata, no
 * authentication is required - even unauthenticated guests can access this
 * information to understand the platform's access control model.
 *
 * @param props.connection
 * @path /communityPlatform/roles
 * @accessor api.functional.communityPlatform.roles.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(connection: IConnection): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
      );
}
export namespace index {
  export type Response = ICommunityPlatformUserRoleArray;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/roles",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/communityPlatform/roles";
  export const random = (): ICommunityPlatformUserRoleArray =>
    typia.random<ICommunityPlatformUserRoleArray>();
  export const simulate = (_connection: IConnection): Response => {
    return random();
  };
}

/**
 * Retrieve a specific user role by ID.
 *
 * This endpoint returns the complete metadata for a single user role identified
 * by its UUID id.
 *
 * The role definition comes from the community_platform_user_roles table and
 * includes the role_name (e.g., 'guest', 'member', 'admin') and a detailed
 * description of the permissions associated with that role. The system enforces
 * that role names are unique and immutable, so this endpoint will always return
 * the same definition for a given role_id.
 *
 * This API is used by interface components that need to display role-specific
 * information, such as when showing user permissions in an admin dashboard or
 * explaining access restrictions to users.
 *
 * The endpoint requires the roleId parameter which must be a valid UUID that
 * exists in the community_platform_user_roles table. Invalid or non-existent
 * role IDs will return a 404 response.
 *
 * Since this endpoint provides only public system metadata about roles, no
 * authentication is required - even unauthenticated guests can access role
 * information to understand the platform's permission structure.
 *
 * @param props.connection
 * @param props.roleId Unique identifier of the user role to retrieve, as stored
 *   in the community_platform_user_roles table.
 * @path /communityPlatform/roles/:roleId
 * @accessor api.functional.communityPlatform.roles.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the user role to retrieve, as stored in the
     * community_platform_user_roles table.
     */
    roleId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformUserRole;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/roles/:roleId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/roles/${encodeURIComponent(props.roleId ?? "null")}`;
  export const random = (): ICommunityPlatformUserRole =>
    typia.random<ICommunityPlatformUserRole>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("roleId")(() => typia.assert(props.roleId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
