import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformPostScore } from "../../../../../structures/ICommunityPlatformPostScore";

/**
 * Retrieve the vote score for a specific post.
 *
 * This endpoint returns the current vote score for a post, calculated as the
 * difference between the total number of upvotes and downvotes. The score is
 * retrieved from the community_platform_post_stats table, a denormalized
 * statistics table that is atomically updated on every vote action to ensure
 * high-performance reads for feeds and search results.
 *
 * This operation is essential for implementing the 'Top' sort order in the home
 * feed and global search, allowing the client to display the relative
 * popularity of posts without executing expensive COUNT queries on the
 * community_platform_post_votes junction table. The score responds to vote
 * changes in real-time due to the atomic updates in the analytics layer.
 *
 * The endpoint returns only the numeric score value, as this is the only
 * information required by the client for display purposes. No additional
 * metadata is included to minimize payload size for high-frequency requests
 * across the global sidebar and main feed. The client uses this score to sort
 * and rank posts in the 'Top' view and to indicate post popularity with visual
 * cues.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the post whose score is being
 *   requested. This reference maps directly to the
 *   community_platform_post_stats.community_platform_post_id field.
 * @path /communityPlatform/analytics/posts/:postId/score
 * @accessor api.functional.communityPlatform.analytics.posts.score.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the post whose score is being requested. This
     * reference maps directly to the
     * community_platform_post_stats.community_platform_post_id field.
     */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformPostScore;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/analytics/posts/:postId/score",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/analytics/posts/${encodeURIComponent(props.postId ?? "null")}/score`;
  export const random = (): ICommunityPlatformPostScore =>
    typia.random<ICommunityPlatformPostScore>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
