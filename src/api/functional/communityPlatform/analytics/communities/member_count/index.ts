import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformCommunityStats } from "../../../../../structures/ICommunityPlatformCommunityStats";

/**
 * Retrieve the current member count for a specific community.
 *
 * This operation retrieves the current member count for a specific community
 * from the community_platform_community_stats table. This is a denormalized
 * analytics counter table that is maintained atomically during every join and
 * leave operation, ensuring high-performance read operations without requiring
 * expensive COUNT queries on the junction table.
 *
 * The value returned represents the exact count of active members currently
 * joined to the community. The UI will format this value for display according
 * to business rules: 1,000 → 1k, 10,000 → 10k, 1,000,000 → 1m. However, the API
 * returns the raw numeric value for use in internal logic and calculations.
 *
 * This endpoint supports the 'Recent Communities' sidebar and community
 * discovery features on both the Explore page and community homepage. Since the
 * counter is updated atomically in real-time, this endpoint is always accurate
 * and responsive. The community_platform_user_communities junction table
 * contains the actual membership records (with soft delete for leave history),
 * but this stats table provides real-time aggregate data for display purposes.
 *
 * @param props.connection
 * @param props.communityId Unique identifier of the community whose member
 *   count is requested
 * @path /communityPlatform/analytics/communities/:communityId/member-count
 * @accessor api.functional.communityPlatform.analytics.communities.member_count.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the community whose member count is requested */
    communityId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformCommunityStats;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/analytics/communities/:communityId/member-count",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/analytics/communities/${encodeURIComponent(props.communityId ?? "null")}/member-count`;
  export const random = (): ICommunityPlatformCommunityStats =>
    typia.random<ICommunityPlatformCommunityStats>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("communityId")(() => typia.assert(props.communityId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
