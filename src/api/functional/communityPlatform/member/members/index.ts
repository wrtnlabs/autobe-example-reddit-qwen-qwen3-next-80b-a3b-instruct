import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformMember } from "../../../../structures/ICommunityPlatformMember";

/**
 * Retrieve a specific member's profile information.
 *
 * This operation retrieves detailed information about a specific member from
 * the community_platform_member table. The endpoint allows authorized users to
 * view essential profile data including the member's email address, optional
 * display name, account creation timestamp, and last login information.
 *
 * The operation is designed with privacy considerations in mind - sensitive
 * information such as password hashes are excluded from the response. Only
 * non-sensitive profile metadata is returned to ensure user privacy. This
 * endpoint supports self-service profile access and is the authoritative source
 * for user profile information.
 *
 * This operation is critical for the platform's user management functionality.
 * It enables users to verify their account information and is referenced in
 * requirements for authentication and ownership verification, ensuring that
 * content creation and modification permissions can be properly enforced based
 * on authenticated user identity.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target member account. This
 *   UUID must correspond to an existing record in the community_platform_member
 *   table.
 * @path /communityPlatform/member/members/:memberId
 * @accessor api.functional.communityPlatform.member.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the target member account. This UUID must
     * correspond to an existing record in the community_platform_member
     * table.
     */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformMember;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/member/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/member/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): ICommunityPlatformMember =>
    typia.random<ICommunityPlatformMember>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
