import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ICommunityPlatformComment } from "../../../../structures/ICommunityPlatformComment";
import { IPageICommunityPlatformComment } from "../../../../structures/IPageICommunityPlatformComment";

/**
 * Retrieve paginated comments for a post with sorting.
 *
 * Retrieve a paginated list of comments for a specific post, ordered by
 * creation time or score. This operation supports two sorting modes: Newest (by
 * created_at descending) and Top (by score descending). The comments are
 * returned in a hierarchical structure that preserves reply relationships, with
 * each comment containing its author, content, score, and reply count.
 *
 * When the user selects "Newest" sort, comments are ordered by creation
 * timestamp descending, with ties broken by comment ID descending. When "Top"
 * sort is selected, comments are ordered by their calculated score (upvotes
 * minus downvotes) in descending order, with ties broken by creation timestamp
 * and then comment ID. The operation supports loading additional pages with the
 * "[Load more]" button.
 *
 * This operation queries the community_platform_comments table and uses the
 * community_platform_comment_stats table to obtain accurate comment scores. It
 * applies soft delete filtering to exclude comments where deleted_at is not
 * null, ensuring only active comments are returned. The user's own vote state
 * is included in the response to support optimistic UI updates. The response
 * includes the total comment count for the post, which is derived from the
 * community_platform_post_stats table.
 *
 * This endpoint is used on post detail pages to display threads and on global
 * search results under the "Comments" tab.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the target post
 * @param props.body Pagination, sorting and filtering parameters for comment
 *   retrieval
 * @path /communityPlatform/posts/:postId/comments
 * @accessor api.functional.communityPlatform.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier of the target post */
    postId: string & tags.Format<"uuid">;

    /** Pagination, sorting and filtering parameters for comment retrieval */
    body: ICommunityPlatformComment.IRequest;
  };
  export type Body = ICommunityPlatformComment.IRequest;
  export type Response = IPageICommunityPlatformComment.ISparse;

  export const METADATA = {
    method: "PATCH",
    path: "/communityPlatform/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageICommunityPlatformComment.ISparse =>
    typia.random<IPageICommunityPlatformComment.ISparse>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific comment by ID.
 *
 * Retrieve a single comment by its unique identifier. This operation returns
 * the complete comment object including its content, author information,
 * creation timestamp, score, and parent-child relationship metadata.
 *
 * The response includes the full comment hierarchy if requested, showing the
 * comment's parent and all its direct replies, enabling deep-thread navigation.
 * All comments in the hierarchy are filtered for soft deletes (deleted_at is
 * null). The author's display name is included, defaulted to "Anonymous" if not
 * set.
 *
 * This operation is used when a user clicks on a comment in a search result or
 * when deep-linking to a specific comment. It provides the data needed for
 * comment detail views and is accessed directly via URL navigation.
 *
 * This endpoint is frequently called when users navigate from search results to
 * view a comment in context, or when applications deep-link directly to
 * comments.
 *
 * @param props.connection
 * @param props.postId Unique identifier of the parent post containing the
 *   comment
 * @param props.commentId Unique identifier of the target comment
 * @path /communityPlatform/posts/:postId/comments/:commentId
 * @accessor api.functional.communityPlatform.posts.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the parent post containing the comment */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = ICommunityPlatformComment.ISparse;

  export const METADATA = {
    method: "GET",
    path: "/communityPlatform/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/communityPlatform/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): ICommunityPlatformComment.ISparse =>
    typia.random<ICommunityPlatformComment.ISparse>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
