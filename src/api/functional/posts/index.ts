import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IPost } from "../../structures/IPost";

/**
 * Create a new post in a specified community.
 *
 * This operation enables a member to create a new post in any sub-community. It
 * inserts a new record into the communitybbs_post table with the following
 * fields: communitybbs_community_id from the request, communitybbs_member_id
 * from the authenticated user's session, a title (validated to be 5-120
 * characters), a body (validated to be 10-10,000 characters), and a
 * display_name taken from the member's current profile. The created_at
 * timestamp is automatically set to the current time, and updated_at is
 * initially set to the same value. The deleted_at field is set to null,
 * indicating an active post. The system enforces validation rules from the
 * schema regarding input lengths and rejects any attempt to insert HTML or code
 * into the body. The display_name is stored as text, not as a reference,
 * ensuring the post's author display remains consistent even if the member
 * later changes their profile display_name. This implementation matches the
 * schema specification and business requirement that posting is allowed without
 * prior community membership.
 *
 * @param props.connection
 * @param props.body Request body containing post details including
 *   community_id, title, body, and optional display_name.
 * @path /posts
 * @accessor api.functional.posts.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Request body containing post details including community_id, title,
     * body, and optional display_name.
     */
    body: IPost.ICreate;
  };
  export type Body = IPost.ICreate;
  export type Response = IPost;

  export const METADATA = {
    method: "POST",
    path: "/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/posts";
  export const random = (): IPost => typia.random<IPost>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
