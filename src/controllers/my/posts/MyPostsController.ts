import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { putmyPostsPostId } from "../../../providers/putmyPostsPostId";
import { MemberAuth } from "../../../decorators/MemberAuth";
import { MemberPayload } from "../../../decorators/payload/MemberPayload";
import { deletemyPostsPostId } from "../../../providers/deletemyPostsPostId";

import { IPost } from "../../../api/structures/IPost";

@Controller("/my/posts/:postId")
export class MyPostsController {
  /**
   * Update the title or body of a user's own post.
   *
   * This operation allows a member to edit the title or body of a post they
   * authored. When processing, the system validates that the authenticated
   * member_id matches the communitybbs_member_id of the post being edited. The
   * operation updates the title and/or body fields in the communitybbs_post
   * table with the new values, ensuring they meet the length constraints (5-120
   * characters for title, 10-10,000 for body). The updated_at field is
   * automatically set to the current timestamp. Only the title and body can be
   * updated — the author, community, and creation timestamps are immutable. The
   * display_name field, if present, is preserved from the original record and
   * not updated to reflect the member's current display_name. Validation is
   * applied via the requirement constraints in the prisma schema and not
   * through separate validation layers. This enables users to correct typos or
   * expand on their thoughts while maintaining content integrity. This
   * modifiability is enabled by the schema's design where updated_at is present
   * and writable, unlike created_at. The operation also triggers asynchronous
   * index updates to communitybbs_search_post for search relevance.
   *
   * @param connection
   * @param postId The unique identifier of the post to be updated. Must match
   *   the communitybbs_post.id and be authored by the authenticated member.
   * @param body Request body containing updated title and/or body content for
   *   the post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IPost.IUpdate,
  ): Promise<IPost> {
    try {
      return await putmyPostsPostId({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a user's own post (soft delete).
   *
   * This operation deletes a specific post authored by the authenticated
   * member. When called, it performs a soft delete by updating the deleted_at
   * field in the communitybbs_post table from null to the current timestamp.
   * This preserves historical data and allows potential recovery by moderators,
   * as required by the schema design. The soft delete implementation is
   * possible because the communitybbs_post table includes a deleted_at column
   * of type DateTime? (nullable). The operation checks that the
   * communitybbs_member_id of the post matches the id of the currently
   * authenticated member to ensure ownership. If the post is already deleted or
   * does not exist, the system returns a 404 error. This behavior aligns with
   * the requirement that users can only delete their own posts. The operation
   * does not affect the response in the search index (communitybbs_search_post)
   * in real time — that is handled asynchronously by the search service. Upon
   * delete, the associated votes are also logically deleted via cascading
   * relationships.
   *
   * @param connection
   * @param postId The unique identifier of the post to be deleted. This must
   *   match an existing record in communitybbs_post.id. The user must be the
   *   author (communitybbs_member_id must match the authenticated member id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletemyPostsPostId({
        member,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
