import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postcomments } from "../../providers/postcomments";
import { MemberAuth } from "../../decorators/MemberAuth";
import { MemberPayload } from "../../decorators/payload/MemberPayload";

import { IComment } from "../../api/structures/IComment";

@Controller("/comments")
export class CommentsController {
  /**
   * Create a new comment on a post or comment.
   *
   * This operation allows a member to post a new comment on any post, creating
   * a record in the communitybbs_comment table. The comment is linked to a post
   * via communitybbs_post_id and optionally to a parent comment via
   * communitybbs_comment_id (for nested replies). The communitybbs_member_id is
   * set from the authenticated member's id in the session. The content field is
   * validated for length (2-2000 characters) against the schema constraints.
   * The display_name is copied from the member's current profile
   * (communitybbs_member.display_name) to ensure consistency even if the member
   * later changes their display_name. The created_at timestamp is set to the
   * current time, and updated_at is set to the same value. The deleted_at field
   * is null, indicating an active comment. This implementation supports the
   * business requirement that users can comment on posts without being members
   * of the community. The post reference ensures the comment is immediately
   * contextual within the correct post thread.
   *
   * @param connection
   * @param body Request body containing comment content, target post ID, and
   *   optional parent comment ID.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IComment.ICreate,
  ): Promise<IComment> {
    try {
      return await postcomments({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
