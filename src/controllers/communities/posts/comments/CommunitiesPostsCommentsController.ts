import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postcommunitiesCommunityIdPostsPostIdComments } from "../../../../providers/postcommunitiesCommunityIdPostsPostIdComments";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { putcommunitiesCommunityIdPostsPostIdCommentsCommentId } from "../../../../providers/putcommunitiesCommunityIdPostsPostIdCommentsCommentId";
import { deletecommunitiesCommunityIdPostsPostIdCommentsCommentId } from "../../../../providers/deletecommunitiesCommunityIdPostsPostIdCommentsCommentId";

import { ICommunitybbsComment } from "../../../../api/structures/ICommunitybbsComment";

@Controller("/communities/:communityId/posts/:postId/comments")
export class CommunitiesPostsCommentsController {
  /**
   * Create a new comment on a specific post.
   *
   * This operation enables authenticated users to add comments to existing
   * posts within a community. The comment is stored in the communitybbs_comment
   * table and is associated with the specific post using the postId parameter
   * and the community through the communityId parameter.
   *
   * The comment content must adhere to the business rules defined in the
   * schema: minimum 2 characters and maximum 2,000 characters. The author of
   * the comment must be an authenticated member, and their display name may be
   * provided, but if included, it must not exceed 32 characters. If no display
   * name is provided, the system will use the authenticated member's display
   * name from their profile.
   *
   * Security considerations require that only authenticated members can create
   * comments; guest users are not permitted. This operation does not support
   * creating top-level comments on communities directly, only comments nested
   * under posts.
   *
   * The operation integrates with the communitybbs_comment entity and its
   * relationship to communitybbs_post, which has a foreign key relationship
   * established between post_id and id. This ensures referential integrity so
   * that comments cannot be created for non-existent posts.
   *
   * This operation triggers system-generated logging events as defined in the
   * communitybbs_log model, but there is no separate API to create or manage
   * these logs - they are created automatically as a side effect of this
   * operation. The comment's creation timestamp is automatically set by the
   * system and cannot be overridden by the client.
   *
   * @param connection
   * @param communityId Unique identifier of the target community where the post
   *   resides
   * @param postId Unique identifier of the target post to which the comment is
   *   being added
   * @param body Data required to create a new comment on a post
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunitybbsComment.ICreate,
  ): Promise<ICommunitybbsComment> {
    try {
      return await postcommunitiesCommunityIdPostsPostIdComments({
        member,
        communityId,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing comment.
   *
   * This operation allows an authenticated user to modify the content of a
   * comment they previously authored on a post. The comment is located by its
   * unique commentId, and ownership is verified by comparing the authenticated
   * user's ID with the communitybbs_member_id field in the communitybbs_comment
   * table.
   *
   * The update request must provide new content for the comment that adheres to
   * the schema constraints: between 2 and 2,000 characters in length. The
   * display_name field may be updated if desired, but it must not exceed 32
   * characters. The communityId and postId parameters in the path are for
   * context and validation purposes but cannot be modified as they are fixed by
   * the original comment record.
   *
   * If the authenticated user is not the original author of the comment or an
   * administrator, the operation will be denied with a 403 error. This
   * implements the business logic rule that "You can edit or delete only items
   * you authored."
   *
   * This operation automatically updates the updated_at timestamp in the
   * communitybbs_comment table as defined in the Prisma schema, which is used
   * to reflect comment revisions and support ordering in UI displays. The
   * system also records an audit log entry in the communitybbs_log table as a
   * side effect, but there is no direct API to manipulate these logs.
   *
   * The comment's creation timestamp (created_at) remains immutable after
   * comment creation according to schema design principles, ensuring historical
   * accuracy and compliance with the requirements that specify no modification
   * of creation times.
   *
   * @param connection
   * @param communityId Unique identifier of the target community containing the
   *   post and comment
   * @param postId Unique identifier of the target post containing the comment
   * @param commentId Unique identifier of the target comment to be updated
   * @param body Updated content and optional display_name for the comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunitybbsComment.IUpdate,
  ): Promise<ICommunitybbsComment> {
    try {
      return await putcommunitiesCommunityIdPostsPostIdCommentsCommentId({
        member,
        communityId,
        postId,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a comment.
   *
   * This operation marks a comment as deleted by setting the deleted_at
   * timestamp to the current time. The comment record is preserved in the
   * database for audit purposes but is excluded from normal queries and
   * displays, as defined by the communitybbs_comment model which includes a
   * deleted_at field.
   *
   * The deletion is restricted to the comment's original author (authenticated
   * member) or an administrator with elevated privileges. Ownership
   * verification is performed by comparing the authenticated user's ID against
   * the communitybbs_member_id field in the communitybbs_comment table. The
   * operation will fail with a 403 error if the requester is not the author or
   * an administrator.
   *
   * This operation adheres strictly to the business rule: "You can edit or
   * delete only items you authored." unless the user has an administrator
   * role.
   *
   * When a comment is soft-deleted, it remains in the database with its
   * completed data, and any nested replies are also marked as deleted via the
   * foreign key relationships. This preserves data integrity and enables
   * potential recovery while hiding the content from users.
   *
   * The system automatically logs this deletion event in the communitybbs_log
   * table as a side effect (action_type: 'comment_deleted'), but there is no
   * separate API endpoint to create or manage these logs.
   *
   * This soft delete is intentional and consistent with the design of the
   * communitybbs_comment entity, which includes a deleted_at field, and aligns
   * with the system's philosophy of preserving data for compliance and audit
   * purposes rather than permanent removal.
   *
   * @param connection
   * @param communityId Unique identifier of the target community containing the
   *   post and comment
   * @param postId Unique identifier of the target post containing the comment
   * @param commentId Unique identifier of the target comment to be soft-deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletecommunitiesCommunityIdPostsPostIdCommentsCommentId({
        member,
        communityId,
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
