import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deletecommunitiesCommunityIdLeave } from "../../../providers/deletecommunitiesCommunityIdLeave";
import { MemberAuth } from "../../../decorators/MemberAuth";
import { MemberPayload } from "../../../decorators/payload/MemberPayload";

@Controller("/communities/:communityId/leave")
export class CommunitiesLeaveController {
  /**
   * Leave a sub-community to stop receiving its posts in your home feed.
   *
   * This operation allows an authenticated member to leave a sub-community they
   * previously joined. The system decrements the member_count field in the
   * corresponding communitybbs_community record and updates its last_active_at
   * field to the current timestamp to indicate activity change. This removal
   * causes the Home feed to immediately stop displaying posts from this
   * community. The member remains a registered user and can rejoin the
   * community later. The system tracks joined communities internally to manage
   * feed filtering — no explicit junction table is required by the schema. The
   * behavior is consistent with the member_count and last_active_at fields in
   * the communitybbs_community table, which represent denormalized state
   * updated by application logic on join/leave actions. This operation is
   * idempotent — attempting to leave a community already left has no effect.
   * There is no deletion of user’s historic posts or comments. This aligns with
   * the business requirement that users can leave any community at any time.
   *
   * @param connection
   * @param communityId The unique identifier of the community to leave. Must
   *   match an existing communitybbs_community.id. The member must currently be
   *   a member of this community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletecommunitiesCommunityIdLeave({
        member,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
