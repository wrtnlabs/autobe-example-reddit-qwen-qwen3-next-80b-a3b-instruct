import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postcommunitiesCommunityIdJoin } from "../../../providers/postcommunitiesCommunityIdJoin";
import { MemberAuth } from "../../../decorators/MemberAuth";
import { MemberPayload } from "../../../decorators/payload/MemberPayload";

@Controller("/communities/:communityId/join")
export class CommunitiesJoinController {
  /**
   * Join a sub-community to receive its posts in your home feed.
   *
   * This operation allows an authenticated member to join a sub-community. It
   * increments the member_count field in the corresponding record of the
   * communitybbs_community table and creates a reference between the member and
   * the community in a junction table (not shown in schema but implied by the
   * last_active_at feature). The update directly affects the community's
   * member_count used in search results and the Explore page. Concurrently, the
   * last_active_at field of the community is updated to the current timestamp
   * to affect its sorting in the 'Recent Communities' list. This change
   * triggers real-time updates to the user’s home feed to include new posts
   * from this community. The member’s own history of joined communities is
   * tracked internally to support the Home feed filtering logic. This operation
   * aligns with the presence of the member_count and last_active_at fields in
   * the communitybbs_community table, which are denormalized for performance
   * and updated by application logic on join / leave events. The join action is
   * idempotent — attempting to join an already-joined community has no effect.
   *
   * @param connection
   * @param communityId The unique identifier of the community to join. Must
   *   match an existing communitybbs_community.id. The member must not already
   *   be a member of this community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await postcommunitiesCommunityIdJoin({
        member,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
