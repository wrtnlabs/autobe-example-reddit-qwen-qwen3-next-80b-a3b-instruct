import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthMemberJoin } from "../../../providers/postAuthMemberJoin";
import { MemberAuth } from "../../../decorators/MemberAuth";
import { MemberPayload } from "../../../decorators/payload/MemberPayload";
import { postAuthMemberLogin } from "../../../providers/postAuthMemberLogin";
import { postAuthMemberRefresh } from "../../../providers/postAuthMemberRefresh";

import { ICommunityPlatformMember } from "../../../api/structures/ICommunityPlatformMember";
import { IMember } from "../../../api/structures/IMember";

@Controller("/auth/member")
export class AuthMemberController {
  /**
   * Create new member account with email and password hash for authentication.
   *
   * This API operation creates a new member account in the communityPlatform
   * system, enabling users to become authenticated participants. It maps
   * directly to the community_platform_member table where the account's email,
   * password_hash, and created_at fields are persisted.
   *
   * The operation requires the user to provide a valid email address and
   * password, which are securely stored in the system. The email field is
   * unique across all members and is used as the primary identifier for
   * authentication. The password is hashed using industry-standard
   * cryptographic methods before being stored, ensuring security compliance.
   * The created_at timestamp is automatically generated upon record creation.
   *
   * This functionality supports the member role's requirement to join the
   * platform, complementing the login and refresh operations for full
   * authentication flow. It aligns with the business rule that member accounts
   * are needed for posting, commenting, voting, joining communities, and
   * creating communities.
   *
   * Security considerations include ensuring HTTPS transport, enforcing strong
   * password policies, and validating email format. The schema explicitly
   * includes both email and password_hash fields which are required for this
   * operation, and no other fields from the member table are necessary for
   * initial account creation.
   *
   * This join operation is the first step in a member's journey on the
   * platform, enabling them to subsequently perform login and refresh
   * operations to maintain their authenticated session. Without successful
   * execution of this operation, users remain in guest mode with limited
   * functionality.
   *
   * @param connection
   * @param body Payload containing registration credentials for a new member
   *   account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IMember.IJoin,
  ): Promise<ICommunityPlatformMember.IAuthorized> {
    try {
      return await postAuthMemberJoin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate member with email and password to generate access and refresh
   * tokens.
   *
   * This API operation authenticates an existing member using email and
   * password credentials to establish a secure session. It validates the
   * provided credentials against the community_platform_member table,
   * specifically checking the email field for existence and the password_hash
   * field for cryptographic match.
   *
   * The operation takes an email and password as input, verifies that the email
   * corresponds to an active member account (deleted_at field is null), and
   * confirms the password matches the stored hash using bcrypt or similar
   * secure algorithm. Upon successful verification, it generates a JWT access
   * token with a 30-minute expiration and a refresh token with a 30-day
   * expiration as per the system's authentication policy.
   *
   * This functionality supports the member role's requirement to authenticate
   * and access protected operations like posting, commenting, voting, joining
   * communities, and creating communities. The schema contains both email and
   * password_hash fields which are required for this authentication check,
   * making this operation directly supported by the database structure.
   *
   * Security considerations include using HTTPS for transport, implementing
   * rate limiting to prevent brute force attacks, and ensuring tokens are
   * stored securely on the client side. The generated tokens are signed with a
   * secret key and contain the user's ID and role information for authorization
   * purposes.
   *
   * This login operation works in conjunction with the join and refresh
   * operations to form a complete authentication workflow, allowing members to
   * securely interact with all protected features of the community platform.
   *
   * @param connection
   * @param body Credentials for authenticating an existing member account.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IMember.ILogin,
  ): Promise<ICommunityPlatformMember.IAuthorized> {
    try {
      return await postAuthMemberLogin({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh access token using valid refresh token to extend member session
   * without re-authentication.
   *
   * This API operation refreshes the JWT access token for an authenticated
   * member using a valid refresh token. It validates the refresh token
   * signature and checks that the underlying member account is still active
   * (deleted_at field is null).
   *
   * When a refresh request is received, the system verifies the refresh token's
   * integrity and expiry, then checks the associated member account in the
   * community_platform_member table. If the account is active, it generates a
   * new access token with a fresh 30-minute expiration while preserving the
   * 30-day refresh token. The last_login_at field is updated to reflect the
   * most recent authentic activity, helping track user sessions and implement
   * session management policies.
   *
   * This refresh functionality supports the member role's authentication
   * requirements by enabling users to maintain continuous access to protected
   * features like posting, commenting, voting, joining communities, and
   * creating communities without requiring re-authentication with their
   * credentials. This improves user experience while maintaining security
   * boundaries.
   *
   * The operation depends on the member table's existence and validates against
   * its structure. The refresh flow is essential for the platform's session
   * management strategy, complementing the login and join operations to form a
   * complete authentication cycle.
   *
   * Security considerations include token revocation lists for compromised
   * tokens, secure token storage on the client side, and protection against
   * token theft or replay attacks.
   *
   * @param connection
   * @param body Refresh token to extend the member's authenticated session.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IMember.IRefresh,
  ): Promise<ICommunityPlatformMember.IAuthorized> {
    try {
      return await postAuthMemberRefresh({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
