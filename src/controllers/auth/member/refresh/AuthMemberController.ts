import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthMemberRefresh } from "../../../../providers/postauthMemberRefresh";

import { ICommunitybbsMember } from "../../../../api/structures/ICommunitybbsMember";
import { IMember } from "../../../../api/structures/IMember";

@Controller("/auth/member/refresh")
export class AuthMemberController {
  /**
   * Refresh member's access token using a valid refresh token.
   *
   * This operation allows a member to renew their access token by presenting a
   * valid refresh token. The refresh token is validated against the session
   * record in the communitybbs_session table. If the session exists, has not
   * expired, is not deleted, and is marked as is_valid, a new access token is
   * issued. The existing session record is updated with a new expires_at
   * timestamp, typically extending the session by 30 days, and the
   * last_activity_at timestamp is set to the current time. The updated_at
   * timestamp is also refreshed. The actor_id in the session record references
   * the member's id in the communitybbs_member table, ensuring the refresh is
   * applied to the correct user context. This operation does not require
   * re-authentication with email and password, providing a seamless experience.
   * The refresh token must be securely stored by the client and presented in
   * the request header. No other fields in the member table are affected â€” this
   * is purely a session maintenance operation.
   *
   * @param connection
   * @param body Request body for token refresh operation with refresh token in
   *   header.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async refresh(
    @TypedBody()
    body: IMember.IRefresh,
  ): Promise<ICommunitybbsMember.IAuthorized> {
    try {
      return await postauthMemberRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
