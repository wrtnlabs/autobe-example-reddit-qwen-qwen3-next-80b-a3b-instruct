import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthAdminJoin } from "../../../providers/postAuthAdminJoin";
import { AdminAuth } from "../../../decorators/AdminAuth";
import { AdminPayload } from "../../../decorators/payload/AdminPayload";
import { postAuthAdminLogin } from "../../../providers/postAuthAdminLogin";
import { postAuthAdminRefresh } from "../../../providers/postAuthAdminRefresh";

import { ICommunityPlatformAdmin } from "../../../api/structures/ICommunityPlatformAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register a new admin user by creating a member account and elevating to
   * admin privilege.
   *
   * This API operation handles registration for admin users on the community
   * platform. The operation follows a two-step process consistent with the
   * Prisma schema: first, it creates a new member account in the
   * community_platform_member table with required fields including email,
   * password_hash (for authentication), and optional display_name. Then, it
   * creates a corresponding admin record in the community_platform_admin table
   * that references the member_id, establishing the admin privilege level. This
   * two-table approach ensures separation of concerns between authentication
   * credentials and privilege levels. The community_platform_member table
   * contains all necessary fields for user registration: email (unique
   * identifier), password_hash (mandatory for secure authentication), and
   * optional display_name (up to 32 characters). The operation does not create
   * the admin record first because admin privileges are granted to existing
   * members, not as standalone entities. The success of this operation depends
   * on the existence and proper validation of the community_platform_member
   * schema fields. The operation handles new user registration for the admin
   * role only and requires the user to provide valid credentials that satisfy
   * the member creation constraints defined in the schema.
   *
   * @param connection
   * @param body Request body for admin registration containing authentication
   *   credentials and optional display name as defined in the
   *   community_platform_member schema.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformAdmin.IJoin,
  ): Promise<ICommunityPlatformAdmin.IAuthorized> {
    try {
      return await postAuthAdminJoin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate admin user with email and password to obtain JWT tokens.
   *
   * This API operation handles the authentication process for admin users on
   * the community platform. It validates user credentials against the
   * community_platform_member table, specifically checking the email field that
   * serves as the unique identifier and the password_hash field that contains
   * the hashed authentication credential. These fields are mandatory according
   * to the Prisma schema definition of the community_platform_member table. The
   * operation accepts an email address and password (which is hashed
   * server-side) and verifies them against the stored values in the database.
   * Upon successful validation, the system generates JWT access and refresh
   * tokens to manage the user's session. The operation does not interact with
   * any other tables or fields for authentication purposes, as the membership
   * authentication logic is contained entirely within the
   * community_platform_member table with its defined fields: email and
   * password_hash. The operation returns a standardized response format that
   * conforms to the ICommunityPlatformAdmin.IAuthorized schema, containing the
   * access and refresh tokens. The response does not include sensitive user
   * data beyond what's necessary for session management, following security
   * best practices.
   *
   * @param connection
   * @param body Request body containing authentication credentials for admin
   *   login, including email address and password as defined in
   *   community_platform_member schema.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformAdmin.ILogin,
  ): Promise<ICommunityPlatformAdmin.IAuthorized> {
    try {
      return await postAuthAdminLogin({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh expired admin access token using a refresh token to maintain
   * authenticated session.
   *
   * This API operation handles the token refresh process for admin users on the
   * community platform. When a user's access token expires (typically after 30
   * minutes), this operation allows them to obtain a new access token without
   * re-entering credentials. The operation requires a valid refresh token that
   * was issued during the initial login or registration process. The refresh
   * token is validated against the system's secure token store, which maintains
   * persistence of valid refresh tokens associated with the user's member
   * account in the community_platform_member table. The operation does not
   * interact with any other schema fields beyond token validation; it does not
   * require password_hash, email, or display_name fields from the member table
   * as these are not needed once authentication has been established. The
   * operation follows the standard refresh protocol where a valid refresh token
   * triggers the issuance of a new access token while the refresh token itself
   * remains valid for future use (or is renewed based on policy). The response
   * conforms to the standardized authentication response format using the
   * ICommunityPlatformAdmin.IAuthorized schema, ensuring consistent response
   * structure across all authentication operations. This approach maintains
   * session continuity while enhancing security through short-lived access
   * tokens.
   *
   * @param connection
   * @param body Request body containing the refresh token to obtain a new
   *   access token. The refresh token is issued during join or login operations
   *   and stored securely on the client side.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformAdmin.IRefresh,
  ): Promise<ICommunityPlatformAdmin.IAuthorized> {
    try {
      return await postAuthAdminRefresh({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
