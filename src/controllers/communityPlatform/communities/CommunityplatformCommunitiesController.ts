import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformCommunities } from "../../../providers/patchCommunityPlatformCommunities";
import { getCommunityPlatformCommunitiesCommunityName } from "../../../providers/getCommunityPlatformCommunitiesCommunityName";

import { IPageICommunityPlatformCommunitySummary } from "../../../api/structures/IPageICommunityPlatformCommunitySummary";
import { ICommunityPlatformCommunity } from "../../../api/structures/ICommunityPlatformCommunity";

@Controller("/communityPlatform/communities")
export class CommunityplatformCommunitiesController {
  /**
   * Search and retrieve paginated sub-communities with advanced filtering.
   *
   * This operation enables users to discover and explore sub-communities within
   * the platform by performing advanced searches against the
   * community_platform_communities table. Unlike simple listing operations,
   * this endpoint accepts search parameters in the request body to enable
   * complex filtering based on community name patterns, categories, and
   * membership counts.
   *
   * The endpoint provides comprehensive search across all communities,
   * returning results that match the search criteria with pagination support
   * for efficient data retrieval. Users can search for communities by name
   * using partial matching, filter results by predefined categories, and
   * discover popular communities based on member counts. The response provides
   * summary information about each matching community including name, category,
   * description, member count, and creation date.
   *
   * As a PATCH operation, this endpoint properly handles situations where
   * complex search parameters would exceed URL length constraints. This design
   * choice ensures a clean, scalable interface that can support future
   * enhancements to search capabilities without requiring changes to the
   * endpoint structure. The operation directly supports the platform's
   * requirement for users to discover and join new communities based on their
   * interests and is a critical component of the Explore functionality.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for community
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: ICommunityPlatformCommunity.IRequest,
  ): Promise<IPageICommunityPlatformCommunitySummary> {
    try {
      return await patchCommunityPlatformCommunities({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific community by its name.
   *
   * This operation retrieves comprehensive metadata for a specific community
   * identified by its unique name (e.g., "tech" or "science"). The community
   * must exist and must not be deleted, otherwise a 404 Not Found error is
   * returned. This operation is publicly accessible to both authenticated
   * members and unauthenticated guests.
   *
   * The response contains all community metadata from the
   * community_platform_communities table including: name, category,
   * description, rules (as a string with line breaks), logo_url, banner_url,
   * and member_count. The member_count field is sourced from the
   * community_platform_community_stats denormalized table, ensuring efficient
   * display of large numbers formatted with "k" and "m" abbreviations (e.g.,
   * 1,000 â†’ "1k").
   *
   * The system does not include membership status in this response, as
   * membership information is tracked separately in the
   * community_platform_user_communities table and should be determined via a
   * separate operation when needed. The response only provides static public
   * information about the community that any user can view.
   *
   * The community name is immutable after creation, so the path parameter
   * serves as the primary identifier and must exactly match an existing
   * community name in the system. This design supports direct linking and
   * sharing of community pages.
   *
   * @param connection
   * @param communityName Unique alphanumeric identifier of the target community
   *   (e.g., "ai" or "health")
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":communityName")
  public async at(
    @TypedParam("communityName")
    communityName: string &
      tags.MinLength<5> &
      tags.MaxLength<64> &
      tags.Pattern<"^[a-zA-Z0-9_-]+$">,
  ): Promise<ICommunityPlatformCommunity> {
    try {
      return await getCommunityPlatformCommunitiesCommunityName({
        communityName,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
