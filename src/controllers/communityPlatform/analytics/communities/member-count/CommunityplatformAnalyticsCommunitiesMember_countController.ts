import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformAnalyticsCommunitiesCommunityIdMemberCount } from "../../../../../providers/getCommunityPlatformAnalyticsCommunitiesCommunityIdMemberCount";

import { ICommunityPlatformCommunityStats } from "../../../../../api/structures/ICommunityPlatformCommunityStats";

@Controller(
  "/communityPlatform/analytics/communities/:communityId/member-count",
)
export class CommunityplatformAnalyticsCommunitiesMember_countController {
  /**
   * Retrieve the current member count for a specific community.
   *
   * This operation retrieves the current member count for a specific community
   * from the community_platform_community_stats table. This is a denormalized
   * analytics counter table that is maintained atomically during every join and
   * leave operation, ensuring high-performance read operations without
   * requiring expensive COUNT queries on the junction table.
   *
   * The value returned represents the exact count of active members currently
   * joined to the community. The UI will format this value for display
   * according to business rules: 1,000 → 1k, 10,000 → 10k, 1,000,000 → 1m.
   * However, the API returns the raw numeric value for use in internal logic
   * and calculations.
   *
   * This endpoint supports the 'Recent Communities' sidebar and community
   * discovery features on both the Explore page and community homepage. Since
   * the counter is updated atomically in real-time, this endpoint is always
   * accurate and responsive. The community_platform_user_communities junction
   * table contains the actual membership records (with soft delete for leave
   * history), but this stats table provides real-time aggregate data for
   * display purposes.
   *
   * @param connection
   * @param communityId Unique identifier of the community whose member count is
   *   requested
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommunityStats> {
    try {
      return await getCommunityPlatformAnalyticsCommunitiesCommunityIdMemberCount(
        {
          communityId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
