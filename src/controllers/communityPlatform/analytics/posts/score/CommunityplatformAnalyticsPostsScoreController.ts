import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformAnalyticsPostsPostIdScore } from "../../../../../providers/getCommunityPlatformAnalyticsPostsPostIdScore";

import { ICommunityPlatformPostScore } from "../../../../../api/structures/ICommunityPlatformPostScore";

@Controller("/communityPlatform/analytics/posts/:postId/score")
export class CommunityplatformAnalyticsPostsScoreController {
  /**
   * Retrieve the vote score for a specific post.
   *
   * This endpoint returns the current vote score for a post, calculated as the
   * difference between the total number of upvotes and downvotes. The score is
   * retrieved from the community_platform_post_stats table, a denormalized
   * statistics table that is atomically updated on every vote action to ensure
   * high-performance reads for feeds and search results.
   *
   * This operation is essential for implementing the 'Top' sort order in the
   * home feed and global search, allowing the client to display the relative
   * popularity of posts without executing expensive COUNT queries on the
   * community_platform_post_votes junction table. The score responds to vote
   * changes in real-time due to the atomic updates in the analytics layer.
   *
   * The endpoint returns only the numeric score value, as this is the only
   * information required by the client for display purposes. No additional
   * metadata is included to minimize payload size for high-frequency requests
   * across the global sidebar and main feed. The client uses this score to sort
   * and rank posts in the 'Top' view and to indicate post popularity with
   * visual cues.
   *
   * @param connection
   * @param postId Unique identifier of the post whose score is being requested.
   *   This reference maps directly to the
   *   community_platform_post_stats.community_platform_post_id field.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPostScore> {
    try {
      return await getCommunityPlatformAnalyticsPostsPostIdScore({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
