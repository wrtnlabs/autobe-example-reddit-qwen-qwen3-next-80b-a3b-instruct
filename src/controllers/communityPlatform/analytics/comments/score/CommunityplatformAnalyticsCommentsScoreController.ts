import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformAnalyticsCommentsCommentIdScore } from "../../../../../providers/getCommunityPlatformAnalyticsCommentsCommentIdScore";

import { ICommunityPlatformCommentScore } from "../../../../../api/structures/ICommunityPlatformCommentScore";

@Controller("/communityPlatform/analytics/comments/:commentId/score")
export class CommunityplatformAnalyticsCommentsScoreController {
  /**
   * Retrieve the vote score for a specific comment.
   *
   * This endpoint returns the current vote score for a comment, calculated as
   * the difference between the total number of upvotes and downvotes. The score
   * is retrieved from the community_platform_comment_stats table, a
   * denormalized statistics table that is atomically updated on every vote
   * action to ensure high-performance reads during comment rendering.
   *
   * This operation is essential for displaying the relative popularity of
   * comments in threaded discussions on post detail pages and in search
   * results. Without this denormalized table, calculating scores would require
   * JOINs and COUNTs across the community_platform_comment_votes table, which
   * would be too slow for real-time thread rendering.
   *
   * The endpoint returns only the numeric score value, as this is the only
   * information required by the client for display purposes. No additional
   * metadata is included to minimize payload size and ensure fast rendering of
   * comment threads. The client uses this score to sort comments by popularity
   * and to display score indicators next to each comment.
   *
   * Note: As per business rules, users cannot vote on their own comments, and
   * this endpoint does not return user-specific vote stateâ€”it only returns the
   * aggregated score.
   *
   * @param connection
   * @param commentId Unique identifier of the comment whose score is being
   *   requested. This reference maps directly to the
   *   community_platform_comment_stats.community_platform_comment_id field.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformCommentScore> {
    try {
      return await getCommunityPlatformAnalyticsCommentsCommentIdScore({
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
