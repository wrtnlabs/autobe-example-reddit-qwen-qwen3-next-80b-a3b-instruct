import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformRoles } from "../../../providers/getCommunityPlatformRoles";
import { getCommunityPlatformRolesRoleId } from "../../../providers/getCommunityPlatformRolesRoleId";

import { ICommunityPlatformUserRoleArray } from "../../../api/structures/ICommunityPlatformUserRoleArray";
import { ICommunityPlatformUserRole } from "../../../api/structures/ICommunityPlatformUserRole";

@Controller("/communityPlatform/roles")
export class CommunityplatformRolesController {
  /**
   * Retrieve list of all user roles.
   *
   * This endpoint returns a complete collection of all user role definitions
   * defined in the community platform system. Each role (guest, member, admin)
   * represents a distinct permission profile that determines what actions a
   * user can perform.
   *
   * The role definitions are immutable and stored in the
   * community_platform_user_roles table, with each entry containing a unique
   * identifier, role_name, and detailed description of permissions. These role
   * definitions are referenced by user accounts to enforce access control
   * policies system-wide.
   *
   * This API is useful for administrative dashboards, client applications that
   * need to determine user capability constraints, and debugging authorization
   * issues. The response does not include any user-specific information, only
   * the canonical role definitions.
   *
   * Since this is a read-only operation that exposes public system metadata, no
   * authentication is required - even unauthenticated guests can access this
   * information to understand the platform's access control model.
   *
   * @param connection
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async index(): Promise<ICommunityPlatformUserRoleArray> {
    try {
      return await getCommunityPlatformRoles();
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific user role by ID.
   *
   * This endpoint returns the complete metadata for a single user role
   * identified by its UUID id.
   *
   * The role definition comes from the community_platform_user_roles table and
   * includes the role_name (e.g., 'guest', 'member', 'admin') and a detailed
   * description of the permissions associated with that role. The system
   * enforces that role names are unique and immutable, so this endpoint will
   * always return the same definition for a given role_id.
   *
   * This API is used by interface components that need to display role-specific
   * information, such as when showing user permissions in an admin dashboard or
   * explaining access restrictions to users.
   *
   * The endpoint requires the roleId parameter which must be a valid UUID that
   * exists in the community_platform_user_roles table. Invalid or non-existent
   * role IDs will return a 404 response.
   *
   * Since this endpoint provides only public system metadata about roles, no
   * authentication is required - even unauthenticated guests can access role
   * information to understand the platform's permission structure.
   *
   * @param connection
   * @param roleId Unique identifier of the user role to retrieve, as stored in
   *   the community_platform_user_roles table.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":roleId")
  public async at(
    @TypedParam("roleId")
    roleId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformUserRole> {
    try {
      return await getCommunityPlatformRolesRoleId({
        roleId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
