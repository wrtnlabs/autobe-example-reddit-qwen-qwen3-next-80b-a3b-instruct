import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformSearchPosts } from "../../../../providers/patchCommunityPlatformSearchPosts";
import { getCommunityPlatformSearchPostsPostId } from "../../../../providers/getCommunityPlatformSearchPostsPostId";

import { IPageICommunityPlatformPost } from "../../../../api/structures/IPageICommunityPlatformPost";
import { ICommunityPlatformPost } from "../../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/search/posts")
export class CommunityplatformSearchPostsController {
  /**
   * Search for posts using keywords with sorting and pagination options.
   *
   * This endpoint supports the comprehensive post search functionality on the
   * platform's /s page, specifically targeting the 'Posts' tab. It queries the
   * community_platform_search_posts materialized view, which contains
   * denormalized data from community_platform_posts and corresponding
   * statistics from community_platform_post_stats to enable efficient full-text
   * search and sorting without expensive joins at query time.
   *
   * The operation accepts a request body with parameters for search query (q),
   * sort order (newest or top), pagination (page and limit), and optional
   * community filters. The search query is matched against the title and body
   * fields in the search view using PostgreSQL's pg_trgm extension for fuzzy
   * matching. When the sort parameter is 'newest', results are ordered by
   * created_at descending. When the sort parameter is 'top', results are
   * ordered by score (upvotes - downvotes) descending, followed by created_at
   * descending, and then by post identifier descending for tie-breaking.
   *
   * The operation returns a paginated result set of 20 posts per page, as
   * specified in the requirements. Each post in the response includes essential
   * summary data: community name, post title, author display name (or
   * 'Anonymous'), creation timestamp (presented in relative format per client
   * context), comment count, and current score. The response body uses the
   * IPageICommunityPlatformPost type schema, which includes a pagination
   * metadata object and the data array.
   *
   * This endpoint enforces the requirement that search queries must be at least
   * 2 characters; if a shorter query is provided, the API returns a 400 Bad
   * Request response with a message indicating the minimum length requirement.
   * This validation occurs before any database query is executed for
   * performance optimization. If no results match the criteria, an empty data
   * array is returned with pagination details indicating zero total results.
   *
   * As this is a complex search operation utilizing a request body for query
   * parameters, the HTTP PATCH method is used in accordance with the API design
   * principle for complex collection searches, even though no data is modified
   * on the server. The user's authentication status (guest or member) affects
   * the visibility of join buttons in the UI but does not affect the search
   * results themselves, as all post content is publicly accessible for
   * reading.
   *
   * @param connection
   * @param body Search parameters for querying posts including text term, sort
   *   type, and pagination controls.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: ICommunityPlatformPost.IRequest,
  ): Promise<IPageICommunityPlatformPost> {
    try {
      return await patchCommunityPlatformSearchPosts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific post's full details by its unique ID.
   *
   * This operation provides the detailed content for a single post identified
   * by its unique postId parameter. The post details are retrieved from the
   * community_platform_posts table, which stores the complete text, metadata,
   * and relationships for each post including the title, body, author_id,
   * community_id, author_display_name, and timestamps.
   *
   * The operation enforces that the post must be active (deleted_at IS NULL) to
   * be visible. If a post has been deleted (hard or soft), the API returns a
   * 404 Not Found response, preventing users from viewing deleted content. The
   * returned post includes the full content fields, including any line breaks
   * in the body, as text-only format is required by business rules. The
   * author_display_name is returned directly from the table, with 'Anonymous'
   * used if the field is null.
   *
   * The operation requires the postId parameter to be a valid UUID that
   * corresponds to an existing post in the community_platform_posts table. The
   * prefix of the community name (the 'name' field from the
   * community_platform_communities table) is derived from the community_id
   * relationship, ensuring correct display of the community context in the URL
   * path.
   *
   * Authentication is not required to access this endpoint as reading posts is
   * open to everyone according to the requirements. However, the API still
   * validates the user session for potential feature toggles such as whether
   * the viewer is the post's author (which determines whether edit/delete
   * buttons should be shown in the UI). This authorization check is handled by
   * the frontend via the user's session token, not by API authorization roles.
   * The operation is stateless and does not consume or modify any system
   * resources, making it safe for public access.
   *
   * The response structure uses the ICommunityPlatformPost type to return the
   * complete post object with all fields as defined in the Prisma schema,
   * including relationships to the author and community as references for
   * frontend routing.
   *
   * @param connection
   * @param postId Unique identifier of the post to retrieve. Must be a valid
   *   UUID corresponding to a record in the community_platform_posts table.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await getCommunityPlatformSearchPostsPostId({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
