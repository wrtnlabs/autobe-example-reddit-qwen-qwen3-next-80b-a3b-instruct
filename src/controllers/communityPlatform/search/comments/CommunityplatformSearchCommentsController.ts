import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformSearchComments } from "../../../../providers/patchCommunityPlatformSearchComments";
import { getCommunityPlatformSearchCommentsCommentId } from "../../../../providers/getCommunityPlatformSearchCommentsCommentId";

import { IPageICommunityPlatformSearchComment } from "../../../../api/structures/IPageICommunityPlatformSearchComment";
import { ICommunityPlatformSearchComment } from "../../../../api/structures/ICommunityPlatformSearchComment";

@Controller("/communityPlatform/search/comments")
export class CommunityplatformSearchCommentsController {
  /**
   * Search for comments across all communities with pagination and filtering.
   *
   * This operation allows users to search for comments across the entire
   * platform, returning results from the community_platform_search_comments
   * materialized view. This denormalized table is updated automatically via
   * system triggers whenever comments are created, updated, or deleted,
   * ensuring search results remain current without expensive joins during
   * queries.
   *
   * Users can search by entering query terms that match comment content (2+
   * characters required), and results are returned in pages of 20 items with a
   * "Load more" button for pagination. The search matches against comment
   * content using full-text search capabilities with trigram indexing for
   * efficient substring matching.
   *
   * Results are sorted by creation time descending (Newest) only, as specified
   * by the business requirements. Each returned comment includes the comment
   * content excerpt (capped at 2 lines), author display name (or "Anonymous" if
   * not set), creation timestamp, parent post title (for context), and the
   * community name. The score field represents the calculated
   * upvote-minus-downvote total.
   *
   * This endpoint does not support other sorting options (like Top) as per
   * requirements, which restricts comment sorting to Newest only. The API
   * returns skeleton comment data suitable for search result listings - full
   * comment content and threading details are available via the individual
   * comment detail endpoint.
   *
   * @param connection
   * @param body Search parameters for finding comments including query term and
   *   pagination controls
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: ICommunityPlatformSearchComment.IRequest,
  ): Promise<IPageICommunityPlatformSearchComment> {
    try {
      return await patchCommunityPlatformSearchComments({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed search information for a specific comment.
   *
   * This operation retrieves detailed information for a specific comment from
   * the search materialized view. The data is sourced from the
   * community_platform_search_comments table, which is a denormalized copy
   * updated by system triggers for efficient search performance.
   *
   * The response includes the comment's unique identifier, content text
   * (2-2,000 characters), author display name (or "Anonymous" if not set),
   * parent post title and community name for context, calculated score (upvotes
   * minus downvotes), and timestamps. This detail page is accessed when a user
   * clicks on a comment from search results to see the exact match context.
   *
   * Note that this endpoint does not return parent thread nesting information
   * or comment replies - those are handled by the comment detail endpoint on
   * the post page. This endpoint provides only the essential information needed
   * for search result context, making it lightweight and fast. The content
   * field contains the full comment text that matched the search query,
   * truncated for display purposes in search results.
   *
   * @param connection
   * @param commentId Unique identifier of the comment to retrieve from search
   *   materialized view
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformSearchComment> {
    try {
      return await getCommunityPlatformSearchCommentsCommentId({
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
