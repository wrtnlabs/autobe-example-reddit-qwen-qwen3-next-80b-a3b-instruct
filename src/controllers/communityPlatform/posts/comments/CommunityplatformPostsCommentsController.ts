import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformPostsPostIdComments } from "../../../../providers/patchCommunityPlatformPostsPostIdComments";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { getCommunityPlatformPostsPostIdCommentsCommentId } from "../../../../providers/getCommunityPlatformPostsPostIdCommentsCommentId";

import { IPageICommunityPlatformComment } from "../../../../api/structures/IPageICommunityPlatformComment";
import { ICommunityPlatformComment } from "../../../../api/structures/ICommunityPlatformComment";

@Controller("/communityPlatform/posts/:postId/comments")
export class CommunityplatformPostsCommentsController {
  /**
   * Retrieve paginated comments for a post with sorting.
   *
   * Retrieve a paginated list of comments for a specific post, ordered by
   * creation time or score. This operation supports two sorting modes: Newest
   * (by created_at descending) and Top (by score descending). The comments are
   * returned in a hierarchical structure that preserves reply relationships,
   * with each comment containing its author, content, score, and reply count.
   *
   * When the user selects "Newest" sort, comments are ordered by creation
   * timestamp descending, with ties broken by comment ID descending. When "Top"
   * sort is selected, comments are ordered by their calculated score (upvotes
   * minus downvotes) in descending order, with ties broken by creation
   * timestamp and then comment ID. The operation supports loading additional
   * pages with the "[Load more]" button.
   *
   * This operation queries the community_platform_comments table and uses the
   * community_platform_comment_stats table to obtain accurate comment scores.
   * It applies soft delete filtering to exclude comments where deleted_at is
   * not null, ensuring only active comments are returned. The user's own vote
   * state is included in the response to support optimistic UI updates. The
   * response includes the total comment count for the post, which is derived
   * from the community_platform_post_stats table.
   *
   * This endpoint is used on post detail pages to display threads and on global
   * search results under the "Comments" tab.
   *
   * @param connection
   * @param postId Unique identifier of the target post
   * @param body Pagination, sorting and filtering parameters for comment
   *   retrieval
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformComment.IRequest,
  ): Promise<IPageICommunityPlatformComment.ISparse> {
    try {
      return await patchCommunityPlatformPostsPostIdComments({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific comment by ID.
   *
   * Retrieve a single comment by its unique identifier. This operation returns
   * the complete comment object including its content, author information,
   * creation timestamp, score, and parent-child relationship metadata.
   *
   * The response includes the full comment hierarchy if requested, showing the
   * comment's parent and all its direct replies, enabling deep-thread
   * navigation. All comments in the hierarchy are filtered for soft deletes
   * (deleted_at is null). The author's display name is included, defaulted to
   * "Anonymous" if not set.
   *
   * This operation is used when a user clicks on a comment in a search result
   * or when deep-linking to a specific comment. It provides the data needed for
   * comment detail views and is accessed directly via URL navigation.
   *
   * This endpoint is frequently called when users navigate from search results
   * to view a comment in context, or when applications deep-link directly to
   * comments.
   *
   * @param connection
   * @param postId Unique identifier of the parent post containing the comment
   * @param commentId Unique identifier of the target comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformComment.ISparse> {
    try {
      return await getCommunityPlatformPostsPostIdCommentsCommentId({
        member,
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
