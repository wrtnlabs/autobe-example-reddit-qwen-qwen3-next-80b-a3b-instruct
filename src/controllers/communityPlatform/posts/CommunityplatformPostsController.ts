import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformPosts } from "../../../providers/patchCommunityPlatformPosts";
import { getCommunityPlatformPostsPostId } from "../../../providers/getCommunityPlatformPostsPostId";

import { IPageICommunityPlatformCommunityPlatformPostISummary } from "../../../api/structures/IPageICommunityPlatformCommunityPlatformPostISummary";
import { ICommunityPlatformCommunityPlatformPostIRequest } from "../../../api/structures/ICommunityPlatformCommunityPlatformPostIRequest";
import { ICommunityPlatformPost } from "../../../api/structures/ICommunityPlatformPost";

@Controller("/communityPlatform/posts")
export class CommunityplatformPostsController {
  /**
   * Search and retrieve posts with advanced filters and pagination.
   *
   * Retrieve a filtered and paginated list of posts from the platform with
   * advanced search capabilities. This operation provides comprehensive
   * filtering by title, body content, author display name, community name,
   * creation date range, and score (upvotes minus downvotes).
   *
   * The operation supports pagination with configurable page sizes (default 20
   * per page) and sorting options including Newest (by creation time
   * descending, then ID descending) and Top (by score descending, then creation
   * time descending, then ID descending). This endpoint is crucial for the
   * search functionality on the /s page and serves as the backend for the Home
   * feed's 'Load more' functionality.
   *
   * Security considerations include appropriate filtering of posts based on the
   * requesting user's authorization level. Guest users can search posts from
   * all communities, while authenticated users can also filter by their joined
   * communities. Posts marked as deleted (deleted_at not null) are excluded
   * from results. Rate limiting applies to prevent abuse of search
   * capabilities.
   *
   * This operation integrates with the community_platform_posts table as
   * defined in the Prisma schema, incorporating all available post fields and
   * relationships. It also references the community_platform_search_posts
   * materialized view for optimized full-text search performance. The response
   * includes post summary information optimized for list displays, with options
   * to include additional details based on authorization level.
   *
   * @param connection
   * @param body Search criteria, filters, and pagination parameters for finding
   *   posts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: ICommunityPlatformCommunityPlatformPostIRequest,
  ): Promise<IPageICommunityPlatformCommunityPlatformPostISummary> {
    try {
      return await patchCommunityPlatformPosts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific post by ID.
   *
   * This operation retrieves a specific post by its unique identifier from the
   * community platform. When requested, the system validates the existence of
   * the post in the database and ensures the post is not marked as deleted
   * (deleted_at is null). The response includes all essential post data: title,
   * body, author display name (with fallback to 'Anonymous'), creation
   * timestamp, and the ID of the associated community.
   *
   * Security considerations involve verifying the post's existence and
   * accessibility without requiring authentication, as posts are publicly
   * viewable. However, the system still enforces content integrity by only
   * serving active (non-deleted) posts. This endpoint supports viewing posts by
   * guests and authenticated members alike.
   *
   * The operation directly references the community_platform_posts table in the
   * Prisma schema, which stores the fundamental post data including title,
   * body, author_id (linked to member account), and deleted_at for soft
   * deletion. The author_display_name field is used to show custom names or
   * default to 'Anonymous' when empty.
   *
   * If the requested postId does not exist in the database, or if the post has
   * been deleted (deleted_at is not null), the system returns a 404 Not Found
   * error. The response does not include voting statistics or comment counts,
   * as these are monitored in separate stats tables. The endpoint is designed
   * to be used when a user navigates to a post detail page, and can be called
   * directly as the primary source for rendering individual posts.
   *
   * Related operations include retrieving a list of posts for the home feed
   * (index) and searching for posts by content (search). This endpoint is the
   * detail view counterpart to the list and search operations.
   *
   * @param connection
   * @param postId Unique identifier of the target post to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformPost> {
    try {
      return await getCommunityPlatformPostsPostId({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
