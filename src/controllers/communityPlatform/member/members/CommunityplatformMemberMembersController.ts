import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformMemberMembersMemberId } from "../../../../providers/getCommunityPlatformMemberMembersMemberId";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";

import { ICommunityPlatformMember } from "../../../../api/structures/ICommunityPlatformMember";

@Controller("/communityPlatform/member/members/:memberId")
export class CommunityplatformMemberMembersController {
  /**
   * Retrieve a specific member's profile information.
   *
   * This operation retrieves detailed information about a specific member from
   * the community_platform_member table. The endpoint allows authorized users
   * to view essential profile data including the member's email address,
   * optional display name, account creation timestamp, and last login
   * information.
   *
   * The operation is designed with privacy considerations in mind - sensitive
   * information such as password hashes are excluded from the response. Only
   * non-sensitive profile metadata is returned to ensure user privacy. This
   * endpoint supports self-service profile access and is the authoritative
   * source for user profile information.
   *
   * This operation is critical for the platform's user management
   * functionality. It enables users to verify their account information and is
   * referenced in requirements for authentication and ownership verification,
   * ensuring that content creation and modification permissions can be properly
   * enforced based on authenticated user identity.
   *
   * @param connection
   * @param memberId Unique identifier of the target member account. This UUID
   *   must correspond to an existing record in the community_platform_member
   *   table.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformMember> {
    try {
      return await getCommunityPlatformMemberMembersMemberId({
        member,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
