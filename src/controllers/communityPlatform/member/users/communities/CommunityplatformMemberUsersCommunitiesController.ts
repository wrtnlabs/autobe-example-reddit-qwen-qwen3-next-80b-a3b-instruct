import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getCommunityPlatformMemberUsersUserIdCommunities } from "../../../../../providers/getCommunityPlatformMemberUsersUserIdCommunities";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { patchCommunityPlatformMemberUsersUserIdCommunities } from "../../../../../providers/patchCommunityPlatformMemberUsersUserIdCommunities";

import { ICommunityPlatformIPageICommunity } from "../../../../../api/structures/ICommunityPlatformIPageICommunity";
import { IPageICommunityPlatformUserCommunity } from "../../../../../api/structures/IPageICommunityPlatformUserCommunity";
import { ICommunityPlatformUserCommunityRequest } from "../../../../../api/structures/ICommunityPlatformUserCommunityRequest";

@Controller("/communityPlatform/member/users/:userId/communities")
export class CommunityplatformMemberUsersCommunitiesController {
  /**
   * Retrieve a user's recent communities they've joined, ordered by last
   * interaction.
   *
   * This operation returns a list of communities that the authenticated user
   * has joined and interacted with, specifically designed to populate the
   * 'Recent Communities' sidebar in the UI. The communities are retrieved based
   * on the user's membership records in the community_platform_user_communities
   * table, filtering out any records where deleted_at is not null (i.e.,
   * communities the user has left). Results are ordered by the
   * last_interaction_at timestamp in descending order to prioritize the most
   * recently active communities, ensuring the UI displays the most relevant
   * communities first.
   *
   * The operation is optimized for performance by referencing the existing
   * community_platform_user_communities table which tracks all user-community
   * interactions, including joins, posts, comments, and votes. This ensures
   * real-time accuracy of the 'Recent Communities' list without requiring
   * expensive joins with other tables. The system returns a maximum of 5
   * communities as specified in the business requirements, which is enforced at
   * the query level. Each returned community includes only essential summary
   * information (name, logo, member count) to minimize payload size and
   * optimize for sidebar rendering.
   *
   * Authentication is required via the userId path parameter, which must
   * correspond to a valid community_platform_member.id. The user ID is
   * validated against the session to ensure the user is authorized to access
   * their own data. If the user ID is invalid, a 404 response is returned. If
   * the user has no active communities, an empty array is returned, which is
   * handled gracefully by the UI to display a placeholder message suggesting
   * exploration.
   *
   * This operation does not require a request body as all parameters are
   * provided in the path. The user's session must be active, and if expired,
   * the API will return a 401 Unauthorized response, prompting the frontend to
   * open the login modal and then retry the request after successful
   * re-authentication.
   *
   * @param connection
   * @param userId Unique identifier of the user whose recent communities are
   *   being requested. This must correspond to a valid
   *   community_platform_member.id in the system.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async getByUserid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformIPageICommunity.ISummary> {
    try {
      return await getCommunityPlatformMemberUsersUserIdCommunities({
        member,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve member's joined communities with filtering.
   *
   * This operation queries all community memberships for a specific member,
   * returning only those communities with an active membership (deleted_at is
   * null). The results include the community ID, name, last interaction
   * timestamp, and metadata, enabling the 'Recent Communities' sidebar to be
   * populated correctly.
   *
   * The operation supports filtering by activity recency (using
   * last_interaction_at descending) and pagination to limit results to the top
   * 5 communities as required in the business logic. The endpoint does not
   * support filtering by community category or search — only membership status
   * and recency are relevant.
   *
   * The request body can be used to specify pagination parameters (limit,
   * offset) and sorting direction (ascending/descending) for
   * last_interaction_at to support client-side display logic. The server
   * ensures that only community records where deleted_at = NULL are returned —
   * inactive memberships are excluded.
   *
   * This operation is essential for rendering the Home feed, which shows posts
   * only from communities in this list. It is also used to populate and
   * maintain the 'Recent Communities' sidebar in the left navigation. Community
   * memberships are managed exclusively via join/leave actions on the community
   * page; this endpoint has no operations for creating or updating membership —
   * those are handled via the community page's Join button.
   *
   * For performance, the operation leverages the existing index on
   * community_platform_user_communities on (community_platform_user_id,
   * last_interaction_at). Results are not cached aggressively to ensure
   * real-time accuracy when a user joins or leaves a community.
   *
   * @param connection
   * @param userId Unique identifier of the target member in UUID format.
   * @param body Filtering and pagination parameters for retrieving communities.
   *   Includes limit (default 5), offset, and sort direction for
   *   last_interaction_at. Used to implement pagination in the 'Recent
   *   Communities' sidebar.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async patchByUserid(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunityPlatformUserCommunityRequest,
  ): Promise<IPageICommunityPlatformUserCommunity> {
    try {
      return await patchCommunityPlatformMemberUsersUserIdCommunities({
        member,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
