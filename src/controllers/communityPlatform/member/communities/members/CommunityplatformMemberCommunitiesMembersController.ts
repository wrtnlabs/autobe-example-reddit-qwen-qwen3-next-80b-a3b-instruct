import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia from "typia";
import { postCommunityPlatformMemberCommunitiesCommunityNameMembers } from "../../../../../providers/postCommunityPlatformMemberCommunitiesCommunityNameMembers";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { deleteCommunityPlatformMemberCommunitiesCommunityNameMembers } from "../../../../../providers/deleteCommunityPlatformMemberCommunitiesCommunityNameMembers";

import { ICommunityPlatformCommunityPlatformUserCommunity } from "../../../../../api/structures/ICommunityPlatformCommunityPlatformUserCommunity";

@Controller("/communityPlatform/member/communities/:communityName/members")
export class CommunityplatformMemberCommunitiesMembersController {
  /**
   * Join a specific community and create membership record.
   *
   * Establish a new membership relationship between an authenticated user and a
   * specified community. This operation creates a record in the
   * community_platform_user_communities table with the joining user's ID and
   * the target community's ID, along with timestamps for creation and the
   * immediate last interaction.
   *
   * The system enforces several validation rules: the community must exist and
   * have not been deleted; the user must be authenticated; the user must not
   * have an active membership (deleted_at is null) in the community already;
   * the community name must be in the correct alphanumeric format. When these
   * conditions are satisfied, the system immediately updates the member_count
   * in the community_platform_communities table and in the
   * community_platform_community_stats denormalized table.
   *
   * Security considerations include ensuring that only authenticated users can
   * join communities and that users cannot join their own communities if
   * they're not the creator (which is a separate constraint). This operation
   * updates the 'Recent Communities' list in the user's left sidebar with the
   * newly joined community, sorted by the last_interaction_at timestamp.
   *
   * This operation integrates with the community_platform_user_communities
   * table as defined in the Prisma schema, incorporating the user_id,
   * community_id, and interaction timestamps. The response includes the
   * validated membership record in a successful response, with appropriate
   * error handling for invalid requests.
   *
   * @param connection
   * @param communityName Unique alphanumeric identifier of the target community
   *   to join. Must be 5 to 64 characters and may contain hyphens (-) and
   *   underscores (_). This corresponds to the name field in the
   *   community_platform_communities table.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityName")
    communityName: string,
  ): Promise<ICommunityPlatformCommunityPlatformUserCommunity> {
    try {
      return await postCommunityPlatformMemberCommunitiesCommunityNameMembers({
        member,
        communityName,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Leave a specific community and deactivate membership.
   *
   * Deactivate a user's membership in a specific community by setting the
   * deleted_at timestamp in the community_platform_user_communities table. This
   * soft-delete pattern preserves audit history while removing the user's view
   * of the community's content from their Home feed.
   *
   * The system enforces several validation rules: the community must exist; the
   * user must be authenticated and have a current active membership (deleted_at
   * is null); the user must not be the community creator if the center has
   * restrictions (though this is handled by business logic). When successful,
   * the operation decrements the member_count in both the
   * community_platform_communities table and the
   * community_platform_community_stats denormalized table.
   *
   * Security considerations include ensuring that only the owning user or an
   * admin can leave a community. Other users attempting to leave a community
   * they're not a member of will receive a 404 Not Found response. This
   * operation updates the 'Recent Communities' list in the user's left sidebar
   * by removing the community if it was among the 5 most recently active.
   *
   * This operation integrates with the community_platform_user_communities
   * table as defined in the Prisma schema, maintaining the original record with
   * the new deleted_at timestamp. The response is a 204 No Content upon
   * success, or appropriate error responses for failures.
   *
   * @param connection
   * @param communityName Unique alphanumeric identifier of the target community
   *   to leave. Must be 5 to 64 characters and may contain hyphens (-) and
   *   underscores (_). This corresponds to the name field in the
   *   community_platform_communities table.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityName")
    communityName: string,
  ): Promise<void> {
    try {
      return await deleteCommunityPlatformMemberCommunitiesCommunityNameMembers(
        {
          member,
          communityName,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
