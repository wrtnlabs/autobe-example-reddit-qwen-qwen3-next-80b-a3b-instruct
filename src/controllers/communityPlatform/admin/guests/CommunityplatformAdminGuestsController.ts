import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchCommunityPlatformAdminGuests } from "../../../../providers/patchCommunityPlatformAdminGuests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";

import { IPageICommunityPlatformGuest } from "../../../../api/structures/IPageICommunityPlatformGuest";
import { ICommunityPlatformGuestIRequest } from "../../../../api/structures/ICommunityPlatformGuestIRequest";

@Controller("/communityPlatform/admin/guests")
export class CommunityplatformAdminGuestsController {
  /**
   * Search for guest sessions with filtering and pagination.
   *
   * This endpoint provides advanced search and filtering capabilities for guest
   * account records stored in the community_platform_guest table. Unlike simple
   * GET operations, this PATCH method allows complex queries with multiple
   * filter criteria, sorting options, and pagination parameters.
   *
   * Guest accounts represent unauthenticated users with read-only access to
   * public content. Each record contains the guest's unique ID, creation
   * timestamp, and source IP address. The system uses this data for analytics,
   * spam detection, and security monitoring without storing persistent user
   * state.
   *
   * The request body accepts a search criteria object that can filter by IP
   * address, time ranges, and other metadata. Results are returned in paginated
   * format with 20 records per page and can be sorted by creation time, IP
   * address, or other fields as needed.
   *
   * This operation is restricted to administrative roles only, as guest session
   * data contains sensitive networking information that could be misused. Only
   * users with 'admin' privileges can access this endpoint to ensure proper
   * security controls are maintained.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering guest
   *   sessions
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformGuestIRequest,
  ): Promise<IPageICommunityPlatformGuest> {
    try {
      return await patchCommunityPlatformAdminGuests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
