import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformAdminAdminMembers } from "../../../../../providers/patchCommunityPlatformAdminAdminMembers";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { getCommunityPlatformAdminAdminMembersMemberId } from "../../../../../providers/getCommunityPlatformAdminAdminMembersMemberId";

import { IPageICommunityPlatformMember } from "../../../../../api/structures/IPageICommunityPlatformMember";
import { ICommunityPlatformMember } from "../../../../../api/structures/ICommunityPlatformMember";
import { ICommunityPlatformAdmin } from "../../../../../api/structures/ICommunityPlatformAdmin";

@Controller("/communityPlatform/admin/admin/members")
export class CommunityplatformAdminAdminMembersController {
  /**
   * Search and retrieve paginated member accounts with advanced filtering.
   *
   * This operation provides an administrative interface to search and retrieve
   * member accounts from the community_platform_member table using complex
   * filtering criteria. Unlike simple retrieval operations, this endpoint
   * accepts search parameters in the request body to enable advanced filtering
   * based on creation dates, last login timestamps, and display name patterns.
   *
   * The endpoint is designed exclusively for administrative use and returns
   * paginated results with search results ordered by creation date descending.
   * It supports comprehensive administrative workflows including bulk user
   * management, account audits, and compliance investigations. The response
   * includes summary information for each matching member account, excluding
   * sensitive data like password hashes while providing essential metadata for
   * administrative decision-making.
   *
   * This endpoint implements the administrative functionality for user
   * management, allowing authorized administrators to efficiently navigate
   * large numbers of user accounts without exposing this capability to regular
   * members. The search functionality directly supports the platform's
   * requirement for system administrators to manage member accounts with
   * appropriate permissions and oversight.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for member filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformMember.IRequest,
  ): Promise<IPageICommunityPlatformMember.ISummary> {
    try {
      return await patchCommunityPlatformAdminAdminMembers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve specific admin account details by member ID.
   *
   * This operation retrieves detailed information about a specific
   * administrative account from the community_platform_admin table by
   * referencing its associated member ID. The endpoint is designed for
   * administrative users who need to inspect the privilege status of specific
   * members, determine which users have elevated permissions, and understand
   * the relationship between regular member accounts and admin privileges
   * within the system.
   *
   * The response structure includes vital information about both the admin
   * record itself (creation timestamp) and its connection to the underlying
   * member account through the member_id field. This operation supports
   * administrative workflows such as privilege audits, access reviews, and user
   * management tasks that require understanding of the admin/member
   * relationship within the system.
   *
   * This endpoint implements the administrative access control functionality of
   * the platform, ensuring that only users with appropriate permissions can
   * inspect admin account details. It directly supports the platform's
   * requirement for maintaining separation of privileges and auditing
   * administrative actions while maintaining data integrity through the proper
   * referencing of the community_platform_member table.
   *
   * @param connection
   * @param memberId Unique identifier of the member account associated with the
   *   admin privileges. This UUID must correspond to an existing record in the
   *   community_platform_member table that has been granted admin privileges.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":memberId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformAdmin> {
    try {
      return await getCommunityPlatformAdminAdminMembersMemberId({
        admin,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
