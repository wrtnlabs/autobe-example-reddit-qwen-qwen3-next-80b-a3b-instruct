import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchCommunityPlatformAdminMembers } from "../../../../providers/patchCommunityPlatformAdminMembers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getCommunityPlatformAdminMembersMemberId } from "../../../../providers/getCommunityPlatformAdminMembersMemberId";

import { IPageICommunityPlatformMember } from "../../../../api/structures/IPageICommunityPlatformMember";
import { ICommunityPlatformMemberIRequest } from "../../../../api/structures/ICommunityPlatformMemberIRequest";
import { ICommunityPlatformMember } from "../../../../api/structures/ICommunityPlatformMember";

@Controller("/communityPlatform/admin/members")
export class CommunityplatformAdminMembersController {
  /**
   * Search for member accounts with filtering and pagination.
   *
   * This endpoint provides comprehensive search and filtering capabilities for
   * member account records in the community_platform_member table. Unlike basic
   * retrieval operations, this PATCH method accepts complex search criteria in
   * the request body to find members based on multiple conditions.
   *
   * Member accounts represent authenticated users with full participation
   * rights including posting, commenting, and voting. Each record contains
   * essential user information like email, display_name, created_at,
   * last_login_at, and a soft delete flag (deleted_at) for account
   * deactivation.
   *
   * The request body accepts a search criteria object that can filter by email
   * address (contains or exact match), display name (partial match), creation
   * date ranges, last login time, and account status (active/inactive). Results
   * are sorted by relevance, creation date, or login activity, and returned in
   * paginated format with 20 records per page.
   *
   * This operation is restricted to 'admin' roles only, as member account data
   * contains sensitive personal information. The email, display_name, and login
   * activity data must be protected and only accessible to authorized
   * moderators for platform management and security audits.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for filtering member
   *   accounts
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ICommunityPlatformMemberIRequest,
  ): Promise<IPageICommunityPlatformMember> {
    try {
      return await patchCommunityPlatformAdminMembers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific member's profile information.
   *
   * This operation retrieves detailed information about a specific member from
   * the community_platform_member table. The endpoint allows authorized users
   * to view essential profile data including the member's email address,
   * optional display name, account creation timestamp, and last login
   * information. This endpoint supports both self-service profile access and
   * administrative inspection of member accounts.
   *
   * The operation is designed with privacy considerations in mind - sensitive
   * information such as password hashes are excluded from the response. Only
   * non-sensitive profile metadata is returned to ensure user privacy. The
   * response structure follows the standard API pattern of returning entity
   * information when accessing specific resource endpoints.
   *
   * This operation is critical for the platform's user management
   * functionality. It enables users to verify their account information and
   * allows administrators to audit member accounts when necessary. The
   * operation directly supports the requirement for user authentication and
   * ownership verification, ensuring that content creation and modification
   * permissions can be properly enforced based on authenticated user identity.
   *
   * @param connection
   * @param memberId Unique identifier of the target member account. This UUID
   *   must correspond to an existing record in the community_platform_member
   *   table.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":memberId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<ICommunityPlatformMember> {
    try {
      return await getCommunityPlatformAdminMembersMemberId({
        admin,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
