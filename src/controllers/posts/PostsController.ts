import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postposts } from "../../providers/postposts";
import { MemberAuth } from "../../decorators/MemberAuth";
import { MemberPayload } from "../../decorators/payload/MemberPayload";

import { IPost } from "../../api/structures/IPost";

@Controller("/posts")
export class PostsController {
  /**
   * Create a new post in a specified community.
   *
   * This operation enables a member to create a new post in any sub-community.
   * It inserts a new record into the communitybbs_post table with the following
   * fields: communitybbs_community_id from the request, communitybbs_member_id
   * from the authenticated user's session, a title (validated to be 5-120
   * characters), a body (validated to be 10-10,000 characters), and a
   * display_name taken from the member's current profile. The created_at
   * timestamp is automatically set to the current time, and updated_at is
   * initially set to the same value. The deleted_at field is set to null,
   * indicating an active post. The system enforces validation rules from the
   * schema regarding input lengths and rejects any attempt to insert HTML or
   * code into the body. The display_name is stored as text, not as a reference,
   * ensuring the post's author display remains consistent even if the member
   * later changes their profile display_name. This implementation matches the
   * schema specification and business requirement that posting is allowed
   * without prior community membership.
   *
   * @param connection
   * @param body Request body containing post details including community_id,
   *   title, body, and optional display_name.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IPost.ICreate,
  ): Promise<IPost> {
    try {
      return await postposts({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
