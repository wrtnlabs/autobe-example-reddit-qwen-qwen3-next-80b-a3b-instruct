import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { putadminAdministratorsEmailSuspend } from "../../../providers/putadminAdministratorsEmailSuspend";
import { AdministratorAuth } from "../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../decorators/payload/AdministratorPayload";
import { putadminAdministratorsEmailResume } from "../../../providers/putadminAdministratorsEmailResume";
import { deleteadminAdministratorsEmail } from "../../../providers/deleteadminAdministratorsEmail";

import { ICommunitybbsAdministrator } from "../../../api/structures/ICommunitybbsAdministrator";
import { IResponseEmpty } from "../../../api/structures/IResponseEmpty";

@Controller("/admin/administrators/:email")
export class AdminAdministratorsController {
  /**
   * Suspend administrator access by revoking all sessions (Admin only).
   *
   * This endpoint suspends an administrator’s access by invalidating their
   * active sessions and blocking future authentication.
   *
   * The system searches for all active sessions (where is_valid = true and
   * deleted_at is null) associated with the administrator’s email in the
   * communitybbs_session table. Each found session is updated: is_valid is set
   * to false, and deleted_at is set to the current timestamp. This immediately
   * terminates all active sessions without needing to revoke individual
   * tokens.
   *
   * The administrator record in communitybbs_administrator remains intact,
   * preserving the user’s audit history, display_name, and email. This
   * preserves accountability and enables future reactivation if needed.
   *
   * A log entry is created in the communitybbs_log table with action_type
   * 'administrator_suspended', including the identity of the suspending
   * administrator and the target administrator.
   *
   * This operation does not delete the primary administrator record, so their
   * email cannot be reused until explicitly freed. This ensures the suspension
   * is reversible by resetting is_valid to true and generating new tokens. It
   * is equivalent to disabling an account in enterprise systems, rather than
   * deleting it.
   *
   * @param connection
   * @param email The email address of the administrator to suspend.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put("suspend")
  public async suspend(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("email")
    email: string & tags.Format<"email">,
  ): Promise<ICommunitybbsAdministrator> {
    try {
      return await putadminAdministratorsEmailSuspend({
        administrator,
        email,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Restore suspended administrator access (Admin only).
   *
   * This endpoint reactivates a previously suspended administrator account by
   * restoring valid sessions.
   *
   * The system locates all entries in the communitybbs_session table where: (1)
   * actor_id corresponds to the administrator with the provided email, and (2)
   * deleted_at is set (meaning they were suspended). For each such session,
   * is_valid is set to true and deleted_at is cleared (set to null).
   *
   * The administrator record in communitybbs_administrator is not modified. No
   * new credentials are issued; the administrator can log back in using their
   * existing password and email.
   *
   * A log entry is created in the communitybbs_log table with action_type
   * 'administrator_resumed', logging the administrator who performed the
   * restoration and the target administrator.
   *
   * This operation reverses the suspend operation and allows administrators to
   * regain access without needing to be recreated. It is the preferred method
   * over account deletion and recreation to preserve audit history and maintain
   * data integrity.
   *
   * @param connection
   * @param email The email address of the administrator to resume.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put("resume")
  public async resume(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("email")
    email: string & tags.Format<"email">,
  ): Promise<ICommunitybbsAdministrator> {
    try {
      return await putadminAdministratorsEmailResume({
        administrator,
        email,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an administrator account (Admin only).
   *
   * This endpoint permanently deletes an administrator account from the system.
   *
   * The system first verifies that the administration request is authorized
   * through the authenticated administrator’s privileges, and requires
   * dual-authorization confirmation to prevent unauthorized deletion.
   *
   * It fetches the administrator record by email from the
   * communitybbs_administrator table, then deletes all associated sessions from
   * the communitybbs_session table (with CASCADE on admin_id). Finally, it
   * deletes the administrator record itself from the communitybbs_administrator
   * table.
   *
   * A permanent log entry is created in the communitybbs_log table with
   * action_type 'administrator_deleted', recording the operator and the deleted
   * administrator’s identity.
   *
   * The email address is freed and may be reused. No data related to this
   * administrator is retained in the active system. This deletion is completely
   * irreversible.
   *
   * This operation is reserved for extreme circumstances: administrator
   * departure, security breaches, or legal requirement. It is always
   * accompanied by an audit trail and fail-safes to prevent accidental
   * removal.
   *
   * @param connection
   * @param email The email address of the administrator to delete permanently.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseAdministrator(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("email")
    email: string & tags.Format<"email">,
  ): Promise<IResponseEmpty> {
    try {
      return await deleteadminAdministratorsEmail({
        administrator,
        email,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
