import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { getadminCommunitiesName } from "../../../providers/getadminCommunitiesName";
import { AdministratorAuth } from "../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../decorators/payload/AdministratorPayload";
import { putadminCommunitiesName } from "../../../providers/putadminCommunitiesName";
import { deleteadminCommunitiesName } from "../../../providers/deleteadminCommunitiesName";

import { ICommunitybbsCommunity } from "../../../api/structures/ICommunitybbsCommunity";

@Controller("/admin/communities/:name")
export class AdminCommunitiesController {
  /**
   * Get full details of a community by name (Admin only).
   *
   * This endpoint retrieves a specific community by its name identifier for
   * administrative review.
   *
   * The system looks up the community in the communitybbs_community table using
   * the name parameter (case-insensitive lookup). If the community exists, the
   * full record is returned including id, description, category, logo, banner,
   * rules, created_at, updated_at, deleted_at, member_count, and
   * last_active_at. This endpoint returns soft-deleted records (where
   * deleted_at is not null) unlike the public API, enabling administrators to
   * view and potentially restore archived communities.
   *
   * The response includes all fields as stored in the schema, including the
   * rules array as a JSON string and the image URLs. No filtering is applied
   * based on user access rights; administrators always see the complete state.
   * This operation is read-only and does not affect any data.
   *
   * This endpoint is used in moderation dashboards, recovery workflows, or
   * compliance audits where visibility into historical or inactive communities
   * is required. The name parameter is a required path variable that must match
   * exactly with the unique index constraint on the name field in the community
   * table.
   *
   * @param connection
   * @param name The unique name identifier of the community (e.g., 'ai',
   *   'retro-gaming'). Case-insensitive, must match exactly.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("name")
    name: string &
      tags.MinLength<3> &
      tags.MaxLength<32> &
      tags.Pattern<"^[a-z0-9_-]+$">,
  ): Promise<ICommunitybbsCommunity> {
    try {
      return await getadminCommunitiesName({
        administrator,
        name,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update community metadata (Admin only).
   *
   * This endpoint allows administrators to update the metadata of an existing
   * community in the communitybbs_community table.
   *
   * Fields that can be modified: name, category, description, rules, logo,
   * banner. The name field can be changed, but must remain unique among all
   * communities (case-insensitive). If the name changes, the system
   * automatically updates all related search index entries in
   * communitybbs_search_post and communitybbs_search_comment to reflect the new
   * name, ensuring search consistency.
   *
   * The category must be from the predefined list. The rules field, if updated,
   * must be a JSON-encoded array of strings, each â‰¤100 characters with a
   * maximum of 10 rules. The logo and banner URLs are updated as strings, but
   * not validated for content or existence.
   *
   * The updated_at timestamp is automatically set to the current time. The
   * operation is atomic and will fail if the name violates the unique
   * constraint or any text field exceeds its maximum length.
   *
   * This workflow allows administrators to correct mistakes, reorganize
   * categorization, update guidelines, or modernize branding. Changes are
   * persisted immediately and reflected in all UIs that display the community.
   * This endpoint does not affect membership status or posts within the
   * community.
   *
   * @param connection
   * @param name The current unique name identifier of the community to update.
   * @param body Patch payload containing fields to update. Only specified
   *   fields are modified.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("name")
    name: string &
      tags.MinLength<3> &
      tags.MaxLength<32> &
      tags.Pattern<"^[a-z0-9_-]+$">,
    @TypedBody()
    body: ICommunitybbsCommunity.IUpdate,
  ): Promise<ICommunitybbsCommunity> {
    try {
      return await putadminCommunitiesName({
        administrator,
        name,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a community (Admin only).
   *
   * This endpoint soft-deletes a community, archiving it from public view
   * without permanent data destruction.
   *
   * The system locates the community by name in the communitybbs_community
   * table and sets the deleted_at field to the current timestamp. This causes
   * the community to be excluded from all public queries (Home feed, Explore
   * page, Search results, etc.) but retains all related data: posts, comments,
   * votes, and logs.
   *
   * The operation triggers an update to the search index tables
   * (communitybbs_search_community, communitybbs_search_post,
   * communitybbs_search_comment) to ensure the content is hidden from search
   * results. The member_count is preserved, and last_active_at is not updated.
   *
   * A log entry is created in the communitybbs_log table with action_type
   * 'community_deleted', linking to the deleted community and the administrator
   * who performed the action.
   *
   * This operation is reversible. Setting deleted_at to null via an update
   * operation will restore the community to full visibility. The community name
   * remains reserved and cannot be reused until the community is restored.
   *
   * Soft-delete is preferred over hard-delete to preserve historical integrity,
   * enable audit recovery, and comply with data retention policies.
   *
   * @param connection
   * @param name The name identifier of the community to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("name")
    name: string &
      tags.MinLength<3> &
      tags.MaxLength<32> &
      tags.Pattern<"^[a-z0-9_-]+$">,
  ): Promise<ICommunitybbsCommunity> {
    try {
      return await deleteadminCommunitiesName({
        administrator,
        name,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
