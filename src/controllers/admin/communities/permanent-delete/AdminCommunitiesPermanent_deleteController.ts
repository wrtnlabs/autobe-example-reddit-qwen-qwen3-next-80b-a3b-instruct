import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deleteadminCommunitiesNamePermanentDelete } from "../../../../providers/deleteadminCommunitiesNamePermanentDelete";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";

import { IResponseEmpty } from "../../../../api/structures/IResponseEmpty";

@Controller("/admin/communities/:name/permanent-delete")
export class AdminCommunitiesPermanent_deleteController {
  /**
   * Permanently delete a community and all its data (Admin only).
   *
   * This endpoint performs a hard delete of a community and all its associated
   * content, irreversibly purging data from the system.
   *
   * The operation begins by locating the community by name in the
   * communitybbs_community table. If found, the system then deletes all
   * dependent records: all posts in communitybbs_post (via cascade), all
   * comments in communitybbs_comment (via cascade), all votes in
   * communitybbs_vote, all search entries in communitybbs_search_post,
   * communitybbs_search_comment, and communitybbs_search_community.
   *
   * All deletions are performed atomically using database transactions to
   * ensure integrity. The community record itself is deleted from the
   * communitybbs_community table.
   *
   * A log entry is created in the communitybbs_log table with action_type
   * 'community_permanently_deleted', including the administrator ID and
   * timestamp. This action cannot be undone and data recovery is impossible.
   *
   * This endpoint is only accessible to a select few super-administrators after
   * multiple confirmation steps. It is not exposed in UIs and is intended only
   * for emergency legal compliance, data breaches, or CCPA/GDPR deletion
   * requests where full erasure is mandated.
   *
   * Use this only when soft-delete is insufficient and legal obligations
   * require complete data destruction.
   *
   * @param connection
   * @param name The name identifier of the community to permanently delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseAll(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("name")
    name: string &
      tags.MinLength<3> &
      tags.MaxLength<32> &
      tags.Pattern<"^[a-z0-9_-]+$">,
  ): Promise<IResponseEmpty> {
    try {
      return await deleteadminCommunitiesNamePermanentDelete({
        administrator,
        name,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
