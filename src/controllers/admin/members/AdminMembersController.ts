import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { getadminMembersEmail } from "../../../providers/getadminMembersEmail";
import { AdministratorAuth } from "../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../decorators/payload/AdministratorPayload";
import { deleteadminMembersEmail } from "../../../providers/deleteadminMembersEmail";
import { putadminMembersEmailBan } from "../../../providers/putadminMembersEmailBan";
import { putadminMembersEmailUnban } from "../../../providers/putadminMembersEmailUnban";

import { ICommunitybbsMember } from "../../../api/structures/ICommunitybbsMember";
import { IResponseEmpty } from "../../../api/structures/IResponseEmpty";

@Controller("/admin/members/:email")
export class AdminMembersController {
  /**
   * View member account details (Admin only).
   *
   * This endpoint allows administrators to view detailed information about a
   * registered member account stored in the communitybbs_member table.
   *
   * The system looks up the member either by email (provided in path) or by ID
   * (if supported in future). It returns the following fields: id, email,
   * display_name, created_at, updated_at. The password_hash is never returned.
   * This information is used for moderation purposes such as reviewing account
   * activity, verifying identity, or diagnosing reports.
   *
   * The operation includes a timestamp of the member’s last active session by
   * joining with the communitybbs_session table (most recent session where
   * is_valid = true). This provides context on whether the member is active or
   * dormant.
   *
   * No post, comment, or vote history is included in the response to preserve
   * privacy and limit data exposure. The endpoint is read-only and does not
   * modify any data.
   *
   * This endpoint supports only administrative access and is not available to
   * regular members. This ensures that privacy is maintained while enabling
   * moderation workflows.
   *
   * @param connection
   * @param email The email address of the member to inspect.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async atMember(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("email")
    email: string & tags.Format<"email">,
  ): Promise<ICommunitybbsMember> {
    try {
      return await getadminMembersEmail({
        administrator,
        email,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a member and all their content (Admin only).
   *
   * This endpoint permanently deletes a member's account and all their
   * contributions, removing their data entirely from the system.
   *
   * The system identifies the member by email, then begins a cascading delete
   * process: all sessions in communitybbs_session (where actor_id matches), all
   * votes in communitybbs_vote (where actor_id matches), all comments in
   * communitybbs_comment (where communitybbs_member_id matches), all posts in
   * communitybbs_post (where communitybbs_member_id matches), and finally the
   * member record itself in communitybbs_member.
   *
   * The deletion is atomic, ensuring no orphaned data remains. A hard delete is
   * performed — the data is completely removed from the database.
   *
   * A detailed log entry is created in the communitybbs_log table with
   * action_type 'member_permanently_deleted', including the operator's identity
   * and the email of the deleted member.
   *
   * This operation is irreversible and the member's email may be reused. It is
   * intended only for legal compliance (GDPR, CCPA), severe abuse that requires
   * censorship, or formal user requests for complete removal. Use with extreme
   * caution.
   *
   * @param connection
   * @param email The email address of the member to delete permanently.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async eraseMember(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("email")
    email: string & tags.Format<"email">,
  ): Promise<IResponseEmpty> {
    try {
      return await deleteadminMembersEmail({
        administrator,
        email,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Ban a member from the platform (Admin only).
   *
   * This endpoint bans a member from the platform, effectively blocking their
   * access while preserving content history.
   *
   * The system identifies the member by their email, then locates all active
   * sessions (where is_valid = true) in the communitybbs_session table, and
   * permanently marks them as deleted by setting deleted_at to the current
   * timestamp and is_valid to false.
   *
   * The member's record in the communitybbs_member table is not deleted. Their
   * email, username, and historical contributions remain intact. They are
   * prevented from authenticating any further; login attempts will be denied.
   *
   * A log entry is created in the communitybbs_log table with action_type
   * 'member_banned' and includes the moderator's ID and the reason (if
   * provided). The ban is immutable and requires restoration via a separate
   * endpoint.
   *
   * This is a reputation action, not a deletion. Posts and comments created by
   * the member remain visible to maintain context and allow community review.
   * The ban does not affect post votes or comment threads.
   *
   * To reinstate access, the administrator must use the restore membership
   * endpoint.
   *
   * @param connection
   * @param email The email address of the member to ban.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put("ban")
  public async ban(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("email")
    email: string & tags.Format<"email">,
  ): Promise<ICommunitybbsMember> {
    try {
      return await putadminMembersEmailBan({
        administrator,
        email,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Restore banned member access (Admin only).
   *
   * This endpoint reinstates access for a previously banned member by allowing
   * new session creation.
   *
   * The system looks up the member by their email in the communitybbs_member
   * table. It does not restore any old sessions; instead, it permits future
   * sessions to be generated upon successful login. No existing deleted
   * sessions are retrieved.
   *
   * The member's data (email, display_name, created_at) remains unchanged. The
   * ban status is considered resolved, and the member may attempt to log in
   * again.
   *
   * If the member attempts to log in, the authentication flow proceeds
   * normally, and a new session is created. The previous inactive sessions
   * remain deleted for audit purposes.
   *
   * A log entry is created in the communitybbs_log table with action_type
   * 'member_unbanned', recording the administrator who performed the action and
   * the member's identity.
   *
   * This operation does not delete the ban history; it only re-enables the
   * account. The track record of past violations remains intact for review and
   * analytics.
   *
   * @param connection
   * @param email The email address of the member to unban.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put("unban")
  public async unban(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("email")
    email: string & tags.Format<"email">,
  ): Promise<ICommunitybbsMember> {
    try {
      return await putadminMembersEmailUnban({
        administrator,
        email,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
