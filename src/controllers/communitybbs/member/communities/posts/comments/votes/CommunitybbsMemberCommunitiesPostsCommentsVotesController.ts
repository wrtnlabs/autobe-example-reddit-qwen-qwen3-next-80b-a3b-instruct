import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postcommunitybbsMemberCommunitiesCommunityIdPostsPostIdCommentsCommentIdVotes } from "../../../../../../../providers/postcommunitybbsMemberCommunitiesCommunityIdPostsPostIdCommentsCommentIdVotes";
import { MemberAuth } from "../../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../../decorators/payload/MemberPayload";
import { deletecommunitybbsMemberCommunitiesCommunityIdPostsPostIdCommentsCommentIdVotes } from "../../../../../../../providers/deletecommunitybbsMemberCommunitiesCommunityIdPostsPostIdCommentsCommentIdVotes";

import { ICommunitybbsVote } from "../../../../../../../api/structures/ICommunitybbsVote";

@Controller(
  "/communitybbs/member/communities/:communityId/posts/:postId/comments/:commentId/votes",
)
export class CommunitybbsMemberCommunitiesPostsCommentsVotesController {
  /**
   * Create a vote on a specific comment.
   *
   * This operation allows an authenticated user to cast a vote on a specific
   * comment within a community post. Votes are critical to the platform's
   * engagement model, enabling users to express approval or disapproval of
   * content. When a vote is created, it is recorded in the communitybbs_vote
   * table with a reference to the comment's ID, the actor's ID (from
   * communitybbs_member or communitybbs_administrator), and the vote type
   * ('upvote' or 'downvote'). This operation does not support creating votes
   * for anonymous guests, ensuring all votes are attributable to authenticated
   * users.
   *
   * The system enforces business rules: a user cannot vote on their own
   * comment, and each user can have only one vote per comment. If a user
   * attempts to vote on their own comment, the system returns an error.
   * Additionally, the vote type must be either 'upvote' or 'downvote', and any
   * other value is rejected.
   *
   * This operation integrates with the communitybbs_comment table through the
   * comment_id foreign key and with the actor tables (communitybbs_member,
   * communitybbs_administrator) via the actor_id. The vote is recorded with a
   * timestamp (created_at) and does not allow modification after creation. The
   * score displayed for a comment is computed by summing upvotes minus
   * downvotes from all associated records in this table.
   *
   * This operation is used in conjunction with the DELETE operation on the same
   * endpoint to allow users to change or revoke their votes. The operation does
   * not return a response body, as the outcome is represented by the HTTP
   * status code (201 Created on success).
   *
   * @param connection
   * @param communityId Unique identifier of the target community containing the
   *   post and comment.
   * @param postId Unique identifier of the target post that contains the
   *   comment.
   * @param commentId Unique identifier of the target comment on which the vote
   *   is being cast.
   * @param body The vote data specifying the type of vote to create.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunitybbsVote.ICreate,
  ): Promise<void> {
    try {
      return await postcommunitybbsMemberCommunitiesCommunityIdPostsPostIdCommentsCommentIdVotes(
        {
          member,
          communityId,
          postId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a vote on a specific comment.
   *
   * This operation enables an authenticated user to remove their previously
   * cast vote on a specific comment within a community post. The vote is
   * identified by the comment_id in the path and the actor's identity from the
   * authenticated session. When deleted, the record is permanently removed from
   * the communitybbs_vote table, causing the comment's score (upvotes minus
   * downvotes) to be recalculated without this vote.
   *
   * No request body is required, as the system uses the path parameters
   * (communityId, postId, commentId) to locate the vote and the user's
   * authentication context (from session) to identify the actor. The system
   * ensures that only the user who originally cast the vote can delete it,
   * enforcing ownership through the actor_id foreign key relationship with
   * communitybbs_member or communitybbs_administrator.
   *
   * This operation supports the business requirement that users can change
   * their mind about a vote: clicking 'upvote' after previously 'downvoting'
   * will first delete the old vote and then create a new one. The operation
   * returns a 204 No Content status on success, indicating successful deletion
   * without returning a response body. This design ensures efficiency and
   * aligns with stateless REST principles.
   *
   * The system does not allow non-owning users to delete votes, enforcing that
   * users cannot delete votes cast by others. This preserves the integrity and
   * authenticity of community feedback.
   *
   * @param connection
   * @param communityId Unique identifier of the target community containing the
   *   post and comment.
   * @param postId Unique identifier of the target post that contains the
   *   comment.
   * @param commentId Unique identifier of the target comment on which the vote
   *   is being deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletecommunitybbsMemberCommunitiesCommunityIdPostsPostIdCommentsCommentIdVotes(
        {
          member,
          communityId,
          postId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
