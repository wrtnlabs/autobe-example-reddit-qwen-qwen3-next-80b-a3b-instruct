import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { postcommunitybbsMemberCommunitiesCommunityIdPostsPostIdVotes } from "../../../../../../providers/postcommunitybbsMemberCommunitiesCommunityIdPostsPostIdVotes";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";
import { deletecommunitybbsMemberCommunitiesCommunityIdPostsPostIdVotes } from "../../../../../../providers/deletecommunitybbsMemberCommunitiesCommunityIdPostsPostIdVotes";

import { ICommunitybbsVote } from "../../../../../../api/structures/ICommunitybbsVote";

@Controller("/communitybbs/member/communities/:communityId/posts/:postId/votes")
export class CommunitybbsMemberCommunitiesPostsVotesController {
  /**
   * Cast a vote on a post.
   *
   * This operation enables authenticated members to upvote or downvote a post,
   * contributing to the post's overall score which is displayed in UIs. The
   * vote is stored in the communitybbs_vote table, which links each vote to an
   * actor (authenticated user), a post (via post_id), and a type ('upvote' or
   * 'downvote').
   *
   * The system enforces several constraints: a user cannot vote on their own
   * post, as specified in the business rule: "You can't vote on your own
   * posts/comments." This is validated by comparing the authenticated user's ID
   * with the communitybbs_member_id of the post. If the user is the post
   * author, the operation will be denied with a 403 error.
   *
   * The user's vote state is toggleable: if the user has previously upvoted the
   * post and clicks again, the vote is removed (reverted to 'none'). If the
   * user has previously downvoted and clicks again, the vote is also removed.
   * If the user switches from upvote to downvote or vice versa, the change is
   * processed as an update.
   *
   * The vote does not have a comment or additional context field; it is purely
   * binary. The post score (upvotes - downvotes) is calculated dynamically at
   * query time from this table, and no aggregated field exists in the post
   * table itself, maintaining data normalization.
   *
   * This operation does not require the communityId for the voting logic
   * itself, but it is included in the path for context and consistency with the
   * resource hierarchy, enabling proper authorization and validation checks
   * against community ownership. The request body must contain the vote type as
   * 'upvote' or 'downvote'.
   *
   * The system automatically logs vote actions in the communitybbs_log table as
   * a side effect, but manual API access to these logs is not provided,
   * consistent with system-generated audit trail policy.
   *
   * @param connection
   * @param communityId Unique identifier of the target community containing the
   *   post
   * @param postId Unique identifier of the target post to be voted on
   * @param body The type of vote to cast on the post: 'upvote' or 'downvote'
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunitybbsVote.ICreate,
  ): Promise<ICommunitybbsVote> {
    try {
      return await postcommunitybbsMemberCommunitiesCommunityIdPostsPostIdVotes(
        {
          member,
          communityId,
          postId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a vote on a specific post.
   *
   * This operation allows an authenticated user to remove their previously cast
   * vote on a specific post within a community. The vote is identified by the
   * post_id in the path and the actor's identity from the authenticated
   * session. When deleted, the vote record is permanently removed from the
   * communitybbs_vote table, causing the post's score (upvotes minus downvotes)
   * to be recomputed without this vote.
   *
   * No request body is required, as the system uses the path parameters
   * (communityId, postId) to locate the vote and the user's authentication
   * context (from session) to identify the actor. The operation enforces that
   * only the user who originally cast the vote can delete it, ensuring
   * ownership through the actor_id foreign key relationship with
   * communitybbs_member or communitybbs_administrator.
   *
   * This operation supports the requirement that users can change their vote by
   * first deleting their existing vote and then creating a new one. The system
   * returns a 204 No Content status on successful deletion, indicating
   * completion without returning a response body.
   *
   * The system prevents users from deleting votes they did not cast and
   * prevents guests from performing this action. The deletion is immediate and
   * irreversible, as votes are stored as atomic, non-modifiable records in the
   * database. This design ensures data integrity in the scoring system and
   * aligns with the platform's requirement for authentic, accountable user
   * feedback.
   *
   * @param connection
   * @param communityId Unique identifier of the target community containing the
   *   post.
   * @param postId Unique identifier of the target post on which the vote is
   *   being deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletecommunitybbsMemberCommunitiesCommunityIdPostsPostIdVotes(
        {
          member,
          communityId,
          postId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
