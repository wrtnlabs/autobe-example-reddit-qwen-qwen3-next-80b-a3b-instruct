import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { patchcommunitybbsSearch } from "../../../providers/patchcommunitybbsSearch";

import { IPageICommunitybbsPost } from "../../../api/structures/IPageICommunitybbsPost";
import { ICommunitybbsSearch } from "../../../api/structures/ICommunitybbsSearch";

@Controller("/communitybbs/search")
export class CommunitybbsController {
  /**
   * Search across posts, communities, and comments with advanced filters.
   *
   * This operation enables advanced, multi-type search across the Community BBS
   * platform, providing users with the ability to find relevant content by
   * keyword in posts, communities, or comments. Unlike simple search endpoints,
   * this operation uses the PATCH HTTP method to accommodate a rich request
   * body, allowing for complex filtering criteria such as search type (post,
   * community, comment), sort order, and pagination parameters.
   *
   * The search is executed against three denormalized search index tables:
   * communitybbs_search_post for posts, communitybbs_search_community for
   * communities, and communitybbs_search_comment for comments. These indexes
   * are maintained by the system through triggers on the main entity tables and
   * are optimized for fast full-text search using PostgreSQL trigram operators
   * on title, body, name, description, and content fields.
   *
   * The request body specifies the search type ('posts', 'communities', or
   * 'comments'), the search query string, the sort order (for posts: 'Newest'
   * or 'Top'; for communities: 'Name Match' or 'Recently Created'; for
   * comments: 'Newest' only), the page size (default 20), and the page offset.
   * Responses are paginated with exactly 20 results per page.
   *
   * For search results, different response shapes are returned based on the
   * type:
   *
   * - For 'posts': returns IPageICommunitybbsPost.ISummary, with post title,
   *   community name, score, comment count, and excerpt
   * - For 'communities': returns IPageICommunitybbsCommunity.ISummary, with
   *   community name, description, logo, member count, and join button state
   * - For 'comments': returns IPageICommunitybbsComment.ISummary, with comment
   *   excerpt, author, creation time, parent post title, and community name
   *
   * This operation respects the business requirement that search results
   * default to 'Newest' for posts and comments and 'Name Match' for
   * communities. The system prevents queries under 2 characters and returns an
   * appropriate error. The operation supports session awareness, so the join
   * status in community search results is automatically adjusted based on the
   * authenticated user's membership.
   *
   * This operation is the single entry point for all search functionality on
   * the platform, unifying three previously separate search endpoints into one
   * cohesive interface. It ensures consistent behavior, performance, and user
   * experience across all content types.
   *
   * @param connection
   * @param body Search criteria including type, query, sort order, and
   *   pagination details. Must specify search type ('posts', 'communities',
   *   'comments'), query string, and may include sort and pagination
   *   parameters.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: ICommunitybbsSearch.IRequest,
  ): Promise<IPageICommunitybbsPost.ISummary> {
    try {
      return await patchcommunitybbsSearch({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
