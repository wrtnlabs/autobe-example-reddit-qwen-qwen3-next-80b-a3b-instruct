import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunitybbsCommunitiesCommunityIdPosts } from "../../../../providers/patchcommunitybbsCommunitiesCommunityIdPosts";
import { getcommunitybbsCommunitiesCommunityIdPostsPostId } from "../../../../providers/getcommunitybbsCommunitiesCommunityIdPostsPostId";

import { IPageICommunitybbsPost } from "../../../../api/structures/IPageICommunitybbsPost";
import { ICommunitybbsPost } from "../../../../api/structures/ICommunitybbsPost";

@Controller("/communitybbs/communities/:communityId/posts")
export class CommunitybbsCommunitiesPostsController {
  /**
   * Search and retrieve paginated posts from a specific community.
   *
   * Retrieve an ordered and paginated list of posts from a specific community,
   * filtered by the provided search criteria. This operation supports advanced
   * filtering using the request body, including sort order (Newest or Top),
   * limit, offset, and text search. For the 'Newest' sort order, results are
   * sorted by creation_time descending, and then by post_id descending for
   * ties. For the 'Top' sort order, results are sorted by score (upvotes minus
   * downvotes) descending, followed by creation_time descending, and finally by
   * post_id descending. The operation only returns posts where deleted_at is
   * null, ensuring archived posts are excluded. The results are constructed by
   * querying the communitybbs_post table, using the communitybbs_community_id
   * as the filter, and joined with the communitybbs_vote table to compute
   * scores. The communitybbs_search_post table is not used here because this
   * endpoint is community-specific and does not require full-text search across
   * the whole platform — instead, it performs standard database queries
   * optimized for range and index scans on the community-specific post set.
   * Pagination is implemented via offset and limit, fetching exactly 20 posts
   * per page as per requirements. This endpoint must be accessible to all
   * authenticated users and reflects the user's joined community state — if the
   * user has not joined the community, the results are still accessible
   * (read-only), matching the public nature of community posts. No role
   * restrictions are needed because posts within communities are publicly
   * readable by design.
   *
   * @param connection
   * @param communityId Unique identifier of the community to retrieve posts
   *   from.
   * @param body Search criteria and pagination parameters for filtering posts
   *   within a community.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ICommunitybbsPost.IRequest,
  ): Promise<IPageICommunitybbsPost> {
    try {
      return await patchcommunitybbsCommunitiesCommunityIdPosts({
        communityId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the full details of a specific post.
   *
   * Retrieve the detailed information of a specific post, identified by its
   * unique post ID within the context of its community. This operation returns
   * the complete post object with all its fields: title, body, author display
   * name (as captured at time of creation), creation timestamp, update
   * timestamp, member count, and score (calculated as upvotes minus downvotes).
   * The system verifies that the target post belongs to the specified community
   * and that the post has not been soft-deleted (deleted_at is null). This
   * operation does not return associated comments — those are available via a
   * separate endpoint at /communities/{communityId}/posts/{postId}/comments.
   * This endpoint is designed to support public viewability; any user — guest
   * or authenticated — may access a post detail page. The query joins the
   * communitybbs_post table with the communitybbs_community table to confirm
   * relationship and with the communitybbs_vote table to compute the score
   * using sum conditions. No user role restrictions are needed because access
   * to post content is public by design, as specified in the requirements. The
   * response is optimized for frontend rendering and includes all required
   * metadata for rendering the post detail page without requiring additional
   * API calls. This endpoint must maintain high performance because it is
   * frequently accessed during user navigation.
   *
   * @param connection
   * @param communityId Unique identifier of the community containing the post.
   * @param postId Unique identifier of the post to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<ICommunitybbsPost> {
    try {
      return await getcommunitybbsCommunitiesCommunityIdPostsPostId({
        communityId,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
