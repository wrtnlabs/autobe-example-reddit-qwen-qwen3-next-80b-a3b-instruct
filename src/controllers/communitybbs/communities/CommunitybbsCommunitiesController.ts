import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchcommunitybbsCommunities } from "../../../providers/patchcommunitybbsCommunities";
import { getcommunitybbsCommunitiesCommunityId } from "../../../providers/getcommunitybbsCommunitiesCommunityId";

import { IPageICommunitybbsCommunity } from "../../../api/structures/IPageICommunitybbsCommunity";
import { ICommunitybbsCommunity } from "../../../api/structures/ICommunitybbsCommunity";

@Controller("/communitybbs/communities")
export class CommunitybbsCommunitiesController {
  /**
   * Search and retrieve a filtered, paginated list of communities.
   *
   * Retrieve a filtered and paginated list of communities from the system. This
   * operation provides advanced search capabilities for finding communities
   * based on multiple criteria including partial name matching, description
   * keyword search, category filtering, and activity-based sorting.
   *
   * The operation supports comprehensive pagination with configurable page
   * sizes and multiple sort orders including 'Name Match' (default for
   * community search) and 'Recently Created'. Communities can be sorted by name
   * similarity to the search query, creation date, or popularity metrics
   * derived from member count and last active timestamp.
   *
   * Security considerations include rate limiting for search operations and
   * appropriate filtering of sensitive community information based on the
   * requesting user's authorization level. Only users with appropriate
   * permissions can access detailed community information, while basic
   * community lists may be available to authenticated users.
   *
   * This operation integrates with the communitybbs_community table as defined
   * in the Prisma schema, incorporating all available community fields
   * including name, description, category, logo, banner, rules, member_count,
   * and last_active_at. The response includes community summary information
   * optimized for list displays, with options to include additional details
   * based on authorization level. The search functionality leverages the
   * communitybbs_search_community table for optimized full-text performance
   * across name and description fields.
   *
   * @param connection
   * @param body Search criteria and pagination parameters for community
   *   filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async search(
    @TypedBody()
    body: ICommunitybbsCommunity.IRequest,
  ): Promise<IPageICommunitybbsCommunity.ISummary> {
    try {
      return await patchcommunitybbsCommunities({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific community by its unique identifier.
   *
   * Retrieve detailed information about a specific community identified by its
   * unique UUID. This operation is used to display community details on the
   * community home page when accessed via /c/[name] URL structure.
   *
   * The system retrieves the community data from the communitybbs_community
   * table, incorporating all relevant fields including name, description,
   * category, logo, banner, rules, member_count, and last_active_at. The
   * community name is stored in a case-sensitive format to preserve exact URL
   * paths, but the system performs case-insensitive lookups in application
   * logic to ensure consistent access.
   *
   * Security considerations include ensuring that private or deleted
   * communities are not accessible to unauthorized users. The response includes
   * full community metadata for authorized access, with special handling for
   * communities that have been soft-deleted (where deleted_at is not null),
   * which should return a 404 Not Found response.
   *
   * This operation directly references the communitybbs_community table's
   * fields as defined in the Prisma schema. The returned data includes the
   * complete community description, rules array, and visual asset URLs. The
   * member_count is provided as a denormalized field for performance
   * optimization, but the actual membership count should be validated against
   * the relationship to communitybbs_member via junction table logic in the
   * service layer.
   *
   * Related operations include the search operation on /communities for
   * discovering communities and the update operation for administrative
   * modifications. Error handling must account for invalid community
   * identifiers and deleted communities with appropriate 404 responses.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":communityId")
  public async at(
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<ICommunitybbsCommunity> {
    try {
      return await getcommunitybbsCommunitiesCommunityId({
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
