import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deletecommunitybbsAdministratorCommunitiesCommunityIdPostsPostIdCommentsCommentId } from "../../../../../../providers/deletecommunitybbsAdministratorCommunitiesCommunityIdPostsPostIdCommentsCommentId";
import { AdministratorAuth } from "../../../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../../../decorators/payload/AdministratorPayload";

@Controller(
  "/communitybbs/administrator/communities/:communityId/posts/:postId/comments/:commentId",
)
export class CommunitybbsAdministratorCommunitiesPostsCommentsController {
  /**
   * Permanently delete a comment by ID.
   *
   * This operation permanently deletes a specific comment within a post in a
   * community. It operates on the communitybbs_comment table from the Prisma
   * schema. The comment can only be deleted by its original author or an
   * administrator. This endpoint implements hard deletion as there is no
   * deleted_at field in the schema, removing the comment completely from the
   * database.
   *
   * Per the Prisma schema, the communitybbs_comment table does not include a
   * deleted_at field, indicating that deletion is permanent rather than soft
   * deletion. When a comment is deleted, all associated data is removed from
   * the database, including its relationships to votes and parent-child
   * relationships. There is no recovery mechanism.
   *
   * Security considerations include strict ownership verification. Only the
   * original author of a comment or an administrator can delete a comment. If
   * an unauthorized user attempts deletion, the system returns a 403 Forbidden
   * response with the message 'You can edit or delete only items you authored.'
   * This ensures content integrity and prevents unauthorized removal of user
   * content.
   *
   * The system follows the business requirement that comments can be deleted by
   * their authors, but cannot be deleted by other users without administrative
   * privileges. The operation does not return any response body as per standard
   * practice for DELETE operations, with success indicated by a 204 No Content
   * response.
   *
   * Related API operations include retrieving a specific comment (GET
   * /communities/{communityId}/posts/{postId}/comments/{commentId}), updating a
   * comment (PUT
   * /communities/{communityId}/posts/{postId}/comments/{commentId}), and
   * retrieving all comments (PATCH
   * /communities/{communityId}/posts/{postId}/comments). This 'erase' operation
   * is the primary method for comment removal in the UI.
   *
   * @param connection
   * @param communityId Unique identifier of the target community
   * @param postId Unique identifier of the target post
   * @param commentId Unique identifier of the target comment
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletecommunitybbsAdministratorCommunitiesCommunityIdPostsPostIdCommentsCommentId(
        {
          administrator,
          communityId,
          postId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
