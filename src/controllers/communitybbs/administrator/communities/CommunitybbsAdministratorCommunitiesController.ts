import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { deletecommunitybbsAdministratorCommunitiesCommunityId } from "../../../../providers/deletecommunitybbsAdministratorCommunitiesCommunityId";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";

@Controller("/communitybbs/administrator/communities/:communityId")
export class CommunitybbsAdministratorCommunitiesController {
  /**
   * Permanently delete a community by ID.
   *
   * Permanently delete a community and all its associated content from the
   * platform. This operation is exclusively available to administrators and
   * triggers a cascading deletion of all related data. When a community is
   * deleted, all posts, comments, votes, and search index entries associated
   * with the community are also removed from the database. This operation
   * performs a hard delete, meaning the community record is permanently removed
   * from the database and cannot be recovered. It is not a soft delete because,
   * although the communitybbs_community model has a deleted_at field, this
   * field is used for archival reporting and UI filtering only â€” the system
   * does not preserve records after deletion; instead, log entries are
   * maintained for audit purposes. This behavior is consistent with the
   * requirement that administrators can delete communities and purge all
   * associated data. The deletion is atomic and must succeed or fail entirely,
   * ensuring no orphaned records remain. The system will also log the deletion
   * event in the communitybbs_log table for audit trail purposes. This
   * operation requires elevated permissions because it irreversibly removes
   * user-generated content and metadata. Access is restricted to the
   * administrator role with no fallback to other roles for security and
   * compliance reasons.
   *
   * @param connection
   * @param communityId Unique identifier of the community to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("communityId")
    communityId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletecommunitybbsAdministratorCommunitiesCommunityId({
        administrator,
        communityId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
