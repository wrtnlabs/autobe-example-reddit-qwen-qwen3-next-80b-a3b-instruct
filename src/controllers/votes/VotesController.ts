import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postvotes } from "../../providers/postvotes";
import { MemberAuth } from "../../decorators/MemberAuth";
import { MemberPayload } from "../../decorators/payload/MemberPayload";

import { IVote } from "../../api/structures/IVote";

@Controller("/votes")
export class VotesController {
  /**
   * Cast an upvote or downvote on a post or comment.
   *
   * This operation enables an authenticated member to vote on any post or
   * comment. The system creates an entry in the communitybbs_vote table by
   * setting the actor_id to the authenticated member's id, and either post_id
   * or comment_id to the target object's id, while ensuring exactly one target
   * is provided (mutually exclusive). The type field is set to either 'upvote'
   * or 'downvote'. The system enforces a constraint that no member can vote
   * more than once on the same post or comment by checking the unique index on
   * [actor_id, post_id] and [actor_id, comment_id]. If a user attempts to
   * change their vote (e.g., from upvote to downvote), the system deletes their
   * existing vote record and creates a new one with the updated type. If the
   * user attempts to vote on their own content, the system prevents the action
   * by checking the author_id fields of the target post or comment and returns
   * an error message as required by business rules. This implementation aligns
   * with the communitybbs_vote tableâ€™s design, which stores vote type and
   * reference to the actor and target. Votes are used to compute the score
   * fields in communitybbs_post and communitybbs_comment tables via postgresql
   * aggregate views or application logic.
   *
   * @param connection
   * @param body Request body specifying vote type ('upvote' or 'downvote') and
   *   target (either post_id or comment_id).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IVote.ICreate,
  ): Promise<IVote> {
    try {
      return await postvotes({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
